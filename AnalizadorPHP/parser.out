Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ID

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> var_asignar
Rule 4     expresion -> var_declarar
Rule 5     expresion -> expresiones_de_salida
Rule 6     expresion -> estructuras_de_control
Rule 7     expresion -> var_plusminus
Rule 8     expresion -> funciones_datos_estructurados
Rule 9     expresion -> funcion_declaracion
Rule 10    expresion -> return
Rule 11    expresion -> funcion_ejecucion
Rule 12    expresion -> foreach
Rule 13    var_declarar -> VAR var_asignar
Rule 14    var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON
Rule 15    var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima
Rule 16    var_asignar_contenido -> VARIABLE
Rule 17    var_asignar_contenido -> elemento_numerico
Rule 18    var_asignar_contenido -> elemento_string
Rule 19    var_asignar_contenido -> elemento_logico
Rule 20    var_asignar_contenido -> datos_estructurados
Rule 21    var_asignar_contenido -> funciones_ingreso_datos
Rule 22    var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 23    var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 24    elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 25    elemento_numerico -> FLOAT
Rule 26    elemento_numerico -> NUMBER
Rule 27    elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 28    elemento_numerico -> VARIABLE
Rule 29    operador -> PLUS
Rule 30    operador -> MINUS
Rule 31    operador -> DIVIDE
Rule 32    operador -> EXPONENTIAL
Rule 33    operador -> TIMES
Rule 34    elemento_string -> STRING
Rule 35    elemento_string -> STRINGCC
Rule 36    elemento_string -> VARIABLE
Rule 37    elemento_logico -> elemento_logico_pri
Rule 38    elemento_logico -> elemento_logico comparador elemento_logico
Rule 39    elemento_logico -> NOTLOGICAL elemento_logico
Rule 40    elemento_logico -> VARIABLE
Rule 41    elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 42    elemento_logico -> elemento_string comparador elemento_string
Rule 43    elemento_logico_pri -> TRUE
Rule 44    elemento_logico_pri -> FALSE
Rule 45    comparador -> IDENTICAL
Rule 46    comparador -> NOTIDENTICAL
Rule 47    comparador -> EQUALSLOGICAL
Rule 48    comparador -> DIFFERENT
Rule 49    comparador -> GREATEREQUAL
Rule 50    comparador -> LESSEQUAL
Rule 51    comparador -> GREATERTHAN
Rule 52    comparador -> LESSTHAN
Rule 53    comparador -> ANDlOGICAL
Rule 54    comparador -> ORLOGICAL
Rule 55    param -> VARIABLE
Rule 56    param -> elemento_string
Rule 57    param -> elemento_numerico
Rule 58    param -> elemento_logico
Rule 59    params -> param
Rule 60    params -> param COMMA params
Rule 61    params_points -> param
Rule 62    params_points -> param POINT params_points
Rule 63    params_unitype -> only_string
Rule 64    params_unitype -> only_numerico
Rule 65    params_unitype -> only_logico
Rule 66    only_string -> elemento_string
Rule 67    only_string -> elemento_string COMMA only_string
Rule 68    only_numerico -> elemento_numerico
Rule 69    only_numerico -> elemento_numerico COMMA only_numerico
Rule 70    only_logico -> elemento_logico
Rule 71    only_logico -> elemento_logico COMMA only_logico
Rule 72    optional_params -> param
Rule 73    optional_params -> 
Rule 74    optional_params -> param COMMA optional_params
Rule 75    expresiones_de_salida -> echo
Rule 76    expresiones_de_salida -> print
Rule 77    expresiones_de_salida -> vardump
Rule 78    expresiones_de_salida -> print_r
Rule 79    expresiones_de_salida -> var_export
Rule 80    echo -> ECHO params SEMICOLON
Rule 81    echo -> ECHO params_points SEMICOLON
Rule 82    print -> PRINT param SEMICOLON
Rule 83    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 84    vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 85    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 86    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 87    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 88    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 89    estructuras_de_control -> if_structures
Rule 90    estructuras_de_control -> estructuras_while
Rule 91    if_structures -> if
Rule 92    if_structures -> if else
Rule 93    if_structures -> if else_if else
Rule 94    if_structures -> if else_if
Rule 95    if_structures -> if_r ENDIF SEMICOLON
Rule 96    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 97    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 98    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 99    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 100   else -> ELSE LCURLY expresiones RCURLY
Rule 101   else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 102   else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 103   else_if -> else_if else_if
Rule 104   if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 105   else_r -> ELSE DOUBLEPOINT expresiones
Rule 106   elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 107   elseif_r -> elseif_r elseif_r
Rule 108   estructuras_while -> while_p
Rule 109   while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 110   while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
Rule 111   foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
Rule 112   foreach_content -> VARIABLE AS VARIABLE
Rule 113   foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE
Rule 114   funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo
Rule 115   funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 116   funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 117   funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 118   funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo
Rule 119   funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN
Rule 120   funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN
Rule 121   funciones_cuerpo -> LCURLY expresiones RCURLY
Rule 122   funciones_cuerpo -> LCURLY RCURLY
Rule 123   return -> RETURN var_asignar_contenido SEMICOLON
Rule 124   funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
Rule 125   funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
Rule 126   funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 127   funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON
Rule 128   funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo
Rule 129   funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo
Rule 130   variables_por_comma -> VARIABLE
Rule 131   variables_por_comma -> VARIABLE COMMA variables_por_comma
Rule 132   datos_estructurados -> map
Rule 133   datos_estructurados -> vector
Rule 134   datos_estructurados -> set
Rule 135   map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
Rule 136   map -> NEW MAP LPAREN RPAREN
Rule 137   clave_valor -> elemento_string ARROW param
Rule 138   clave_valor -> NUMBER ARROW param
Rule 139   todos_clave_valor -> clave_valor
Rule 140   todos_clave_valor -> clave_valor COMMA todos_clave_valor
Rule 141   vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
Rule 142   vector -> NEW VECTOR LPAREN RPAREN
Rule 143   datos -> FLOAT
Rule 144   datos -> NUMBER
Rule 145   datos -> STRING
Rule 146   datos -> STRINGCC
Rule 147   datos -> elemento_logico_pri
Rule 148   llenar -> datos
Rule 149   llenar -> datos COMMA llenar
Rule 150   set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN
Rule 151   set -> NEW SET LPAREN RPAREN
Rule 152   funciones_datos_estructurados -> funciones_map
Rule 153   funciones_datos_estructurados -> funciones_set
Rule 154   funciones_datos_estructurados -> funciones_vector
Rule 155   funciones_map -> key_map
Rule 156   funciones_map -> diff_map
Rule 157   key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
Rule 158   diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
Rule 159   funciones_vector -> find_vector
Rule 160   funciones_vector -> push_vector
Rule 161   find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
Rule 162   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
Rule 163   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
Rule 164   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON
Rule 165   funciones_set -> union_set
Rule 166   funciones_set -> remove_set
Rule 167   union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
Rule 168   remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
Rule 169   remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON

Terminals, with rules where they appear

                     : 73
ANDlOGICAL           : 53
ARROW                : 113 137 138
AS                   : 112 113
COMMA                : 60 67 69 71 74 86 131 140 149
DIFF                 : 158
DIFFERENT            : 48
DIVIDE               : 31
DOUBLEPOINT          : 104 105 106 110
ECHO                 : 80 81
ELSE                 : 100 102 105
ELSEIF               : 101 106
ENDIF                : 95 96 97 98
ENDWHILE             : 110
EQUALS               : 14 15 115 116
EQUALSLOGICAL        : 47
EXPONENTIAL          : 32
FALSE                : 44
FIND                 : 161
FLOAT                : 25 143
FOREACH              : 111
FUNCTION             : 114 115 116 117 118 128 129
FUNCTION_NAME        : 119 120 124 125
GREATEREQUAL         : 49
GREATERTHAN          : 51
ID                   : 
IDENTICAL            : 45
IF                   : 99 102 104
KEYS                 : 157
LBRACKET             : 135 141 150 164 169
LCURLY               : 99 100 101 102 109 111 121 122
LESSEQUAL            : 50
LESSTHAN             : 52
LPAREN               : 27 83 84 85 86 87 88 99 101 102 104 106 109 110 111 115 116 117 118 119 120 124 125 126 127 128 129 135 136 141 142 150 151 157 157 158 158 161 161 162 163 164 167 167 168 169
MAP                  : 135 136
MINUS                : 23 23 30
NEW                  : 135 136 141 142 150 151
NOTIDENTICAL         : 46
NOTLOGICAL           : 39
NUMBER               : 26 138 144
ORLOGICAL            : 54
PLUS                 : 22 22 29
POINT                : 62
PRINT                : 82
PRINT_R              : 83
PUSH                 : 162 163 164
RBRACKET             : 135 141 150 164 169
RCURLY               : 99 100 101 102 109 111 121 122
READLINE             : 87 88
REMOVE               : 168 169
RETURN               : 123
RPAREN               : 27 83 84 85 86 87 88 99 101 102 104 106 109 110 111 115 116 117 118 119 120 124 125 126 127 128 129 135 136 141 142 150 151 157 157 158 158 161 161 162 163 164 167 167 168 169
SEMICOLON            : 14 22 23 80 81 82 83 84 85 95 96 97 98 110 123 124 125 126 127 157 158 161 162 163 164 167 168 169
SET                  : 150 151
SIMPLEARROW          : 157 158 161 162 163 164 167 168 169
STRING               : 34 145
STRINGCC             : 35 146
TIMES                : 33
TRUE                 : 43
UNION                : 167
VAR                  : 13 116
VARIABLE             : 14 15 16 22 23 28 36 40 55 112 112 113 113 113 115 116 126 127 130 131 157 158 158 161 162 163 164 167 167 168 169
VAR_DUMP             : 84 157 158 161 167
VAR_EXPORT           : 85 86
VECTOR               : 141 142
WHILE                : 109 110
error                : 

Nonterminals, with rules where they appear

clave_valor          : 139 140
comparador           : 38 41 42
datos                : 148 149
datos_estructurados  : 20
diff_map             : 156
echo                 : 75
elemento_logico      : 19 38 38 39 58 70 71 86 99 101 102 104 106 109 110
elemento_logico_pri  : 37 147
elemento_numerico    : 17 24 24 27 41 41 57 68 69
elemento_string      : 18 42 42 56 66 67 88 137
else                 : 92 93
else_if              : 93 94 103 103
else_r               : 96 97
elseif_r             : 97 98 107 107
estructuras_de_control : 6
estructuras_while    : 90
expresion            : 1 2
expresiones          : 2 99 100 101 102 104 105 106 109 110 111 121 0
expresiones_de_salida : 5
find_vector          : 159
foreach              : 12
foreach_content      : 111
funcion_cabecera_declaracion : 114
funcion_declaracion  : 9
funcion_declaracion_anonima : 15
funcion_ejecucion    : 11
funciones_cuerpo     : 114 115 116 117 118 124 125 128 129
funciones_datos_estructurados : 8
funciones_ingreso_datos : 21
funciones_map        : 152
funciones_set        : 153
funciones_vector     : 154
if                   : 91 92 93 94
if_r                 : 95 96 97 98
if_structures        : 89
key_map              : 155
llenar               : 149
map                  : 132
only_logico          : 65 71
only_numerico        : 64 69
only_string          : 63 67
operador             : 24
optional_params      : 74
param                : 59 60 61 62 72 74 82 83 84 85 86 137 138 161 162
params               : 60 80 124 127 128 141 150 163 164
params_points        : 62 81
params_unitype       : 168 169
print                : 76
print_r              : 78
push_vector          : 160
remove_set           : 166
return               : 10
set                  : 134
todos_clave_valor    : 135 140
union_set            : 165
var_asignar          : 3 13
var_asignar_contenido : 14 123
var_declarar         : 4
var_export           : 79
var_plusminus        : 7
vardump              : 77
variables_por_comma  : 115 116 117 119 131
vector               : 133
while_p              : 108

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 45
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 3

    (3) expresion -> var_asignar .

    VARIABLE        reduce using rule 3 (expresion -> var_asignar .)
    VAR             reduce using rule 3 (expresion -> var_asignar .)
    FUNCTION        reduce using rule 3 (expresion -> var_asignar .)
    RETURN          reduce using rule 3 (expresion -> var_asignar .)
    FUNCTION_NAME   reduce using rule 3 (expresion -> var_asignar .)
    FOREACH         reduce using rule 3 (expresion -> var_asignar .)
    ECHO            reduce using rule 3 (expresion -> var_asignar .)
    PRINT           reduce using rule 3 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 3 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 3 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 3 (expresion -> var_asignar .)
    IF              reduce using rule 3 (expresion -> var_asignar .)
    WHILE           reduce using rule 3 (expresion -> var_asignar .)
    $end            reduce using rule 3 (expresion -> var_asignar .)
    RCURLY          reduce using rule 3 (expresion -> var_asignar .)
    ENDIF           reduce using rule 3 (expresion -> var_asignar .)
    ELSE            reduce using rule 3 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 3 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 3 (expresion -> var_asignar .)


state 4

    (4) expresion -> var_declarar .

    VARIABLE        reduce using rule 4 (expresion -> var_declarar .)
    VAR             reduce using rule 4 (expresion -> var_declarar .)
    FUNCTION        reduce using rule 4 (expresion -> var_declarar .)
    RETURN          reduce using rule 4 (expresion -> var_declarar .)
    FUNCTION_NAME   reduce using rule 4 (expresion -> var_declarar .)
    FOREACH         reduce using rule 4 (expresion -> var_declarar .)
    ECHO            reduce using rule 4 (expresion -> var_declarar .)
    PRINT           reduce using rule 4 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 4 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_declarar .)
    IF              reduce using rule 4 (expresion -> var_declarar .)
    WHILE           reduce using rule 4 (expresion -> var_declarar .)
    $end            reduce using rule 4 (expresion -> var_declarar .)
    RCURLY          reduce using rule 4 (expresion -> var_declarar .)
    ENDIF           reduce using rule 4 (expresion -> var_declarar .)
    ELSE            reduce using rule 4 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 4 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_declarar .)


state 5

    (5) expresion -> expresiones_de_salida .

    VARIABLE        reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 5 (expresion -> expresiones_de_salida .)
    FUNCTION        reduce using rule 5 (expresion -> expresiones_de_salida .)
    RETURN          reduce using rule 5 (expresion -> expresiones_de_salida .)
    FUNCTION_NAME   reduce using rule 5 (expresion -> expresiones_de_salida .)
    FOREACH         reduce using rule 5 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 5 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 5 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 5 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 5 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 5 (expresion -> expresiones_de_salida .)


state 6

    (6) expresion -> estructuras_de_control .

    VARIABLE        reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 6 (expresion -> estructuras_de_control .)
    FUNCTION        reduce using rule 6 (expresion -> estructuras_de_control .)
    RETURN          reduce using rule 6 (expresion -> estructuras_de_control .)
    FUNCTION_NAME   reduce using rule 6 (expresion -> estructuras_de_control .)
    FOREACH         reduce using rule 6 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 6 (expresion -> estructuras_de_control .)
    IF              reduce using rule 6 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 6 (expresion -> estructuras_de_control .)
    $end            reduce using rule 6 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 6 (expresion -> estructuras_de_control .)


state 7

    (7) expresion -> var_plusminus .

    VARIABLE        reduce using rule 7 (expresion -> var_plusminus .)
    VAR             reduce using rule 7 (expresion -> var_plusminus .)
    FUNCTION        reduce using rule 7 (expresion -> var_plusminus .)
    RETURN          reduce using rule 7 (expresion -> var_plusminus .)
    FUNCTION_NAME   reduce using rule 7 (expresion -> var_plusminus .)
    FOREACH         reduce using rule 7 (expresion -> var_plusminus .)
    ECHO            reduce using rule 7 (expresion -> var_plusminus .)
    PRINT           reduce using rule 7 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 7 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 7 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 7 (expresion -> var_plusminus .)
    IF              reduce using rule 7 (expresion -> var_plusminus .)
    WHILE           reduce using rule 7 (expresion -> var_plusminus .)
    $end            reduce using rule 7 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 7 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 7 (expresion -> var_plusminus .)
    ELSE            reduce using rule 7 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 7 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 7 (expresion -> var_plusminus .)


state 8

    (8) expresion -> funciones_datos_estructurados .

    VARIABLE        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR             reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FUNCTION        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    RETURN          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FUNCTION_NAME   reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FOREACH         reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ECHO            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    PRINT           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR_DUMP        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    PRINT_R         reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR_EXPORT      reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    IF              reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    WHILE           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    $end            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    RCURLY          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ENDIF           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ELSE            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ELSEIF          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ENDWHILE        reduce using rule 8 (expresion -> funciones_datos_estructurados .)


state 9

    (9) expresion -> funcion_declaracion .

    VARIABLE        reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR             reduce using rule 9 (expresion -> funcion_declaracion .)
    FUNCTION        reduce using rule 9 (expresion -> funcion_declaracion .)
    RETURN          reduce using rule 9 (expresion -> funcion_declaracion .)
    FUNCTION_NAME   reduce using rule 9 (expresion -> funcion_declaracion .)
    FOREACH         reduce using rule 9 (expresion -> funcion_declaracion .)
    ECHO            reduce using rule 9 (expresion -> funcion_declaracion .)
    PRINT           reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR_DUMP        reduce using rule 9 (expresion -> funcion_declaracion .)
    PRINT_R         reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR_EXPORT      reduce using rule 9 (expresion -> funcion_declaracion .)
    IF              reduce using rule 9 (expresion -> funcion_declaracion .)
    WHILE           reduce using rule 9 (expresion -> funcion_declaracion .)
    $end            reduce using rule 9 (expresion -> funcion_declaracion .)
    RCURLY          reduce using rule 9 (expresion -> funcion_declaracion .)
    ENDIF           reduce using rule 9 (expresion -> funcion_declaracion .)
    ELSE            reduce using rule 9 (expresion -> funcion_declaracion .)
    ELSEIF          reduce using rule 9 (expresion -> funcion_declaracion .)
    ENDWHILE        reduce using rule 9 (expresion -> funcion_declaracion .)


state 10

    (10) expresion -> return .

    VARIABLE        reduce using rule 10 (expresion -> return .)
    VAR             reduce using rule 10 (expresion -> return .)
    FUNCTION        reduce using rule 10 (expresion -> return .)
    RETURN          reduce using rule 10 (expresion -> return .)
    FUNCTION_NAME   reduce using rule 10 (expresion -> return .)
    FOREACH         reduce using rule 10 (expresion -> return .)
    ECHO            reduce using rule 10 (expresion -> return .)
    PRINT           reduce using rule 10 (expresion -> return .)
    VAR_DUMP        reduce using rule 10 (expresion -> return .)
    PRINT_R         reduce using rule 10 (expresion -> return .)
    VAR_EXPORT      reduce using rule 10 (expresion -> return .)
    IF              reduce using rule 10 (expresion -> return .)
    WHILE           reduce using rule 10 (expresion -> return .)
    $end            reduce using rule 10 (expresion -> return .)
    RCURLY          reduce using rule 10 (expresion -> return .)
    ENDIF           reduce using rule 10 (expresion -> return .)
    ELSE            reduce using rule 10 (expresion -> return .)
    ELSEIF          reduce using rule 10 (expresion -> return .)
    ENDWHILE        reduce using rule 10 (expresion -> return .)


state 11

    (11) expresion -> funcion_ejecucion .

    VARIABLE        reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR             reduce using rule 11 (expresion -> funcion_ejecucion .)
    FUNCTION        reduce using rule 11 (expresion -> funcion_ejecucion .)
    RETURN          reduce using rule 11 (expresion -> funcion_ejecucion .)
    FUNCTION_NAME   reduce using rule 11 (expresion -> funcion_ejecucion .)
    FOREACH         reduce using rule 11 (expresion -> funcion_ejecucion .)
    ECHO            reduce using rule 11 (expresion -> funcion_ejecucion .)
    PRINT           reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR_DUMP        reduce using rule 11 (expresion -> funcion_ejecucion .)
    PRINT_R         reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR_EXPORT      reduce using rule 11 (expresion -> funcion_ejecucion .)
    IF              reduce using rule 11 (expresion -> funcion_ejecucion .)
    WHILE           reduce using rule 11 (expresion -> funcion_ejecucion .)
    $end            reduce using rule 11 (expresion -> funcion_ejecucion .)
    RCURLY          reduce using rule 11 (expresion -> funcion_ejecucion .)
    ENDIF           reduce using rule 11 (expresion -> funcion_ejecucion .)
    ELSE            reduce using rule 11 (expresion -> funcion_ejecucion .)
    ELSEIF          reduce using rule 11 (expresion -> funcion_ejecucion .)
    ENDWHILE        reduce using rule 11 (expresion -> funcion_ejecucion .)


state 12

    (12) expresion -> foreach .

    VARIABLE        reduce using rule 12 (expresion -> foreach .)
    VAR             reduce using rule 12 (expresion -> foreach .)
    FUNCTION        reduce using rule 12 (expresion -> foreach .)
    RETURN          reduce using rule 12 (expresion -> foreach .)
    FUNCTION_NAME   reduce using rule 12 (expresion -> foreach .)
    FOREACH         reduce using rule 12 (expresion -> foreach .)
    ECHO            reduce using rule 12 (expresion -> foreach .)
    PRINT           reduce using rule 12 (expresion -> foreach .)
    VAR_DUMP        reduce using rule 12 (expresion -> foreach .)
    PRINT_R         reduce using rule 12 (expresion -> foreach .)
    VAR_EXPORT      reduce using rule 12 (expresion -> foreach .)
    IF              reduce using rule 12 (expresion -> foreach .)
    WHILE           reduce using rule 12 (expresion -> foreach .)
    $end            reduce using rule 12 (expresion -> foreach .)
    RCURLY          reduce using rule 12 (expresion -> foreach .)
    ENDIF           reduce using rule 12 (expresion -> foreach .)
    ELSE            reduce using rule 12 (expresion -> foreach .)
    ELSEIF          reduce using rule 12 (expresion -> foreach .)
    ENDWHILE        reduce using rule 12 (expresion -> foreach .)


state 13

    (14) var_asignar -> VARIABLE . EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS funcion_declaracion_anonima
    (22) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (23) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON
    (115) funcion_declaracion -> VARIABLE . EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (126) funcion_ejecucion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> VARIABLE . LPAREN params RPAREN SEMICOLON
    (168) remove_set -> VARIABLE . SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> VARIABLE . SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (162) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    EQUALS          shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49
    SIMPLEARROW     shift and go to state 50


state 14

    (13) var_declarar -> VAR . var_asignar
    (116) funcion_declaracion -> VAR . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima

    VARIABLE        shift and go to state 52

    var_asignar                    shift and go to state 51

state 15

    (75) expresiones_de_salida -> echo .

    VARIABLE        reduce using rule 75 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 75 (expresiones_de_salida -> echo .)
    FUNCTION        reduce using rule 75 (expresiones_de_salida -> echo .)
    RETURN          reduce using rule 75 (expresiones_de_salida -> echo .)
    FUNCTION_NAME   reduce using rule 75 (expresiones_de_salida -> echo .)
    FOREACH         reduce using rule 75 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 75 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 75 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 75 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 75 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 75 (expresiones_de_salida -> echo .)
    IF              reduce using rule 75 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 75 (expresiones_de_salida -> echo .)
    $end            reduce using rule 75 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 75 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 75 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 75 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 75 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 75 (expresiones_de_salida -> echo .)


state 16

    (76) expresiones_de_salida -> print .

    VARIABLE        reduce using rule 76 (expresiones_de_salida -> print .)
    VAR             reduce using rule 76 (expresiones_de_salida -> print .)
    FUNCTION        reduce using rule 76 (expresiones_de_salida -> print .)
    RETURN          reduce using rule 76 (expresiones_de_salida -> print .)
    FUNCTION_NAME   reduce using rule 76 (expresiones_de_salida -> print .)
    FOREACH         reduce using rule 76 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 76 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 76 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 76 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 76 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 76 (expresiones_de_salida -> print .)
    IF              reduce using rule 76 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 76 (expresiones_de_salida -> print .)
    $end            reduce using rule 76 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 76 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 76 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 76 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 76 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 76 (expresiones_de_salida -> print .)


state 17

    (77) expresiones_de_salida -> vardump .

    VARIABLE        reduce using rule 77 (expresiones_de_salida -> vardump .)
    VAR             reduce using rule 77 (expresiones_de_salida -> vardump .)
    FUNCTION        reduce using rule 77 (expresiones_de_salida -> vardump .)
    RETURN          reduce using rule 77 (expresiones_de_salida -> vardump .)
    FUNCTION_NAME   reduce using rule 77 (expresiones_de_salida -> vardump .)
    FOREACH         reduce using rule 77 (expresiones_de_salida -> vardump .)
    ECHO            reduce using rule 77 (expresiones_de_salida -> vardump .)
    PRINT           reduce using rule 77 (expresiones_de_salida -> vardump .)
    VAR_DUMP        reduce using rule 77 (expresiones_de_salida -> vardump .)
    PRINT_R         reduce using rule 77 (expresiones_de_salida -> vardump .)
    VAR_EXPORT      reduce using rule 77 (expresiones_de_salida -> vardump .)
    IF              reduce using rule 77 (expresiones_de_salida -> vardump .)
    WHILE           reduce using rule 77 (expresiones_de_salida -> vardump .)
    $end            reduce using rule 77 (expresiones_de_salida -> vardump .)
    RCURLY          reduce using rule 77 (expresiones_de_salida -> vardump .)
    ENDIF           reduce using rule 77 (expresiones_de_salida -> vardump .)
    ELSE            reduce using rule 77 (expresiones_de_salida -> vardump .)
    ELSEIF          reduce using rule 77 (expresiones_de_salida -> vardump .)
    ENDWHILE        reduce using rule 77 (expresiones_de_salida -> vardump .)


state 18

    (78) expresiones_de_salida -> print_r .

    VARIABLE        reduce using rule 78 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 78 (expresiones_de_salida -> print_r .)
    FUNCTION        reduce using rule 78 (expresiones_de_salida -> print_r .)
    RETURN          reduce using rule 78 (expresiones_de_salida -> print_r .)
    FUNCTION_NAME   reduce using rule 78 (expresiones_de_salida -> print_r .)
    FOREACH         reduce using rule 78 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 78 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 78 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 78 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 78 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 78 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 78 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 78 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 78 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 78 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 78 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 78 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 78 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 78 (expresiones_de_salida -> print_r .)


state 19

    (79) expresiones_de_salida -> var_export .

    VARIABLE        reduce using rule 79 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 79 (expresiones_de_salida -> var_export .)
    FUNCTION        reduce using rule 79 (expresiones_de_salida -> var_export .)
    RETURN          reduce using rule 79 (expresiones_de_salida -> var_export .)
    FUNCTION_NAME   reduce using rule 79 (expresiones_de_salida -> var_export .)
    FOREACH         reduce using rule 79 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 79 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 79 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 79 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 79 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 79 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 79 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 79 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 79 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 79 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 79 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 79 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 79 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 79 (expresiones_de_salida -> var_export .)


state 20

    (89) estructuras_de_control -> if_structures .

    VARIABLE        reduce using rule 89 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 89 (estructuras_de_control -> if_structures .)
    FUNCTION        reduce using rule 89 (estructuras_de_control -> if_structures .)
    RETURN          reduce using rule 89 (estructuras_de_control -> if_structures .)
    FUNCTION_NAME   reduce using rule 89 (estructuras_de_control -> if_structures .)
    FOREACH         reduce using rule 89 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 89 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 89 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 89 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 89 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 89 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 89 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 89 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 89 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 89 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 89 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 89 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 89 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 89 (estructuras_de_control -> if_structures .)


state 21

    (90) estructuras_de_control -> estructuras_while .

    VARIABLE        reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    FUNCTION        reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    RETURN          reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    FUNCTION_NAME   reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    FOREACH         reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 90 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 90 (estructuras_de_control -> estructuras_while .)


state 22

    (152) funciones_datos_estructurados -> funciones_map .

    VARIABLE        reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    VAR             reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    FUNCTION        reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    RETURN          reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    FUNCTION_NAME   reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    FOREACH         reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    ECHO            reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    PRINT           reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    VAR_DUMP        reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    PRINT_R         reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    VAR_EXPORT      reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    IF              reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    WHILE           reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    $end            reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    RCURLY          reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    ENDIF           reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    ELSE            reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    ELSEIF          reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)
    ENDWHILE        reduce using rule 152 (funciones_datos_estructurados -> funciones_map .)


state 23

    (153) funciones_datos_estructurados -> funciones_set .

    VARIABLE        reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    VAR             reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    FUNCTION        reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    RETURN          reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    FUNCTION_NAME   reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    FOREACH         reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    ECHO            reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    PRINT           reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    VAR_DUMP        reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    PRINT_R         reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    VAR_EXPORT      reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    IF              reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    WHILE           reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    $end            reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    RCURLY          reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    ENDIF           reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    ELSE            reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    ELSEIF          reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)
    ENDWHILE        reduce using rule 153 (funciones_datos_estructurados -> funciones_set .)


state 24

    (154) funciones_datos_estructurados -> funciones_vector .

    VARIABLE        reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    VAR             reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    FUNCTION        reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    RETURN          reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    FUNCTION_NAME   reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    FOREACH         reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    ECHO            reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    PRINT           reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    VAR_DUMP        reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    PRINT_R         reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    VAR_EXPORT      reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    IF              reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    WHILE           reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    $end            reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    RCURLY          reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    ENDIF           reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    ELSE            reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    ELSEIF          reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)
    ENDWHILE        reduce using rule 154 (funciones_datos_estructurados -> funciones_vector .)


state 25

    (114) funcion_declaracion -> FUNCTION . funcion_cabecera_declaracion funciones_cuerpo
    (117) funcion_declaracion -> FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> FUNCTION . LPAREN RPAREN funciones_cuerpo
    (119) funcion_cabecera_declaracion -> . FUNCTION_NAME LPAREN variables_por_comma RPAREN
    (120) funcion_cabecera_declaracion -> . FUNCTION_NAME LPAREN RPAREN

    LPAREN          shift and go to state 54
    FUNCTION_NAME   shift and go to state 55

    funcion_cabecera_declaracion   shift and go to state 53

state 26

    (123) return -> RETURN . var_asignar_contenido SEMICOLON
    (16) var_asignar_contenido -> . VARIABLE
    (17) var_asignar_contenido -> . elemento_numerico
    (18) var_asignar_contenido -> . elemento_string
    (19) var_asignar_contenido -> . elemento_logico
    (20) var_asignar_contenido -> . datos_estructurados
    (21) var_asignar_contenido -> . funciones_ingreso_datos
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (132) datos_estructurados -> . map
    (133) datos_estructurados -> . vector
    (134) datos_estructurados -> . set
    (86) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (87) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (88) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (135) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> . NEW MAP LPAREN RPAREN
    (141) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (142) vector -> . NEW VECTOR LPAREN RPAREN
    (150) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (151) set -> . NEW SET LPAREN RPAREN

    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 56
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 27

    (124) funcion_ejecucion -> FUNCTION_NAME . LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> FUNCTION_NAME . LPAREN RPAREN funciones_cuerpo SEMICOLON

    LPAREN          shift and go to state 78


state 28

    (111) foreach -> FOREACH . LPAREN foreach_content RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 79


state 29

    (80) echo -> ECHO . params SEMICOLON
    (81) echo -> ECHO . params_points SEMICOLON
    (59) params -> . param
    (60) params -> . param COMMA params
    (61) params_points -> . param
    (62) params_points -> . param POINT params_points
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 80
    params_points                  shift and go to state 81
    param                          shift and go to state 82
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 30

    (82) print -> PRINT . param SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 87
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 31

    (84) vardump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON
    (157) key_map -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (161) find_vector -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 32

    (83) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 33

    (85) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 34

    (91) if_structures -> if .
    (92) if_structures -> if . else
    (93) if_structures -> if . else_if else
    (94) if_structures -> if . else_if
    (100) else -> . ELSE LCURLY expresiones RCURLY
    (101) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (102) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (103) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 91 (if_structures -> if .)
    VAR             reduce using rule 91 (if_structures -> if .)
    FUNCTION        reduce using rule 91 (if_structures -> if .)
    RETURN          reduce using rule 91 (if_structures -> if .)
    FUNCTION_NAME   reduce using rule 91 (if_structures -> if .)
    FOREACH         reduce using rule 91 (if_structures -> if .)
    ECHO            reduce using rule 91 (if_structures -> if .)
    PRINT           reduce using rule 91 (if_structures -> if .)
    VAR_DUMP        reduce using rule 91 (if_structures -> if .)
    PRINT_R         reduce using rule 91 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 91 (if_structures -> if .)
    IF              reduce using rule 91 (if_structures -> if .)
    WHILE           reduce using rule 91 (if_structures -> if .)
    $end            reduce using rule 91 (if_structures -> if .)
    RCURLY          reduce using rule 91 (if_structures -> if .)
    ENDIF           reduce using rule 91 (if_structures -> if .)
    ENDWHILE        reduce using rule 91 (if_structures -> if .)
    ELSE            shift and go to state 93
    ELSEIF          shift and go to state 94

  ! ELSE            [ reduce using rule 91 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 91 (if_structures -> if .) ]

    else                           shift and go to state 91
    else_if                        shift and go to state 92

state 35

    (95) if_structures -> if_r . ENDIF SEMICOLON
    (96) if_structures -> if_r . else_r ENDIF SEMICOLON
    (97) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (105) else_r -> . ELSE DOUBLEPOINT expresiones
    (106) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (107) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 95
    ELSE            shift and go to state 98
    ELSEIF          shift and go to state 99

    else_r                         shift and go to state 96
    elseif_r                       shift and go to state 97

state 36

    (108) estructuras_while -> while_p .

    VARIABLE        reduce using rule 108 (estructuras_while -> while_p .)
    VAR             reduce using rule 108 (estructuras_while -> while_p .)
    FUNCTION        reduce using rule 108 (estructuras_while -> while_p .)
    RETURN          reduce using rule 108 (estructuras_while -> while_p .)
    FUNCTION_NAME   reduce using rule 108 (estructuras_while -> while_p .)
    FOREACH         reduce using rule 108 (estructuras_while -> while_p .)
    ECHO            reduce using rule 108 (estructuras_while -> while_p .)
    PRINT           reduce using rule 108 (estructuras_while -> while_p .)
    VAR_DUMP        reduce using rule 108 (estructuras_while -> while_p .)
    PRINT_R         reduce using rule 108 (estructuras_while -> while_p .)
    VAR_EXPORT      reduce using rule 108 (estructuras_while -> while_p .)
    IF              reduce using rule 108 (estructuras_while -> while_p .)
    WHILE           reduce using rule 108 (estructuras_while -> while_p .)
    $end            reduce using rule 108 (estructuras_while -> while_p .)
    RCURLY          reduce using rule 108 (estructuras_while -> while_p .)
    ENDIF           reduce using rule 108 (estructuras_while -> while_p .)
    ELSE            reduce using rule 108 (estructuras_while -> while_p .)
    ELSEIF          reduce using rule 108 (estructuras_while -> while_p .)
    ENDWHILE        reduce using rule 108 (estructuras_while -> while_p .)


state 37

    (155) funciones_map -> key_map .

    VARIABLE        reduce using rule 155 (funciones_map -> key_map .)
    VAR             reduce using rule 155 (funciones_map -> key_map .)
    FUNCTION        reduce using rule 155 (funciones_map -> key_map .)
    RETURN          reduce using rule 155 (funciones_map -> key_map .)
    FUNCTION_NAME   reduce using rule 155 (funciones_map -> key_map .)
    FOREACH         reduce using rule 155 (funciones_map -> key_map .)
    ECHO            reduce using rule 155 (funciones_map -> key_map .)
    PRINT           reduce using rule 155 (funciones_map -> key_map .)
    VAR_DUMP        reduce using rule 155 (funciones_map -> key_map .)
    PRINT_R         reduce using rule 155 (funciones_map -> key_map .)
    VAR_EXPORT      reduce using rule 155 (funciones_map -> key_map .)
    IF              reduce using rule 155 (funciones_map -> key_map .)
    WHILE           reduce using rule 155 (funciones_map -> key_map .)
    $end            reduce using rule 155 (funciones_map -> key_map .)
    RCURLY          reduce using rule 155 (funciones_map -> key_map .)
    ENDIF           reduce using rule 155 (funciones_map -> key_map .)
    ELSE            reduce using rule 155 (funciones_map -> key_map .)
    ELSEIF          reduce using rule 155 (funciones_map -> key_map .)
    ENDWHILE        reduce using rule 155 (funciones_map -> key_map .)


state 38

    (156) funciones_map -> diff_map .

    VARIABLE        reduce using rule 156 (funciones_map -> diff_map .)
    VAR             reduce using rule 156 (funciones_map -> diff_map .)
    FUNCTION        reduce using rule 156 (funciones_map -> diff_map .)
    RETURN          reduce using rule 156 (funciones_map -> diff_map .)
    FUNCTION_NAME   reduce using rule 156 (funciones_map -> diff_map .)
    FOREACH         reduce using rule 156 (funciones_map -> diff_map .)
    ECHO            reduce using rule 156 (funciones_map -> diff_map .)
    PRINT           reduce using rule 156 (funciones_map -> diff_map .)
    VAR_DUMP        reduce using rule 156 (funciones_map -> diff_map .)
    PRINT_R         reduce using rule 156 (funciones_map -> diff_map .)
    VAR_EXPORT      reduce using rule 156 (funciones_map -> diff_map .)
    IF              reduce using rule 156 (funciones_map -> diff_map .)
    WHILE           reduce using rule 156 (funciones_map -> diff_map .)
    $end            reduce using rule 156 (funciones_map -> diff_map .)
    RCURLY          reduce using rule 156 (funciones_map -> diff_map .)
    ENDIF           reduce using rule 156 (funciones_map -> diff_map .)
    ELSE            reduce using rule 156 (funciones_map -> diff_map .)
    ELSEIF          reduce using rule 156 (funciones_map -> diff_map .)
    ENDWHILE        reduce using rule 156 (funciones_map -> diff_map .)


state 39

    (165) funciones_set -> union_set .

    VARIABLE        reduce using rule 165 (funciones_set -> union_set .)
    VAR             reduce using rule 165 (funciones_set -> union_set .)
    FUNCTION        reduce using rule 165 (funciones_set -> union_set .)
    RETURN          reduce using rule 165 (funciones_set -> union_set .)
    FUNCTION_NAME   reduce using rule 165 (funciones_set -> union_set .)
    FOREACH         reduce using rule 165 (funciones_set -> union_set .)
    ECHO            reduce using rule 165 (funciones_set -> union_set .)
    PRINT           reduce using rule 165 (funciones_set -> union_set .)
    VAR_DUMP        reduce using rule 165 (funciones_set -> union_set .)
    PRINT_R         reduce using rule 165 (funciones_set -> union_set .)
    VAR_EXPORT      reduce using rule 165 (funciones_set -> union_set .)
    IF              reduce using rule 165 (funciones_set -> union_set .)
    WHILE           reduce using rule 165 (funciones_set -> union_set .)
    $end            reduce using rule 165 (funciones_set -> union_set .)
    RCURLY          reduce using rule 165 (funciones_set -> union_set .)
    ENDIF           reduce using rule 165 (funciones_set -> union_set .)
    ELSE            reduce using rule 165 (funciones_set -> union_set .)
    ELSEIF          reduce using rule 165 (funciones_set -> union_set .)
    ENDWHILE        reduce using rule 165 (funciones_set -> union_set .)


state 40

    (166) funciones_set -> remove_set .

    VARIABLE        reduce using rule 166 (funciones_set -> remove_set .)
    VAR             reduce using rule 166 (funciones_set -> remove_set .)
    FUNCTION        reduce using rule 166 (funciones_set -> remove_set .)
    RETURN          reduce using rule 166 (funciones_set -> remove_set .)
    FUNCTION_NAME   reduce using rule 166 (funciones_set -> remove_set .)
    FOREACH         reduce using rule 166 (funciones_set -> remove_set .)
    ECHO            reduce using rule 166 (funciones_set -> remove_set .)
    PRINT           reduce using rule 166 (funciones_set -> remove_set .)
    VAR_DUMP        reduce using rule 166 (funciones_set -> remove_set .)
    PRINT_R         reduce using rule 166 (funciones_set -> remove_set .)
    VAR_EXPORT      reduce using rule 166 (funciones_set -> remove_set .)
    IF              reduce using rule 166 (funciones_set -> remove_set .)
    WHILE           reduce using rule 166 (funciones_set -> remove_set .)
    $end            reduce using rule 166 (funciones_set -> remove_set .)
    RCURLY          reduce using rule 166 (funciones_set -> remove_set .)
    ENDIF           reduce using rule 166 (funciones_set -> remove_set .)
    ELSE            reduce using rule 166 (funciones_set -> remove_set .)
    ELSEIF          reduce using rule 166 (funciones_set -> remove_set .)
    ENDWHILE        reduce using rule 166 (funciones_set -> remove_set .)


state 41

    (159) funciones_vector -> find_vector .

    VARIABLE        reduce using rule 159 (funciones_vector -> find_vector .)
    VAR             reduce using rule 159 (funciones_vector -> find_vector .)
    FUNCTION        reduce using rule 159 (funciones_vector -> find_vector .)
    RETURN          reduce using rule 159 (funciones_vector -> find_vector .)
    FUNCTION_NAME   reduce using rule 159 (funciones_vector -> find_vector .)
    FOREACH         reduce using rule 159 (funciones_vector -> find_vector .)
    ECHO            reduce using rule 159 (funciones_vector -> find_vector .)
    PRINT           reduce using rule 159 (funciones_vector -> find_vector .)
    VAR_DUMP        reduce using rule 159 (funciones_vector -> find_vector .)
    PRINT_R         reduce using rule 159 (funciones_vector -> find_vector .)
    VAR_EXPORT      reduce using rule 159 (funciones_vector -> find_vector .)
    IF              reduce using rule 159 (funciones_vector -> find_vector .)
    WHILE           reduce using rule 159 (funciones_vector -> find_vector .)
    $end            reduce using rule 159 (funciones_vector -> find_vector .)
    RCURLY          reduce using rule 159 (funciones_vector -> find_vector .)
    ENDIF           reduce using rule 159 (funciones_vector -> find_vector .)
    ELSE            reduce using rule 159 (funciones_vector -> find_vector .)
    ELSEIF          reduce using rule 159 (funciones_vector -> find_vector .)
    ENDWHILE        reduce using rule 159 (funciones_vector -> find_vector .)


state 42

    (160) funciones_vector -> push_vector .

    VARIABLE        reduce using rule 160 (funciones_vector -> push_vector .)
    VAR             reduce using rule 160 (funciones_vector -> push_vector .)
    FUNCTION        reduce using rule 160 (funciones_vector -> push_vector .)
    RETURN          reduce using rule 160 (funciones_vector -> push_vector .)
    FUNCTION_NAME   reduce using rule 160 (funciones_vector -> push_vector .)
    FOREACH         reduce using rule 160 (funciones_vector -> push_vector .)
    ECHO            reduce using rule 160 (funciones_vector -> push_vector .)
    PRINT           reduce using rule 160 (funciones_vector -> push_vector .)
    VAR_DUMP        reduce using rule 160 (funciones_vector -> push_vector .)
    PRINT_R         reduce using rule 160 (funciones_vector -> push_vector .)
    VAR_EXPORT      reduce using rule 160 (funciones_vector -> push_vector .)
    IF              reduce using rule 160 (funciones_vector -> push_vector .)
    WHILE           reduce using rule 160 (funciones_vector -> push_vector .)
    $end            reduce using rule 160 (funciones_vector -> push_vector .)
    RCURLY          reduce using rule 160 (funciones_vector -> push_vector .)
    ENDIF           reduce using rule 160 (funciones_vector -> push_vector .)
    ELSE            reduce using rule 160 (funciones_vector -> push_vector .)
    ELSEIF          reduce using rule 160 (funciones_vector -> push_vector .)
    ENDWHILE        reduce using rule 160 (funciones_vector -> push_vector .)


state 43

    (99) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 100


state 44

    (109) while_p -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 101


state 45

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 46

    (14) var_asignar -> VARIABLE EQUALS . var_asignar_contenido SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . funcion_declaracion_anonima
    (115) funcion_declaracion -> VARIABLE EQUALS . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (16) var_asignar_contenido -> . VARIABLE
    (17) var_asignar_contenido -> . elemento_numerico
    (18) var_asignar_contenido -> . elemento_string
    (19) var_asignar_contenido -> . elemento_logico
    (20) var_asignar_contenido -> . datos_estructurados
    (21) var_asignar_contenido -> . funciones_ingreso_datos
    (128) funcion_declaracion_anonima -> . FUNCTION LPAREN params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (132) datos_estructurados -> . map
    (133) datos_estructurados -> . vector
    (134) datos_estructurados -> . set
    (86) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (87) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (88) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (135) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> . NEW MAP LPAREN RPAREN
    (141) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (142) vector -> . NEW VECTOR LPAREN RPAREN
    (150) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (151) set -> . NEW SET LPAREN RPAREN

    FUNCTION        shift and go to state 104
    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 102
    funcion_declaracion_anonima    shift and go to state 103
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 47

    (22) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 105


state 48

    (23) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 106


state 49

    (126) funcion_ejecucion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (127) funcion_ejecucion -> VARIABLE LPAREN . params RPAREN SEMICOLON
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 107
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 108
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 50

    (168) remove_set -> VARIABLE SIMPLEARROW . REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> VARIABLE SIMPLEARROW . REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (162) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    REMOVE          shift and go to state 110
    PUSH            shift and go to state 111


state 51

    (13) var_declarar -> VAR var_asignar .

    VARIABLE        reduce using rule 13 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 13 (var_declarar -> VAR var_asignar .)
    FUNCTION        reduce using rule 13 (var_declarar -> VAR var_asignar .)
    RETURN          reduce using rule 13 (var_declarar -> VAR var_asignar .)
    FUNCTION_NAME   reduce using rule 13 (var_declarar -> VAR var_asignar .)
    FOREACH         reduce using rule 13 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 13 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 13 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 13 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 13 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 13 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 13 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 13 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 13 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 13 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 13 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 13 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 13 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 13 (var_declarar -> VAR var_asignar .)


state 52

    (116) funcion_declaracion -> VAR VARIABLE . EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (14) var_asignar -> VARIABLE . EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS funcion_declaracion_anonima

    EQUALS          shift and go to state 112


state 53

    (114) funcion_declaracion -> FUNCTION funcion_cabecera_declaracion . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 113

state 54

    (117) funcion_declaracion -> FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (130) variables_por_comma -> . VARIABLE
    (131) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    RPAREN          shift and go to state 116
    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 115

state 55

    (119) funcion_cabecera_declaracion -> FUNCTION_NAME . LPAREN variables_por_comma RPAREN
    (120) funcion_cabecera_declaracion -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 118


state 56

    (123) return -> RETURN var_asignar_contenido . SEMICOLON

    SEMICOLON       shift and go to state 119


state 57

    (16) var_asignar_contenido -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (36) elemento_string -> VARIABLE .
    (40) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (var_asignar_contenido -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (var_asignar_contenido -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (var_asignar_contenido -> VARIABLE .)
    SEMICOLON       reduce using rule 16 (var_asignar_contenido -> VARIABLE .)
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 28 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]


state 58

    (17) var_asignar_contenido -> elemento_numerico .
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (41) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 17 (var_asignar_contenido -> elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 59

    (18) var_asignar_contenido -> elemento_string .
    (42) elemento_logico -> elemento_string . comparador elemento_string
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 18 (var_asignar_contenido -> elemento_string .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 60

    (19) var_asignar_contenido -> elemento_logico .
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 19 (var_asignar_contenido -> elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 61

    (20) var_asignar_contenido -> datos_estructurados .

    SEMICOLON       reduce using rule 20 (var_asignar_contenido -> datos_estructurados .)


state 62

    (21) var_asignar_contenido -> funciones_ingreso_datos .

    SEMICOLON       reduce using rule 21 (var_asignar_contenido -> funciones_ingreso_datos .)


state 63

    (25) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 25 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 25 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 25 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 25 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 25 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 25 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 25 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 25 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 25 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 25 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 25 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 25 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 25 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 25 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 25 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 25 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 25 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 25 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 25 (elemento_numerico -> FLOAT .)
    RBRACKET        reduce using rule 25 (elemento_numerico -> FLOAT .)


state 64

    (26) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 26 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 26 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 26 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 26 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 26 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 26 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 26 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 26 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 26 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 26 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 26 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 26 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 26 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 26 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 26 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 26 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 26 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 26 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 26 (elemento_numerico -> NUMBER .)
    RBRACKET        reduce using rule 26 (elemento_numerico -> NUMBER .)


state 65

    (27) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 139

state 66

    (34) elemento_string -> STRING .

    IDENTICAL       reduce using rule 34 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 34 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 34 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 34 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 34 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 34 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 34 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 34 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 34 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 34 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 34 (elemento_string -> STRING .)
    COMMA           reduce using rule 34 (elemento_string -> STRING .)
    POINT           reduce using rule 34 (elemento_string -> STRING .)
    RPAREN          reduce using rule 34 (elemento_string -> STRING .)
    RBRACKET        reduce using rule 34 (elemento_string -> STRING .)
    ARROW           reduce using rule 34 (elemento_string -> STRING .)


state 67

    (35) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 35 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 35 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 35 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 35 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 35 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 35 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 35 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 35 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 35 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 35 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 35 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 35 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 35 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 35 (elemento_string -> STRINGCC .)
    RBRACKET        reduce using rule 35 (elemento_string -> STRINGCC .)
    ARROW           reduce using rule 35 (elemento_string -> STRINGCC .)


state 68

    (37) elemento_logico -> elemento_logico_pri .

    IDENTICAL       reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    NOTIDENTICAL    reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    EQUALSLOGICAL   reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    DIFFERENT       reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    GREATEREQUAL    reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    LESSEQUAL       reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    GREATERTHAN     reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    LESSTHAN        reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    ANDlOGICAL      reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    ORLOGICAL       reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    SEMICOLON       reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    COMMA           reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    POINT           reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    RPAREN          reduce using rule 37 (elemento_logico -> elemento_logico_pri .)
    RBRACKET        reduce using rule 37 (elemento_logico -> elemento_logico_pri .)


state 69

    (39) elemento_logico -> NOTLOGICAL . elemento_logico
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 141
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 70

    (132) datos_estructurados -> map .

    SEMICOLON       reduce using rule 132 (datos_estructurados -> map .)


state 71

    (133) datos_estructurados -> vector .

    SEMICOLON       reduce using rule 133 (datos_estructurados -> vector .)


state 72

    (134) datos_estructurados -> set .

    SEMICOLON       reduce using rule 134 (datos_estructurados -> set .)


state 73

    (86) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 145


state 74

    (87) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (88) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 146


state 75

    (43) elemento_logico_pri -> TRUE .

    IDENTICAL       reduce using rule 43 (elemento_logico_pri -> TRUE .)
    NOTIDENTICAL    reduce using rule 43 (elemento_logico_pri -> TRUE .)
    EQUALSLOGICAL   reduce using rule 43 (elemento_logico_pri -> TRUE .)
    DIFFERENT       reduce using rule 43 (elemento_logico_pri -> TRUE .)
    GREATEREQUAL    reduce using rule 43 (elemento_logico_pri -> TRUE .)
    LESSEQUAL       reduce using rule 43 (elemento_logico_pri -> TRUE .)
    GREATERTHAN     reduce using rule 43 (elemento_logico_pri -> TRUE .)
    LESSTHAN        reduce using rule 43 (elemento_logico_pri -> TRUE .)
    ANDlOGICAL      reduce using rule 43 (elemento_logico_pri -> TRUE .)
    ORLOGICAL       reduce using rule 43 (elemento_logico_pri -> TRUE .)
    SEMICOLON       reduce using rule 43 (elemento_logico_pri -> TRUE .)
    COMMA           reduce using rule 43 (elemento_logico_pri -> TRUE .)
    POINT           reduce using rule 43 (elemento_logico_pri -> TRUE .)
    RPAREN          reduce using rule 43 (elemento_logico_pri -> TRUE .)
    RBRACKET        reduce using rule 43 (elemento_logico_pri -> TRUE .)


state 76

    (44) elemento_logico_pri -> FALSE .

    IDENTICAL       reduce using rule 44 (elemento_logico_pri -> FALSE .)
    NOTIDENTICAL    reduce using rule 44 (elemento_logico_pri -> FALSE .)
    EQUALSLOGICAL   reduce using rule 44 (elemento_logico_pri -> FALSE .)
    DIFFERENT       reduce using rule 44 (elemento_logico_pri -> FALSE .)
    GREATEREQUAL    reduce using rule 44 (elemento_logico_pri -> FALSE .)
    LESSEQUAL       reduce using rule 44 (elemento_logico_pri -> FALSE .)
    GREATERTHAN     reduce using rule 44 (elemento_logico_pri -> FALSE .)
    LESSTHAN        reduce using rule 44 (elemento_logico_pri -> FALSE .)
    ANDlOGICAL      reduce using rule 44 (elemento_logico_pri -> FALSE .)
    ORLOGICAL       reduce using rule 44 (elemento_logico_pri -> FALSE .)
    SEMICOLON       reduce using rule 44 (elemento_logico_pri -> FALSE .)
    COMMA           reduce using rule 44 (elemento_logico_pri -> FALSE .)
    POINT           reduce using rule 44 (elemento_logico_pri -> FALSE .)
    RPAREN          reduce using rule 44 (elemento_logico_pri -> FALSE .)
    RBRACKET        reduce using rule 44 (elemento_logico_pri -> FALSE .)


state 77

    (135) map -> NEW . MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> NEW . MAP LPAREN RPAREN
    (141) vector -> NEW . VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (142) vector -> NEW . VECTOR LPAREN RPAREN
    (150) set -> NEW . SET LPAREN LBRACKET params RBRACKET RPAREN
    (151) set -> NEW . SET LPAREN RPAREN

    MAP             shift and go to state 147
    VECTOR          shift and go to state 148
    SET             shift and go to state 149


state 78

    (124) funcion_ejecucion -> FUNCTION_NAME LPAREN . params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> FUNCTION_NAME LPAREN . RPAREN funciones_cuerpo SEMICOLON
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 151
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 150
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 79

    (111) foreach -> FOREACH LPAREN . foreach_content RPAREN LCURLY expresiones RCURLY
    (112) foreach_content -> . VARIABLE AS VARIABLE
    (113) foreach_content -> . VARIABLE AS VARIABLE ARROW VARIABLE

    VARIABLE        shift and go to state 153

    foreach_content                shift and go to state 152

state 80

    (80) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 154


state 81

    (81) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 155


state 82

    (59) params -> param .
    (60) params -> param . COMMA params
    (61) params_points -> param .
    (62) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (params -> param .)
    SEMICOLON       reduce using rule 59 (params -> param .)
    COMMA           shift and go to state 156
    POINT           shift and go to state 157

  ! SEMICOLON       [ reduce using rule 61 (params_points -> param .) ]


state 83

    (55) param -> VARIABLE .
    (36) elemento_string -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (40) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 28 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RBRACKET        reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 55 (param -> VARIABLE .) ]
  ! POINT           [ reduce using rule 55 (param -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 55 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 55 (param -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 55 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]


state 84

    (56) param -> elemento_string .
    (42) elemento_logico -> elemento_string . comparador elemento_string
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    COMMA           reduce using rule 56 (param -> elemento_string .)
    POINT           reduce using rule 56 (param -> elemento_string .)
    SEMICOLON       reduce using rule 56 (param -> elemento_string .)
    RPAREN          reduce using rule 56 (param -> elemento_string .)
    RBRACKET        reduce using rule 56 (param -> elemento_string .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 85

    (57) param -> elemento_numerico .
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (41) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    COMMA           reduce using rule 57 (param -> elemento_numerico .)
    POINT           reduce using rule 57 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 57 (param -> elemento_numerico .)
    RPAREN          reduce using rule 57 (param -> elemento_numerico .)
    RBRACKET        reduce using rule 57 (param -> elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 86

    (58) param -> elemento_logico .
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    COMMA           reduce using rule 58 (param -> elemento_logico .)
    POINT           reduce using rule 58 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 58 (param -> elemento_logico .)
    RPAREN          reduce using rule 58 (param -> elemento_logico .)
    RBRACKET        reduce using rule 58 (param -> elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 87

    (82) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 158


state 88

    (84) vardump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (157) key_map -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (161) find_vector -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 160
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 159
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 89

    (83) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 161
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 90

    (85) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 162
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 91

    (92) if_structures -> if else .

    VARIABLE        reduce using rule 92 (if_structures -> if else .)
    VAR             reduce using rule 92 (if_structures -> if else .)
    FUNCTION        reduce using rule 92 (if_structures -> if else .)
    RETURN          reduce using rule 92 (if_structures -> if else .)
    FUNCTION_NAME   reduce using rule 92 (if_structures -> if else .)
    FOREACH         reduce using rule 92 (if_structures -> if else .)
    ECHO            reduce using rule 92 (if_structures -> if else .)
    PRINT           reduce using rule 92 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 92 (if_structures -> if else .)
    PRINT_R         reduce using rule 92 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 92 (if_structures -> if else .)
    IF              reduce using rule 92 (if_structures -> if else .)
    WHILE           reduce using rule 92 (if_structures -> if else .)
    $end            reduce using rule 92 (if_structures -> if else .)
    RCURLY          reduce using rule 92 (if_structures -> if else .)
    ENDIF           reduce using rule 92 (if_structures -> if else .)
    ELSE            reduce using rule 92 (if_structures -> if else .)
    ELSEIF          reduce using rule 92 (if_structures -> if else .)
    ENDWHILE        reduce using rule 92 (if_structures -> if else .)


state 92

    (93) if_structures -> if else_if . else
    (94) if_structures -> if else_if .
    (103) else_if -> else_if . else_if
    (100) else -> . ELSE LCURLY expresiones RCURLY
    (101) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (102) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (103) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 94 (if_structures -> if else_if .)
    VAR             reduce using rule 94 (if_structures -> if else_if .)
    FUNCTION        reduce using rule 94 (if_structures -> if else_if .)
    RETURN          reduce using rule 94 (if_structures -> if else_if .)
    FUNCTION_NAME   reduce using rule 94 (if_structures -> if else_if .)
    FOREACH         reduce using rule 94 (if_structures -> if else_if .)
    ECHO            reduce using rule 94 (if_structures -> if else_if .)
    PRINT           reduce using rule 94 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 94 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 94 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 94 (if_structures -> if else_if .)
    IF              reduce using rule 94 (if_structures -> if else_if .)
    WHILE           reduce using rule 94 (if_structures -> if else_if .)
    $end            reduce using rule 94 (if_structures -> if else_if .)
    RCURLY          reduce using rule 94 (if_structures -> if else_if .)
    ENDIF           reduce using rule 94 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 94 (if_structures -> if else_if .)
    ELSE            shift and go to state 93
    ELSEIF          shift and go to state 94

  ! ELSE            [ reduce using rule 94 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 94 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 163
    else                           shift and go to state 164

state 93

    (100) else -> ELSE . LCURLY expresiones RCURLY
    (102) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 165
    IF              shift and go to state 166


state 94

    (101) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 167


state 95

    (95) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 168


state 96

    (96) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 169


state 97

    (97) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (98) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (107) elseif_r -> elseif_r . elseif_r
    (105) else_r -> . ELSE DOUBLEPOINT expresiones
    (106) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (107) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 172
    ELSE            shift and go to state 98
    ELSEIF          shift and go to state 99

    elseif_r                       shift and go to state 170
    else_r                         shift and go to state 171

state 98

    (105) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 173


state 99

    (106) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 174


state 100

    (99) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 175
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 101

    (109) while_p -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 176
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 102

    (14) var_asignar -> VARIABLE EQUALS var_asignar_contenido . SEMICOLON

    SEMICOLON       shift and go to state 177


state 103

    (15) var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .

    VARIABLE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR             reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FUNCTION        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    RETURN          reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FUNCTION_NAME   reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FOREACH         reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ECHO            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    PRINT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR_DUMP        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    PRINT_R         reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR_EXPORT      reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    IF              reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    WHILE           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    $end            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    RCURLY          reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ENDIF           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ELSE            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ELSEIF          reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ENDWHILE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)


state 104

    (115) funcion_declaracion -> VARIABLE EQUALS FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (128) funcion_declaracion_anonima -> FUNCTION . LPAREN params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> FUNCTION . LPAREN RPAREN funciones_cuerpo

    LPAREN          shift and go to state 178


state 105

    (22) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 179


state 106

    (23) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 180


state 107

    (126) funcion_ejecucion -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 108

    (127) funcion_ejecucion -> VARIABLE LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 109

    (59) params -> param .
    (60) params -> param . COMMA params

    RPAREN          reduce using rule 59 (params -> param .)
    SEMICOLON       reduce using rule 59 (params -> param .)
    RBRACKET        reduce using rule 59 (params -> param .)
    COMMA           shift and go to state 156


state 110

    (168) remove_set -> VARIABLE SIMPLEARROW REMOVE . LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE . LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 183


state 111

    (162) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN param RPAREN SEMICOLON
    (163) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN params RPAREN SEMICOLON
    (164) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 184


state 112

    (116) funcion_declaracion -> VAR VARIABLE EQUALS . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (14) var_asignar -> VARIABLE EQUALS . var_asignar_contenido SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . funcion_declaracion_anonima
    (16) var_asignar_contenido -> . VARIABLE
    (17) var_asignar_contenido -> . elemento_numerico
    (18) var_asignar_contenido -> . elemento_string
    (19) var_asignar_contenido -> . elemento_logico
    (20) var_asignar_contenido -> . datos_estructurados
    (21) var_asignar_contenido -> . funciones_ingreso_datos
    (128) funcion_declaracion_anonima -> . FUNCTION LPAREN params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (132) datos_estructurados -> . map
    (133) datos_estructurados -> . vector
    (134) datos_estructurados -> . set
    (86) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (87) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (88) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (135) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> . NEW MAP LPAREN RPAREN
    (141) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (142) vector -> . NEW VECTOR LPAREN RPAREN
    (150) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (151) set -> . NEW SET LPAREN RPAREN

    FUNCTION        shift and go to state 185
    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 102
    funcion_declaracion_anonima    shift and go to state 103
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 113

    (114) funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .

    VARIABLE        reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR             reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FUNCTION        reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    RETURN          reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FOREACH         reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ECHO            reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    PRINT           reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR_DUMP        reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    PRINT_R         reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    IF              reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    WHILE           reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    $end            reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    RCURLY          reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ENDIF           reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ELSE            reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ELSEIF          reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ENDWHILE        reduce using rule 114 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)


state 114

    (121) funciones_cuerpo -> LCURLY . expresiones RCURLY
    (122) funciones_cuerpo -> LCURLY . RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    RCURLY          shift and go to state 187
    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 186
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 115

    (117) funcion_declaracion -> FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 188


state 116

    (118) funcion_declaracion -> FUNCTION LPAREN RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 189

state 117

    (130) variables_por_comma -> VARIABLE .
    (131) variables_por_comma -> VARIABLE . COMMA variables_por_comma

    RPAREN          reduce using rule 130 (variables_por_comma -> VARIABLE .)
    COMMA           shift and go to state 190


state 118

    (119) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN . variables_por_comma RPAREN
    (120) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN . RPAREN
    (130) variables_por_comma -> . VARIABLE
    (131) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    RPAREN          shift and go to state 192
    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 191

state 119

    (123) return -> RETURN var_asignar_contenido SEMICOLON .

    VARIABLE        reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR             reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FUNCTION        reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    RETURN          reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FUNCTION_NAME   reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FOREACH         reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ECHO            reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    PRINT           reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR_DUMP        reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    PRINT_R         reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR_EXPORT      reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    IF              reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    WHILE           reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    $end            reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    RCURLY          reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ENDIF           reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ELSE            reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ELSEIF          reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ENDWHILE        reduce using rule 123 (return -> RETURN var_asignar_contenido SEMICOLON .)


state 120

    (24) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 193

state 121

    (41) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 194

state 122

    (29) operador -> PLUS .

    FLOAT           reduce using rule 29 (operador -> PLUS .)
    NUMBER          reduce using rule 29 (operador -> PLUS .)
    LPAREN          reduce using rule 29 (operador -> PLUS .)
    VARIABLE        reduce using rule 29 (operador -> PLUS .)


state 123

    (30) operador -> MINUS .

    FLOAT           reduce using rule 30 (operador -> MINUS .)
    NUMBER          reduce using rule 30 (operador -> MINUS .)
    LPAREN          reduce using rule 30 (operador -> MINUS .)
    VARIABLE        reduce using rule 30 (operador -> MINUS .)


state 124

    (31) operador -> DIVIDE .

    FLOAT           reduce using rule 31 (operador -> DIVIDE .)
    NUMBER          reduce using rule 31 (operador -> DIVIDE .)
    LPAREN          reduce using rule 31 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 31 (operador -> DIVIDE .)


state 125

    (32) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 32 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 32 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 32 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 32 (operador -> EXPONENTIAL .)


state 126

    (33) operador -> TIMES .

    FLOAT           reduce using rule 33 (operador -> TIMES .)
    NUMBER          reduce using rule 33 (operador -> TIMES .)
    LPAREN          reduce using rule 33 (operador -> TIMES .)
    VARIABLE        reduce using rule 33 (operador -> TIMES .)


state 127

    (45) comparador -> IDENTICAL .

    FLOAT           reduce using rule 45 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 45 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 45 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 45 (comparador -> IDENTICAL .)
    STRING          reduce using rule 45 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 45 (comparador -> IDENTICAL .)
    NOTLOGICAL      reduce using rule 45 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 45 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 45 (comparador -> IDENTICAL .)


state 128

    (46) comparador -> NOTIDENTICAL .

    FLOAT           reduce using rule 46 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 46 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 46 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 46 (comparador -> NOTIDENTICAL .)
    STRING          reduce using rule 46 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 46 (comparador -> NOTIDENTICAL .)
    NOTLOGICAL      reduce using rule 46 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 46 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 46 (comparador -> NOTIDENTICAL .)


state 129

    (47) comparador -> EQUALSLOGICAL .

    FLOAT           reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    STRING          reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    NOTLOGICAL      reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 47 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 47 (comparador -> EQUALSLOGICAL .)


state 130

    (48) comparador -> DIFFERENT .

    FLOAT           reduce using rule 48 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 48 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 48 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 48 (comparador -> DIFFERENT .)
    STRING          reduce using rule 48 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 48 (comparador -> DIFFERENT .)
    NOTLOGICAL      reduce using rule 48 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 48 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 48 (comparador -> DIFFERENT .)


state 131

    (49) comparador -> GREATEREQUAL .

    FLOAT           reduce using rule 49 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 49 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 49 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 49 (comparador -> GREATEREQUAL .)
    STRING          reduce using rule 49 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 49 (comparador -> GREATEREQUAL .)
    NOTLOGICAL      reduce using rule 49 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 49 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 49 (comparador -> GREATEREQUAL .)


state 132

    (50) comparador -> LESSEQUAL .

    FLOAT           reduce using rule 50 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 50 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 50 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 50 (comparador -> LESSEQUAL .)
    STRING          reduce using rule 50 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 50 (comparador -> LESSEQUAL .)
    NOTLOGICAL      reduce using rule 50 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 50 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 50 (comparador -> LESSEQUAL .)


state 133

    (51) comparador -> GREATERTHAN .

    FLOAT           reduce using rule 51 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 51 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 51 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 51 (comparador -> GREATERTHAN .)
    STRING          reduce using rule 51 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 51 (comparador -> GREATERTHAN .)
    NOTLOGICAL      reduce using rule 51 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 51 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 51 (comparador -> GREATERTHAN .)


state 134

    (52) comparador -> LESSTHAN .

    FLOAT           reduce using rule 52 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 52 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 52 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 52 (comparador -> LESSTHAN .)
    STRING          reduce using rule 52 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 52 (comparador -> LESSTHAN .)
    NOTLOGICAL      reduce using rule 52 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 52 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 52 (comparador -> LESSTHAN .)


state 135

    (53) comparador -> ANDlOGICAL .

    FLOAT           reduce using rule 53 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 53 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 53 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 53 (comparador -> ANDlOGICAL .)
    STRING          reduce using rule 53 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 53 (comparador -> ANDlOGICAL .)
    NOTLOGICAL      reduce using rule 53 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 53 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 53 (comparador -> ANDlOGICAL .)


state 136

    (54) comparador -> ORLOGICAL .

    FLOAT           reduce using rule 54 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 54 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 54 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 54 (comparador -> ORLOGICAL .)
    STRING          reduce using rule 54 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 54 (comparador -> ORLOGICAL .)
    NOTLOGICAL      reduce using rule 54 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 54 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 54 (comparador -> ORLOGICAL .)


state 137

    (42) elemento_logico -> elemento_string comparador . elemento_string
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 196

    elemento_string                shift and go to state 195

state 138

    (38) elemento_logico -> elemento_logico comparador . elemento_logico
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 197
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 139

    (27) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES

    RPAREN          shift and go to state 198
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 140

    (28) elemento_numerico -> VARIABLE .

    RPAREN          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RBRACKET        reduce using rule 28 (elemento_numerico -> VARIABLE .)


state 141

    (39) elemento_logico -> NOTLOGICAL elemento_logico .
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    SEMICOLON       reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .)
    COMMA           reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .)
    POINT           reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RPAREN          reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RBRACKET        reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

  ! IDENTICAL       [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 39 (elemento_logico -> NOTLOGICAL elemento_logico .) ]

    comparador                     shift and go to state 138

state 142

    (40) elemento_logico -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (36) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 40 (elemento_logico -> VARIABLE .)
    COMMA           reduce using rule 40 (elemento_logico -> VARIABLE .)
    POINT           reduce using rule 40 (elemento_logico -> VARIABLE .)
    RPAREN          reduce using rule 40 (elemento_logico -> VARIABLE .)
    RBRACKET        reduce using rule 40 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]


state 143

    (41) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES

    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    comparador                     shift and go to state 121
    operador                       shift and go to state 120

state 144

    (42) elemento_logico -> elemento_string . comparador elemento_string
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 145

    (86) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 199
    elemento_logico                shift and go to state 86
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico_pri            shift and go to state 68

state 146

    (87) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (88) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 200
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 196

    elemento_string                shift and go to state 201

state 147

    (135) map -> NEW MAP . LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> NEW MAP . LPAREN RPAREN

    LPAREN          shift and go to state 202


state 148

    (141) vector -> NEW VECTOR . LPAREN LBRACKET params RBRACKET RPAREN
    (142) vector -> NEW VECTOR . LPAREN RPAREN

    LPAREN          shift and go to state 203


state 149

    (150) set -> NEW SET . LPAREN LBRACKET params RBRACKET RPAREN
    (151) set -> NEW SET . LPAREN RPAREN

    LPAREN          shift and go to state 204


state 150

    (124) funcion_ejecucion -> FUNCTION_NAME LPAREN params . RPAREN funciones_cuerpo SEMICOLON

    RPAREN          shift and go to state 205


state 151

    (125) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN . funciones_cuerpo SEMICOLON
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 206

state 152

    (111) foreach -> FOREACH LPAREN foreach_content . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 207


state 153

    (112) foreach_content -> VARIABLE . AS VARIABLE
    (113) foreach_content -> VARIABLE . AS VARIABLE ARROW VARIABLE

    AS              shift and go to state 208


state 154

    (80) echo -> ECHO params SEMICOLON .

    VARIABLE        reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    FUNCTION        reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    RETURN          reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    FUNCTION_NAME   reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    FOREACH         reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 80 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 80 (echo -> ECHO params SEMICOLON .)


state 155

    (81) echo -> ECHO params_points SEMICOLON .

    VARIABLE        reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    FUNCTION        reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    RETURN          reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    FUNCTION_NAME   reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    FOREACH         reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 81 (echo -> ECHO params_points SEMICOLON .)


state 156

    (60) params -> param COMMA . params
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 109
    params                         shift and go to state 209
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 157

    (62) params_points -> param POINT . params_points
    (61) params_points -> . param
    (62) params_points -> . param POINT params_points
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 210
    params_points                  shift and go to state 211
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 158

    (82) print -> PRINT param SEMICOLON .

    VARIABLE        reduce using rule 82 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 82 (print -> PRINT param SEMICOLON .)
    FUNCTION        reduce using rule 82 (print -> PRINT param SEMICOLON .)
    RETURN          reduce using rule 82 (print -> PRINT param SEMICOLON .)
    FUNCTION_NAME   reduce using rule 82 (print -> PRINT param SEMICOLON .)
    FOREACH         reduce using rule 82 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 82 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 82 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 82 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 82 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 82 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 82 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 82 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 82 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 82 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 82 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 82 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 82 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 82 (print -> PRINT param SEMICOLON .)


state 159

    (84) vardump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 212


state 160

    (157) key_map -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (161) find_vector -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (55) param -> VARIABLE .
    (36) elemento_string -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (40) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
    SIMPLEARROW     shift and go to state 213
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! RPAREN          [ reduce using rule 55 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]


state 161

    (83) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 214


state 162

    (85) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 215


state 163

    (103) else_if -> else_if else_if .
    (103) else_if -> else_if . else_if
    (101) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (102) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (103) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    VARIABLE        reduce using rule 103 (else_if -> else_if else_if .)
    VAR             reduce using rule 103 (else_if -> else_if else_if .)
    FUNCTION        reduce using rule 103 (else_if -> else_if else_if .)
    RETURN          reduce using rule 103 (else_if -> else_if else_if .)
    FUNCTION_NAME   reduce using rule 103 (else_if -> else_if else_if .)
    FOREACH         reduce using rule 103 (else_if -> else_if else_if .)
    ECHO            reduce using rule 103 (else_if -> else_if else_if .)
    PRINT           reduce using rule 103 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 103 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 103 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 103 (else_if -> else_if else_if .)
    IF              reduce using rule 103 (else_if -> else_if else_if .)
    WHILE           reduce using rule 103 (else_if -> else_if else_if .)
    $end            reduce using rule 103 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 103 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 103 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 103 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 94
    ELSE            shift and go to state 216

  ! ELSE            [ reduce using rule 103 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 103 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 163

state 164

    (93) if_structures -> if else_if else .

    VARIABLE        reduce using rule 93 (if_structures -> if else_if else .)
    VAR             reduce using rule 93 (if_structures -> if else_if else .)
    FUNCTION        reduce using rule 93 (if_structures -> if else_if else .)
    RETURN          reduce using rule 93 (if_structures -> if else_if else .)
    FUNCTION_NAME   reduce using rule 93 (if_structures -> if else_if else .)
    FOREACH         reduce using rule 93 (if_structures -> if else_if else .)
    ECHO            reduce using rule 93 (if_structures -> if else_if else .)
    PRINT           reduce using rule 93 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 93 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 93 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 93 (if_structures -> if else_if else .)
    IF              reduce using rule 93 (if_structures -> if else_if else .)
    WHILE           reduce using rule 93 (if_structures -> if else_if else .)
    $end            reduce using rule 93 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 93 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 93 (if_structures -> if else_if else .)
    ELSE            reduce using rule 93 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 93 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 93 (if_structures -> if else_if else .)


state 165

    (100) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 217
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 166

    (102) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 218


state 167

    (101) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 219
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 168

    (95) if_structures -> if_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 95 (if_structures -> if_r ENDIF SEMICOLON .)


state 169

    (96) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 220


state 170

    (107) elseif_r -> elseif_r elseif_r .
    (107) elseif_r -> elseif_r . elseif_r
    (106) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (107) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 107 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 107 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 99

  ! ELSEIF          [ reduce using rule 107 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 170

state 171

    (97) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 221


state 172

    (98) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 222


state 173

    (105) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 223
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 174

    (106) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 224
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 175

    (99) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (104) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 225
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 176

    (109) while_p -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (110) while_p -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 226
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 177

    (14) var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .

    VARIABLE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR             reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FUNCTION        reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    RETURN          reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FUNCTION_NAME   reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FOREACH         reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ECHO            reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    PRINT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR_DUMP        reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    PRINT_R         reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR_EXPORT      reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    IF              reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    WHILE           reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    $end            reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    RCURLY          reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ENDIF           reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ELSE            reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ELSEIF          reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ENDWHILE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)


state 178

    (115) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (128) funcion_declaracion_anonima -> FUNCTION LPAREN . params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (130) variables_por_comma -> . VARIABLE
    (131) variables_por_comma -> . VARIABLE COMMA variables_por_comma
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 229
    VARIABLE        shift and go to state 227
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    variables_por_comma            shift and go to state 228
    params                         shift and go to state 230
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 179

    (22) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    VARIABLE        reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FUNCTION        reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RETURN          reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FUNCTION_NAME   reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FOREACH         reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 22 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 180

    (23) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    VARIABLE        reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FUNCTION        reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RETURN          reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FUNCTION_NAME   reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FOREACH         reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 23 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 181

    (126) funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 126 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 182

    (127) funcion_ejecucion -> VARIABLE LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 183

    (168) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN . params_unitype RPAREN SEMICOLON
    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN . LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (63) params_unitype -> . only_string
    (64) params_unitype -> . only_numerico
    (65) params_unitype -> . only_logico
    (66) only_string -> . elemento_string
    (67) only_string -> . elemento_string COMMA only_string
    (68) only_numerico -> . elemento_numerico
    (69) only_numerico -> . elemento_numerico COMMA only_numerico
    (70) only_logico -> . elemento_logico
    (71) only_logico -> . elemento_logico COMMA only_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    LBRACKET        shift and go to state 234
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 232
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params_unitype                 shift and go to state 233
    only_string                    shift and go to state 235
    only_numerico                  shift and go to state 236
    only_logico                    shift and go to state 237
    elemento_string                shift and go to state 238
    elemento_numerico              shift and go to state 239
    elemento_logico                shift and go to state 240
    elemento_logico_pri            shift and go to state 68

state 184

    (162) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . param RPAREN SEMICOLON
    (163) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . params RPAREN SEMICOLON
    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . LBRACKET params RBRACKET RPAREN SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (59) params -> . param
    (60) params -> . param COMMA params
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    LBRACKET        shift and go to state 243
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 241
    params                         shift and go to state 242
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 185

    (116) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (128) funcion_declaracion_anonima -> FUNCTION . LPAREN params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> FUNCTION . LPAREN RPAREN funciones_cuerpo

    LPAREN          shift and go to state 244


state 186

    (121) funciones_cuerpo -> LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 245


state 187

    (122) funciones_cuerpo -> LCURLY RCURLY .

    VARIABLE        reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR             reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    FUNCTION        reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    RETURN          reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    FUNCTION_NAME   reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    FOREACH         reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    ECHO            reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    PRINT           reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR_DUMP        reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    PRINT_R         reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR_EXPORT      reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    IF              reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    WHILE           reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    $end            reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    RCURLY          reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    ENDIF           reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    ELSE            reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    ELSEIF          reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    ENDWHILE        reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)
    SEMICOLON       reduce using rule 122 (funciones_cuerpo -> LCURLY RCURLY .)


state 188

    (117) funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 246

state 189

    (118) funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR             reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    IF              reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    $end            reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 118 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)


state 190

    (131) variables_por_comma -> VARIABLE COMMA . variables_por_comma
    (130) variables_por_comma -> . VARIABLE
    (131) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 247

state 191

    (119) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma . RPAREN

    RPAREN          shift and go to state 248


state 192

    (120) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN .

    LCURLY          reduce using rule 120 (funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN .)


state 193

    (24) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    IDENTICAL       reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RBRACKET        reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

  ! PLUS            [ reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 24 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 120

state 194

    (41) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES

    IDENTICAL       reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    DIFFERENT       reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATEREQUAL    reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSEQUAL       reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATERTHAN     reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSTHAN        reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ANDlOGICAL      reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ORLOGICAL       reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    COMMA           reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RBRACKET        reduce using rule 41 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 195

    (42) elemento_logico -> elemento_string comparador elemento_string .

    IDENTICAL       reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    NOTIDENTICAL    reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    EQUALSLOGICAL   reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    DIFFERENT       reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATEREQUAL    reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSEQUAL       reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATERTHAN     reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSTHAN        reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    ANDlOGICAL      reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    ORLOGICAL       reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    COMMA           reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)
    RBRACKET        reduce using rule 42 (elemento_logico -> elemento_string comparador elemento_string .)


state 196

    (36) elemento_string -> VARIABLE .

    IDENTICAL       reduce using rule 36 (elemento_string -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 36 (elemento_string -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 36 (elemento_string -> VARIABLE .)
    DIFFERENT       reduce using rule 36 (elemento_string -> VARIABLE .)
    GREATEREQUAL    reduce using rule 36 (elemento_string -> VARIABLE .)
    LESSEQUAL       reduce using rule 36 (elemento_string -> VARIABLE .)
    GREATERTHAN     reduce using rule 36 (elemento_string -> VARIABLE .)
    LESSTHAN        reduce using rule 36 (elemento_string -> VARIABLE .)
    ANDlOGICAL      reduce using rule 36 (elemento_string -> VARIABLE .)
    ORLOGICAL       reduce using rule 36 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 36 (elemento_string -> VARIABLE .)
    COMMA           reduce using rule 36 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 36 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 36 (elemento_string -> VARIABLE .)
    RBRACKET        reduce using rule 36 (elemento_string -> VARIABLE .)
    ARROW           reduce using rule 36 (elemento_string -> VARIABLE .)


state 197

    (38) elemento_logico -> elemento_logico comparador elemento_logico .
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    SEMICOLON       reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .)
    COMMA           reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .)
    POINT           reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RPAREN          reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RBRACKET        reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

  ! IDENTICAL       [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 38 (elemento_logico -> elemento_logico comparador elemento_logico .) ]

    comparador                     shift and go to state 138

state 198

    (27) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RBRACKET        reduce using rule 27 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 199

    (86) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 249


state 200

    (87) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 87 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 201

    (88) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 250


state 202

    (135) map -> NEW MAP LPAREN . LBRACKET todos_clave_valor RBRACKET RPAREN
    (136) map -> NEW MAP LPAREN . RPAREN

    LBRACKET        shift and go to state 251
    RPAREN          shift and go to state 252


state 203

    (141) vector -> NEW VECTOR LPAREN . LBRACKET params RBRACKET RPAREN
    (142) vector -> NEW VECTOR LPAREN . RPAREN

    LBRACKET        shift and go to state 253
    RPAREN          shift and go to state 254


state 204

    (150) set -> NEW SET LPAREN . LBRACKET params RBRACKET RPAREN
    (151) set -> NEW SET LPAREN . RPAREN

    LBRACKET        shift and go to state 255
    RPAREN          shift and go to state 256


state 205

    (124) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN . funciones_cuerpo SEMICOLON
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 257

state 206

    (125) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo . SEMICOLON

    SEMICOLON       shift and go to state 258


state 207

    (111) foreach -> FOREACH LPAREN foreach_content RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 259


state 208

    (112) foreach_content -> VARIABLE AS . VARIABLE
    (113) foreach_content -> VARIABLE AS . VARIABLE ARROW VARIABLE

    VARIABLE        shift and go to state 260


state 209

    (60) params -> param COMMA params .

    SEMICOLON       reduce using rule 60 (params -> param COMMA params .)
    RPAREN          reduce using rule 60 (params -> param COMMA params .)
    RBRACKET        reduce using rule 60 (params -> param COMMA params .)


state 210

    (61) params_points -> param .
    (62) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 61 (params_points -> param .)
    POINT           shift and go to state 157


state 211

    (62) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 62 (params_points -> param POINT params_points .)


state 212

    (84) vardump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 261


state 213

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . FIND LPAREN param RPAREN RPAREN SEMICOLON

    KEYS            shift and go to state 262
    DIFF            shift and go to state 263
    UNION           shift and go to state 264
    FIND            shift and go to state 265


state 214

    (83) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 266


state 215

    (85) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 267


state 216

    (102) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 166


state 217

    (100) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 268


state 218

    (102) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 269
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 219

    (101) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 270
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 220

    (96) if_structures -> if_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 96 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 221

    (97) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 271


state 222

    (98) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 98 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 223

    (105) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 105 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 224

    (106) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 272
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 225

    (99) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (104) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 273
    DOUBLEPOINT     shift and go to state 274


state 226

    (109) while_p -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (110) while_p -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 275
    DOUBLEPOINT     shift and go to state 276


state 227

    (130) variables_por_comma -> VARIABLE .
    (131) variables_por_comma -> VARIABLE . COMMA variables_por_comma
    (55) param -> VARIABLE .
    (36) elemento_string -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (40) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (param -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
    COMMA           shift and go to state 190
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! RPAREN          [ reduce using rule 130 (variables_por_comma -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 55 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 55 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 28 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]


state 228

    (115) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 277


state 229

    (129) funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 278

state 230

    (128) funcion_declaracion_anonima -> FUNCTION LPAREN params . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 279


state 231

    (127) funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .

    VARIABLE        reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FOREACH         reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ECHO            reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    RCURLY          reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ENDIF           reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 127 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)


state 232

    (36) elemento_string -> VARIABLE .
    (28) elemento_numerico -> VARIABLE .
    (40) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 28 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 28 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 28 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 28 (elemento_numerico -> VARIABLE .)
    RBRACKET        reduce using rule 28 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 36 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 40 (elemento_logico -> VARIABLE .) ]


state 233

    (168) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype . RPAREN SEMICOLON

    RPAREN          shift and go to state 280


state 234

    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET . params_unitype RBRACKET RPAREN SEMICOLON
    (63) params_unitype -> . only_string
    (64) params_unitype -> . only_numerico
    (65) params_unitype -> . only_logico
    (66) only_string -> . elemento_string
    (67) only_string -> . elemento_string COMMA only_string
    (68) only_numerico -> . elemento_numerico
    (69) only_numerico -> . elemento_numerico COMMA only_numerico
    (70) only_logico -> . elemento_logico
    (71) only_logico -> . elemento_logico COMMA only_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 232
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params_unitype                 shift and go to state 281
    only_string                    shift and go to state 235
    only_numerico                  shift and go to state 236
    only_logico                    shift and go to state 237
    elemento_string                shift and go to state 238
    elemento_numerico              shift and go to state 239
    elemento_logico                shift and go to state 240
    elemento_logico_pri            shift and go to state 68

state 235

    (63) params_unitype -> only_string .

    RPAREN          reduce using rule 63 (params_unitype -> only_string .)
    RBRACKET        reduce using rule 63 (params_unitype -> only_string .)


state 236

    (64) params_unitype -> only_numerico .

    RPAREN          reduce using rule 64 (params_unitype -> only_numerico .)
    RBRACKET        reduce using rule 64 (params_unitype -> only_numerico .)


state 237

    (65) params_unitype -> only_logico .

    RPAREN          reduce using rule 65 (params_unitype -> only_logico .)
    RBRACKET        reduce using rule 65 (params_unitype -> only_logico .)


state 238

    (66) only_string -> elemento_string .
    (67) only_string -> elemento_string . COMMA only_string
    (42) elemento_logico -> elemento_string . comparador elemento_string
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 66 (only_string -> elemento_string .)
    RBRACKET        reduce using rule 66 (only_string -> elemento_string .)
    COMMA           shift and go to state 282
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 239

    (68) only_numerico -> elemento_numerico .
    (69) only_numerico -> elemento_numerico . COMMA only_numerico
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (41) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 68 (only_numerico -> elemento_numerico .)
    RBRACKET        reduce using rule 68 (only_numerico -> elemento_numerico .)
    COMMA           shift and go to state 283
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 240

    (70) only_logico -> elemento_logico .
    (71) only_logico -> elemento_logico . COMMA only_logico
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 70 (only_logico -> elemento_logico .)
    RBRACKET        reduce using rule 70 (only_logico -> elemento_logico .)
    COMMA           shift and go to state 284
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 241

    (162) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param . RPAREN SEMICOLON
    (59) params -> param .
    (60) params -> param . COMMA params

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 285
    COMMA           shift and go to state 156

  ! RPAREN          [ reduce using rule 59 (params -> param .) ]


state 242

    (163) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 286


state 243

    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET . params RBRACKET RPAREN SEMICOLON
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 287
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 244

    (116) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (128) funcion_declaracion_anonima -> FUNCTION LPAREN . params RPAREN funciones_cuerpo
    (129) funcion_declaracion_anonima -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (130) variables_por_comma -> . VARIABLE
    (131) variables_por_comma -> . VARIABLE COMMA variables_por_comma
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 229
    VARIABLE        shift and go to state 227
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    variables_por_comma            shift and go to state 288
    params                         shift and go to state 230
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 245

    (121) funciones_cuerpo -> LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR             reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    IF              reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    $end            reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    SEMICOLON       reduce using rule 121 (funciones_cuerpo -> LCURLY expresiones RCURLY .)


state 246

    (117) funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 117 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 247

    (131) variables_por_comma -> VARIABLE COMMA variables_por_comma .

    RPAREN          reduce using rule 131 (variables_por_comma -> VARIABLE COMMA variables_por_comma .)


state 248

    (119) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN .

    LCURLY          reduce using rule 119 (funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN .)


state 249

    (86) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 289
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 250

    (88) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 88 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 251

    (135) map -> NEW MAP LPAREN LBRACKET . todos_clave_valor RBRACKET RPAREN
    (139) todos_clave_valor -> . clave_valor
    (140) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (137) clave_valor -> . elemento_string ARROW param
    (138) clave_valor -> . NUMBER ARROW param
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 293
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 196

    todos_clave_valor              shift and go to state 290
    clave_valor                    shift and go to state 291
    elemento_string                shift and go to state 292

state 252

    (136) map -> NEW MAP LPAREN RPAREN .

    SEMICOLON       reduce using rule 136 (map -> NEW MAP LPAREN RPAREN .)


state 253

    (141) vector -> NEW VECTOR LPAREN LBRACKET . params RBRACKET RPAREN
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 294
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 254

    (142) vector -> NEW VECTOR LPAREN RPAREN .

    SEMICOLON       reduce using rule 142 (vector -> NEW VECTOR LPAREN RPAREN .)


state 255

    (150) set -> NEW SET LPAREN LBRACKET . params RBRACKET RPAREN
    (59) params -> . param
    (60) params -> . param COMMA params
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 295
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 256

    (151) set -> NEW SET LPAREN RPAREN .

    SEMICOLON       reduce using rule 151 (set -> NEW SET LPAREN RPAREN .)


state 257

    (124) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo . SEMICOLON

    SEMICOLON       shift and go to state 296


state 258

    (125) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .

    VARIABLE        reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR             reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION        reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    RETURN          reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION_NAME   reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FOREACH         reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ECHO            reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    PRINT           reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR_DUMP        reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    PRINT_R         reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR_EXPORT      reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    IF              reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    WHILE           reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    $end            reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    RCURLY          reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ENDIF           reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ELSE            reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ELSEIF          reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ENDWHILE        reduce using rule 125 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)


state 259

    (111) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 297
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 260

    (112) foreach_content -> VARIABLE AS VARIABLE .
    (113) foreach_content -> VARIABLE AS VARIABLE . ARROW VARIABLE

    RPAREN          reduce using rule 112 (foreach_content -> VARIABLE AS VARIABLE .)
    ARROW           shift and go to state 298


state 261

    (84) vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 84 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 262

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS . LPAREN RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 299


state 263

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF . LPAREN VARIABLE RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 300


state 264

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION . LPAREN VARIABLE RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 301


state 265

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND . LPAREN param RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 302


state 266

    (83) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 83 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 267

    (85) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 85 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 268

    (100) else -> ELSE LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 100 (else -> ELSE LCURLY expresiones RCURLY .)


state 269

    (102) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 303
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 270

    (101) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 304


state 271

    (97) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 97 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 272

    (106) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 305


state 273

    (99) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 306
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 274

    (104) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 307
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 275

    (109) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 308
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 276

    (110) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 309
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 277

    (115) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 310

state 278

    (129) funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR             reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    IF              reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    $end            reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 129 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)


state 279

    (128) funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 311

state 280

    (168) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 312


state 281

    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 313


state 282

    (67) only_string -> elemento_string COMMA . only_string
    (66) only_string -> . elemento_string
    (67) only_string -> . elemento_string COMMA only_string
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 196

    elemento_string                shift and go to state 314
    only_string                    shift and go to state 315

state 283

    (69) only_numerico -> elemento_numerico COMMA . only_numerico
    (68) only_numerico -> . elemento_numerico
    (69) only_numerico -> . elemento_numerico COMMA only_numerico
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 316
    only_numerico                  shift and go to state 317

state 284

    (71) only_logico -> elemento_logico COMMA . only_logico
    (70) only_logico -> . elemento_logico
    (71) only_logico -> . elemento_logico COMMA only_logico
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 240
    only_logico                    shift and go to state 318
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 285

    (162) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 319


state 286

    (163) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 320


state 287

    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 321


state 288

    (116) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 322


state 289

    (86) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN
    (38) elemento_logico -> elemento_logico . comparador elemento_logico
    (45) comparador -> . IDENTICAL
    (46) comparador -> . NOTIDENTICAL
    (47) comparador -> . EQUALSLOGICAL
    (48) comparador -> . DIFFERENT
    (49) comparador -> . GREATEREQUAL
    (50) comparador -> . LESSEQUAL
    (51) comparador -> . GREATERTHAN
    (52) comparador -> . LESSTHAN
    (53) comparador -> . ANDlOGICAL
    (54) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 323
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 290

    (135) map -> NEW MAP LPAREN LBRACKET todos_clave_valor . RBRACKET RPAREN

    RBRACKET        shift and go to state 324


state 291

    (139) todos_clave_valor -> clave_valor .
    (140) todos_clave_valor -> clave_valor . COMMA todos_clave_valor

    RBRACKET        reduce using rule 139 (todos_clave_valor -> clave_valor .)
    COMMA           shift and go to state 325


state 292

    (137) clave_valor -> elemento_string . ARROW param

    ARROW           shift and go to state 326


state 293

    (138) clave_valor -> NUMBER . ARROW param

    ARROW           shift and go to state 327


state 294

    (141) vector -> NEW VECTOR LPAREN LBRACKET params . RBRACKET RPAREN

    RBRACKET        shift and go to state 328


state 295

    (150) set -> NEW SET LPAREN LBRACKET params . RBRACKET RPAREN

    RBRACKET        shift and go to state 329


state 296

    (124) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .

    VARIABLE        reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR             reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION        reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    RETURN          reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION_NAME   reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FOREACH         reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ECHO            reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    PRINT           reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR_DUMP        reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    PRINT_R         reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR_EXPORT      reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    IF              reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    WHILE           reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    $end            reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    RCURLY          reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ENDIF           reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ELSE            reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ELSEIF          reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ENDWHILE        reduce using rule 124 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)


state 297

    (111) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 330


state 298

    (113) foreach_content -> VARIABLE AS VARIABLE ARROW . VARIABLE

    VARIABLE        shift and go to state 331


state 299

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 332


state 300

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN . VARIABLE RPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 333


state 301

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN . VARIABLE RPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 334


state 302

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN . param RPAREN RPAREN SEMICOLON
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 335
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 303

    (102) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 336


state 304

    (101) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 337
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 305

    (106) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 338
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 306

    (99) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 339


state 307

    (104) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 104 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 104 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 104 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 308

    (109) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 340


state 309

    (110) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 341


state 310

    (115) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 115 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 311

    (128) funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR             reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    IF              reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    $end            reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 128 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)


state 312

    (168) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .

    VARIABLE        reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR             reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    RETURN          reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FOREACH         reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ECHO            reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    PRINT           reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    IF              reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    WHILE           reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    $end            reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    RCURLY          reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ENDIF           reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ELSE            reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 168 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)


state 313

    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 342


state 314

    (66) only_string -> elemento_string .
    (67) only_string -> elemento_string . COMMA only_string

    RPAREN          reduce using rule 66 (only_string -> elemento_string .)
    RBRACKET        reduce using rule 66 (only_string -> elemento_string .)
    COMMA           shift and go to state 282


state 315

    (67) only_string -> elemento_string COMMA only_string .

    RPAREN          reduce using rule 67 (only_string -> elemento_string COMMA only_string .)
    RBRACKET        reduce using rule 67 (only_string -> elemento_string COMMA only_string .)


state 316

    (68) only_numerico -> elemento_numerico .
    (69) only_numerico -> elemento_numerico . COMMA only_numerico
    (24) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (29) operador -> . PLUS
    (30) operador -> . MINUS
    (31) operador -> . DIVIDE
    (32) operador -> . EXPONENTIAL
    (33) operador -> . TIMES

    RPAREN          reduce using rule 68 (only_numerico -> elemento_numerico .)
    RBRACKET        reduce using rule 68 (only_numerico -> elemento_numerico .)
    COMMA           shift and go to state 283
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 317

    (69) only_numerico -> elemento_numerico COMMA only_numerico .

    RPAREN          reduce using rule 69 (only_numerico -> elemento_numerico COMMA only_numerico .)
    RBRACKET        reduce using rule 69 (only_numerico -> elemento_numerico COMMA only_numerico .)


state 318

    (71) only_logico -> elemento_logico COMMA only_logico .

    RPAREN          reduce using rule 71 (only_logico -> elemento_logico COMMA only_logico .)
    RBRACKET        reduce using rule 71 (only_logico -> elemento_logico COMMA only_logico .)


state 319

    (162) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 162 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)


state 320

    (163) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .

    VARIABLE        reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FOREACH         reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ECHO            reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    PRINT           reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    WHILE           reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    RCURLY          reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ENDIF           reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 163 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)


state 321

    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 343


state 322

    (116) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (121) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (122) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 344

state 323

    (86) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 86 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 324

    (135) map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET . RPAREN

    RPAREN          shift and go to state 345


state 325

    (140) todos_clave_valor -> clave_valor COMMA . todos_clave_valor
    (139) todos_clave_valor -> . clave_valor
    (140) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (137) clave_valor -> . elemento_string ARROW param
    (138) clave_valor -> . NUMBER ARROW param
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 293
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 196

    clave_valor                    shift and go to state 291
    todos_clave_valor              shift and go to state 346
    elemento_string                shift and go to state 292

state 326

    (137) clave_valor -> elemento_string ARROW . param
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    elemento_string                shift and go to state 84
    param                          shift and go to state 347
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 327

    (138) clave_valor -> NUMBER ARROW . param
    (55) param -> . VARIABLE
    (56) param -> . elemento_string
    (57) param -> . elemento_numerico
    (58) param -> . elemento_logico
    (34) elemento_string -> . STRING
    (35) elemento_string -> . STRINGCC
    (36) elemento_string -> . VARIABLE
    (24) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (25) elemento_numerico -> . FLOAT
    (26) elemento_numerico -> . NUMBER
    (27) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (28) elemento_numerico -> . VARIABLE
    (37) elemento_logico -> . elemento_logico_pri
    (38) elemento_logico -> . elemento_logico comparador elemento_logico
    (39) elemento_logico -> . NOTLOGICAL elemento_logico
    (40) elemento_logico -> . VARIABLE
    (41) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (42) elemento_logico -> . elemento_string comparador elemento_string
    (43) elemento_logico_pri -> . TRUE
    (44) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 348
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 328

    (141) vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET . RPAREN

    RPAREN          shift and go to state 349


state 329

    (150) set -> NEW SET LPAREN LBRACKET params RBRACKET . RPAREN

    RPAREN          shift and go to state 350


state 330

    (111) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 111 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)


state 331

    (113) foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE .

    RPAREN          reduce using rule 113 (foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE .)


state 332

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 351


state 333

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 352


state 334

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 353


state 335

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 354


state 336

    (102) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (14) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (13) var_declarar -> . VAR var_asignar
    (75) expresiones_de_salida -> . echo
    (76) expresiones_de_salida -> . print
    (77) expresiones_de_salida -> . vardump
    (78) expresiones_de_salida -> . print_r
    (79) expresiones_de_salida -> . var_export
    (89) estructuras_de_control -> . if_structures
    (90) estructuras_de_control -> . estructuras_while
    (22) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (23) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (152) funciones_datos_estructurados -> . funciones_map
    (153) funciones_datos_estructurados -> . funciones_set
    (154) funciones_datos_estructurados -> . funciones_vector
    (114) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (115) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (116) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (117) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (118) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (123) return -> . RETURN var_asignar_contenido SEMICOLON
    (124) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (125) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (126) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (127) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (111) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (80) echo -> . ECHO params SEMICOLON
    (81) echo -> . ECHO params_points SEMICOLON
    (82) print -> . PRINT param SEMICOLON
    (84) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (83) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (85) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (91) if_structures -> . if
    (92) if_structures -> . if else
    (93) if_structures -> . if else_if else
    (94) if_structures -> . if else_if
    (95) if_structures -> . if_r ENDIF SEMICOLON
    (96) if_structures -> . if_r else_r ENDIF SEMICOLON
    (97) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (98) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (108) estructuras_while -> . while_p
    (155) funciones_map -> . key_map
    (156) funciones_map -> . diff_map
    (165) funciones_set -> . union_set
    (166) funciones_set -> . remove_set
    (159) funciones_vector -> . find_vector
    (160) funciones_vector -> . push_vector
    (99) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (104) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (109) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (110) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (157) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (158) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (167) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (168) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (169) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (161) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (162) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (163) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (164) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 355
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 337

    (101) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 356


state 338

    (106) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 106 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 106 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 106 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 339

    (99) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 99 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 340

    (109) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 109 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 341

    (110) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 357


state 342

    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 358


state 343

    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 359


state 344

    (116) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 116 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 345

    (135) map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN .

    SEMICOLON       reduce using rule 135 (map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN .)


state 346

    (140) todos_clave_valor -> clave_valor COMMA todos_clave_valor .

    RBRACKET        reduce using rule 140 (todos_clave_valor -> clave_valor COMMA todos_clave_valor .)


state 347

    (137) clave_valor -> elemento_string ARROW param .

    COMMA           reduce using rule 137 (clave_valor -> elemento_string ARROW param .)
    RBRACKET        reduce using rule 137 (clave_valor -> elemento_string ARROW param .)


state 348

    (138) clave_valor -> NUMBER ARROW param .

    COMMA           reduce using rule 138 (clave_valor -> NUMBER ARROW param .)
    RBRACKET        reduce using rule 138 (clave_valor -> NUMBER ARROW param .)


state 349

    (141) vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN .

    SEMICOLON       reduce using rule 141 (vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN .)


state 350

    (150) set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN .

    SEMICOLON       reduce using rule 150 (set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN .)


state 351

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 360


state 352

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 361


state 353

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 362


state 354

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 363


state 355

    (102) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 364


state 356

    (101) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 101 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 357

    (110) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    VARIABLE        reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FUNCTION        reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RETURN          reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FUNCTION_NAME   reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FOREACH         reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 110 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 358

    (169) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    RETURN          reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FOREACH         reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 169 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)


state 359

    (164) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    RETURN          reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FOREACH         reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 164 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)


state 360

    (157) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 157 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)


state 361

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 365


state 362

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 366


state 363

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 367


state 364

    (102) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 102 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 365

    (158) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 158 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)


state 366

    (167) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 167 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)


state 367

    (161) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 161 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 92 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 141 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 170 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 193 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 193 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 193 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 193 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 197 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 197 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 197 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 197 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 197 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 197 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 197 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 197 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 197 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 197 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 227 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 227 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 227 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 227 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 241 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_numerico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 82 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 142 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 142
WARNING: reduce/reduce conflict in state 142 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 142
WARNING: reduce/reduce conflict in state 160 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 160
WARNING: reduce/reduce conflict in state 160 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 160
WARNING: reduce/reduce conflict in state 160 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 160
WARNING: reduce/reduce conflict in state 227 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (variables_por_comma -> VARIABLE) in state 227
WARNING: reduce/reduce conflict in state 227 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 227
WARNING: reduce/reduce conflict in state 227 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 227
WARNING: reduce/reduce conflict in state 227 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 227
WARNING: reduce/reduce conflict in state 232 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 232
WARNING: reduce/reduce conflict in state 232 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 232
WARNING: Rule (param -> VARIABLE) is never reduced
