Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARROW
    AS
    BREAK
    CASE
    CATCH
    CLASS
    DO
    ENDFOR
    ENDFOREACH
    ENDSWITCH
    EXTENDS
    FINAL
    FOR
    FOREACH
    FUNCTION
    GLOBAL
    ID
    IMPLEMENTS
    INTERFACE
    LBRACKET
    NEW
    OR
    PHPEND
    PHPSTART
    PRIVATE
    PROTECTED
    PUBLIC
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW
    XOR

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> elemento_numerico
Rule 4     expresion -> var_asignar
Rule 5     expresion -> var_declarar
Rule 6     expresion -> expresiones_de_salida
Rule 7     expresion -> estructuras_de_control
Rule 8     expresion -> var_plusminus
Rule 9     var_declarar -> VAR var_asignar
Rule 10    var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 11    var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 12    var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON
Rule 13    var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON
Rule 14    var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON
Rule 15    var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON
Rule 16    var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
Rule 17    elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 18    elemento_numerico -> FLOAT
Rule 19    elemento_numerico -> NUMBER
Rule 20    elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 21    elemento_numerico -> VARIABLE
Rule 22    operador -> PLUS
Rule 23    operador -> MINUS
Rule 24    operador -> DIVIDE
Rule 25    operador -> EXPONENTIAL
Rule 26    operador -> TIMES
Rule 27    elemento_string -> STRING
Rule 28    elemento_string -> STRINGCC
Rule 29    elemento_string -> VARIABLE
Rule 30    elemento_logico -> TRUE
Rule 31    elemento_logico -> FALSE
Rule 32    elemento_logico -> elemento_logico comparador elemento_logico
Rule 33    elemento_logico -> NOTLOGICAL elemento_logico
Rule 34    elemento_logico -> LPAREN elemento_logico RPAREN
Rule 35    elemento_logico -> VARIABLE
Rule 36    elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 37    elemento_logico -> elemento_string comparador elemento_string
Rule 38    comparador -> IDENTICAL
Rule 39    comparador -> NOTIDENTICAL
Rule 40    comparador -> EQUALSLOGICAL
Rule 41    comparador -> DIFFERENT
Rule 42    comparador -> GREATEREQUAL
Rule 43    comparador -> LESSEQUAL
Rule 44    comparador -> GREATERTHAN
Rule 45    comparador -> LESSTHAN
Rule 46    comparador -> ANDlOGICAL
Rule 47    comparador -> ORLOGICAL
Rule 48    param -> VARIABLE
Rule 49    param -> elemento_string
Rule 50    param -> elemento_numerico
Rule 51    param -> elemento_logico
Rule 52    params -> param
Rule 53    params -> param COMMA params
Rule 54    params_points -> param
Rule 55    params_points -> param POINT params_points
Rule 56    optional_params -> param
Rule 57    optional_params -> 
Rule 58    optional_params -> param COMMA optional_params
Rule 59    expresiones_de_salida -> echo
Rule 60    expresiones_de_salida -> print
Rule 61    expresiones_de_salida -> var_dump
Rule 62    expresiones_de_salida -> print_r
Rule 63    expresiones_de_salida -> var_export
Rule 64    echo -> ECHO params SEMICOLON
Rule 65    echo -> ECHO params_points SEMICOLON
Rule 66    print -> PRINT param SEMICOLON
Rule 67    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 68    var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 69    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 70    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 71    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 72    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 73    estructuras_de_control -> if_structures
Rule 74    estructuras_de_control -> estructuras_while
Rule 75    if_structures -> if
Rule 76    if_structures -> if else
Rule 77    if_structures -> if else_if else
Rule 78    if_structures -> if else_if
Rule 79    if_structures -> if_r ENDIF SEMICOLON
Rule 80    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 81    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 82    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 83    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 84    else -> ELSE LCURLY expresiones RCURLY
Rule 85    else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 86    else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 87    else_if -> else_if else_if
Rule 88    if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 89    else_r -> ELSE DOUBLEPOINT expresiones
Rule 90    elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 91    elseif_r -> elseif_r elseif_r
Rule 92    estructuras_while -> while
Rule 93    while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 94    while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

Terminals, with rules where they appear

                     : 57
AND                  : 
ANDlOGICAL           : 46
ARROW                : 
AS                   : 
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COMMA                : 53 58 70
DIFFERENT            : 41
DIVIDE               : 24
DO                   : 
DOUBLEPOINT          : 88 89 90 94
ECHO                 : 64 65
ELSE                 : 84 86 89
ELSEIF               : 85 90
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 79 80 81 82
ENDSWITCH            : 
ENDWHILE             : 94
EQUALS               : 12 13 14 15 16
EQUALSLOGICAL        : 40
EXPONENTIAL          : 25
EXTENDS              : 
FALSE                : 31
FINAL                : 
FLOAT                : 18
FOR                  : 
FOREACH              : 
FUNCTION             : 
GLOBAL               : 
GREATEREQUAL         : 42
GREATERTHAN          : 44
ID                   : 
IDENTICAL            : 38
IF                   : 83 86 88
IMPLEMENTS           : 
INTERFACE            : 
LBRACKET             : 
LCURLY               : 83 84 85 86 93
LESSEQUAL            : 43
LESSTHAN             : 45
LPAREN               : 20 34 67 68 69 70 71 72 83 85 86 88 90 93 94
MINUS                : 11 11 23
NEW                  : 
NOTIDENTICAL         : 39
NOTLOGICAL           : 33
NUMBER               : 19
OR                   : 
ORLOGICAL            : 47
PHPEND               : 
PHPSTART             : 
PLUS                 : 10 10 22
POINT                : 55
PRINT                : 66
PRINT_R              : 67
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACKET             : 
RCURLY               : 83 84 85 86 93
READLINE             : 71 72
RETURN               : 
RPAREN               : 20 34 67 68 69 70 71 72 83 85 86 88 90 93 94
SEMICOLON            : 10 11 12 13 14 15 16 64 65 66 67 68 69 79 80 81 82 94
STATIC               : 
STRING               : 27
STRINGCC             : 28
SWITCH               : 
THROW                : 
TIMES                : 26
TRUE                 : 30
VAR                  : 9
VARIABLE             : 10 11 12 12 13 14 15 16 21 29 35 48
VAR_DUMP             : 68
VAR_EXPORT           : 69 70
WHILE                : 93 94
XOR                  : 
error                : 

Nonterminals, with rules where they appear

comparador           : 32 36 37
echo                 : 59
elemento_logico      : 15 32 32 33 34 51 70 83 85 86 88 90 93 94
elemento_numerico    : 3 13 17 17 20 36 36 50
elemento_string      : 14 37 37 49 72
else                 : 76 77
else_if              : 77 78 87 87
else_r               : 80 81
elseif_r             : 81 82 91 91
estructuras_de_control : 7
estructuras_while    : 74
expresion            : 1 2
expresiones          : 2 83 84 85 86 88 89 90 93 94 0
expresiones_de_salida : 6
funciones_ingreso_datos : 16
if                   : 75 76 77 78
if_r                 : 79 80 81 82
if_structures        : 73
operador             : 17
optional_params      : 58
param                : 52 53 54 55 56 58 66 67 68 69 70
params               : 53 64
params_points        : 55 65
print                : 60
print_r              : 62
var_asignar          : 4 9
var_declarar         : 5
var_dump             : 61
var_export           : 63
var_plusminus        : 8
while                : 92

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 31
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 3

    (3) expresion -> elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    FLOAT           reduce using rule 3 (expresion -> elemento_numerico .)
    NUMBER          reduce using rule 3 (expresion -> elemento_numerico .)
    LPAREN          reduce using rule 3 (expresion -> elemento_numerico .)
    VARIABLE        reduce using rule 3 (expresion -> elemento_numerico .)
    VAR             reduce using rule 3 (expresion -> elemento_numerico .)
    ECHO            reduce using rule 3 (expresion -> elemento_numerico .)
    PRINT           reduce using rule 3 (expresion -> elemento_numerico .)
    VAR_DUMP        reduce using rule 3 (expresion -> elemento_numerico .)
    PRINT_R         reduce using rule 3 (expresion -> elemento_numerico .)
    VAR_EXPORT      reduce using rule 3 (expresion -> elemento_numerico .)
    IF              reduce using rule 3 (expresion -> elemento_numerico .)
    WHILE           reduce using rule 3 (expresion -> elemento_numerico .)
    $end            reduce using rule 3 (expresion -> elemento_numerico .)
    RCURLY          reduce using rule 3 (expresion -> elemento_numerico .)
    ENDIF           reduce using rule 3 (expresion -> elemento_numerico .)
    ELSE            reduce using rule 3 (expresion -> elemento_numerico .)
    ELSEIF          reduce using rule 3 (expresion -> elemento_numerico .)
    ENDWHILE        reduce using rule 3 (expresion -> elemento_numerico .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

    operador                       shift and go to state 32

state 4

    (4) expresion -> var_asignar .

    FLOAT           reduce using rule 4 (expresion -> var_asignar .)
    NUMBER          reduce using rule 4 (expresion -> var_asignar .)
    LPAREN          reduce using rule 4 (expresion -> var_asignar .)
    VARIABLE        reduce using rule 4 (expresion -> var_asignar .)
    VAR             reduce using rule 4 (expresion -> var_asignar .)
    ECHO            reduce using rule 4 (expresion -> var_asignar .)
    PRINT           reduce using rule 4 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 4 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_asignar .)
    IF              reduce using rule 4 (expresion -> var_asignar .)
    WHILE           reduce using rule 4 (expresion -> var_asignar .)
    $end            reduce using rule 4 (expresion -> var_asignar .)
    RCURLY          reduce using rule 4 (expresion -> var_asignar .)
    ENDIF           reduce using rule 4 (expresion -> var_asignar .)
    ELSE            reduce using rule 4 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 4 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_asignar .)


state 5

    (5) expresion -> var_declarar .

    FLOAT           reduce using rule 5 (expresion -> var_declarar .)
    NUMBER          reduce using rule 5 (expresion -> var_declarar .)
    LPAREN          reduce using rule 5 (expresion -> var_declarar .)
    VARIABLE        reduce using rule 5 (expresion -> var_declarar .)
    VAR             reduce using rule 5 (expresion -> var_declarar .)
    ECHO            reduce using rule 5 (expresion -> var_declarar .)
    PRINT           reduce using rule 5 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 5 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 5 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 5 (expresion -> var_declarar .)
    IF              reduce using rule 5 (expresion -> var_declarar .)
    WHILE           reduce using rule 5 (expresion -> var_declarar .)
    $end            reduce using rule 5 (expresion -> var_declarar .)
    RCURLY          reduce using rule 5 (expresion -> var_declarar .)
    ENDIF           reduce using rule 5 (expresion -> var_declarar .)
    ELSE            reduce using rule 5 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 5 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 5 (expresion -> var_declarar .)


state 6

    (6) expresion -> expresiones_de_salida .

    FLOAT           reduce using rule 6 (expresion -> expresiones_de_salida .)
    NUMBER          reduce using rule 6 (expresion -> expresiones_de_salida .)
    LPAREN          reduce using rule 6 (expresion -> expresiones_de_salida .)
    VARIABLE        reduce using rule 6 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 6 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 6 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 6 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 6 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 6 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 6 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 6 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 6 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 6 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 6 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 6 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 6 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 6 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 6 (expresion -> expresiones_de_salida .)


state 7

    (7) expresion -> estructuras_de_control .

    FLOAT           reduce using rule 7 (expresion -> estructuras_de_control .)
    NUMBER          reduce using rule 7 (expresion -> estructuras_de_control .)
    LPAREN          reduce using rule 7 (expresion -> estructuras_de_control .)
    VARIABLE        reduce using rule 7 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 7 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 7 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 7 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 7 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 7 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 7 (expresion -> estructuras_de_control .)
    IF              reduce using rule 7 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 7 (expresion -> estructuras_de_control .)
    $end            reduce using rule 7 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 7 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 7 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 7 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 7 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 7 (expresion -> estructuras_de_control .)


state 8

    (8) expresion -> var_plusminus .

    FLOAT           reduce using rule 8 (expresion -> var_plusminus .)
    NUMBER          reduce using rule 8 (expresion -> var_plusminus .)
    LPAREN          reduce using rule 8 (expresion -> var_plusminus .)
    VARIABLE        reduce using rule 8 (expresion -> var_plusminus .)
    VAR             reduce using rule 8 (expresion -> var_plusminus .)
    ECHO            reduce using rule 8 (expresion -> var_plusminus .)
    PRINT           reduce using rule 8 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 8 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 8 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 8 (expresion -> var_plusminus .)
    IF              reduce using rule 8 (expresion -> var_plusminus .)
    WHILE           reduce using rule 8 (expresion -> var_plusminus .)
    $end            reduce using rule 8 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 8 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 8 (expresion -> var_plusminus .)
    ELSE            reduce using rule 8 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 8 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 8 (expresion -> var_plusminus .)


state 9

    (18) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 18 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 18 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 18 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 18 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 18 (elemento_numerico -> FLOAT .)
    FLOAT           reduce using rule 18 (elemento_numerico -> FLOAT .)
    NUMBER          reduce using rule 18 (elemento_numerico -> FLOAT .)
    LPAREN          reduce using rule 18 (elemento_numerico -> FLOAT .)
    VARIABLE        reduce using rule 18 (elemento_numerico -> FLOAT .)
    VAR             reduce using rule 18 (elemento_numerico -> FLOAT .)
    ECHO            reduce using rule 18 (elemento_numerico -> FLOAT .)
    PRINT           reduce using rule 18 (elemento_numerico -> FLOAT .)
    VAR_DUMP        reduce using rule 18 (elemento_numerico -> FLOAT .)
    PRINT_R         reduce using rule 18 (elemento_numerico -> FLOAT .)
    VAR_EXPORT      reduce using rule 18 (elemento_numerico -> FLOAT .)
    IF              reduce using rule 18 (elemento_numerico -> FLOAT .)
    WHILE           reduce using rule 18 (elemento_numerico -> FLOAT .)
    $end            reduce using rule 18 (elemento_numerico -> FLOAT .)
    RCURLY          reduce using rule 18 (elemento_numerico -> FLOAT .)
    ENDIF           reduce using rule 18 (elemento_numerico -> FLOAT .)
    ELSE            reduce using rule 18 (elemento_numerico -> FLOAT .)
    ELSEIF          reduce using rule 18 (elemento_numerico -> FLOAT .)
    ENDWHILE        reduce using rule 18 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 18 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 18 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 18 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 18 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 18 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 18 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 18 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 18 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 18 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 18 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 18 (elemento_numerico -> FLOAT .)


state 10

    (19) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 19 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 19 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 19 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 19 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 19 (elemento_numerico -> NUMBER .)
    FLOAT           reduce using rule 19 (elemento_numerico -> NUMBER .)
    NUMBER          reduce using rule 19 (elemento_numerico -> NUMBER .)
    LPAREN          reduce using rule 19 (elemento_numerico -> NUMBER .)
    VARIABLE        reduce using rule 19 (elemento_numerico -> NUMBER .)
    VAR             reduce using rule 19 (elemento_numerico -> NUMBER .)
    ECHO            reduce using rule 19 (elemento_numerico -> NUMBER .)
    PRINT           reduce using rule 19 (elemento_numerico -> NUMBER .)
    VAR_DUMP        reduce using rule 19 (elemento_numerico -> NUMBER .)
    PRINT_R         reduce using rule 19 (elemento_numerico -> NUMBER .)
    VAR_EXPORT      reduce using rule 19 (elemento_numerico -> NUMBER .)
    IF              reduce using rule 19 (elemento_numerico -> NUMBER .)
    WHILE           reduce using rule 19 (elemento_numerico -> NUMBER .)
    $end            reduce using rule 19 (elemento_numerico -> NUMBER .)
    RCURLY          reduce using rule 19 (elemento_numerico -> NUMBER .)
    ENDIF           reduce using rule 19 (elemento_numerico -> NUMBER .)
    ELSE            reduce using rule 19 (elemento_numerico -> NUMBER .)
    ELSEIF          reduce using rule 19 (elemento_numerico -> NUMBER .)
    ENDWHILE        reduce using rule 19 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 19 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 19 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 19 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 19 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 19 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 19 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 19 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 19 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 19 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 19 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 19 (elemento_numerico -> NUMBER .)


state 11

    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 39

    elemento_numerico              shift and go to state 38

state 12

    (21) elemento_numerico -> VARIABLE .
    (12) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (11) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    FLOAT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NUMBER          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VARIABLE        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR             reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ECHO            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PRINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR_DUMP        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PRINT_R         reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR_EXPORT      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IF              reduce using rule 21 (elemento_numerico -> VARIABLE .)
    WHILE           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    $end            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    RCURLY          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ENDIF           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ELSE            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ELSEIF          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ENDWHILE        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALS          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42

  ! PLUS            [ reduce using rule 21 (elemento_numerico -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 21 (elemento_numerico -> VARIABLE .) ]


state 13

    (9) var_declarar -> VAR . var_asignar
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON

    VARIABLE        shift and go to state 44

    var_asignar                    shift and go to state 43

state 14

    (59) expresiones_de_salida -> echo .

    FLOAT           reduce using rule 59 (expresiones_de_salida -> echo .)
    NUMBER          reduce using rule 59 (expresiones_de_salida -> echo .)
    LPAREN          reduce using rule 59 (expresiones_de_salida -> echo .)
    VARIABLE        reduce using rule 59 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 59 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 59 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 59 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 59 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 59 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 59 (expresiones_de_salida -> echo .)
    IF              reduce using rule 59 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 59 (expresiones_de_salida -> echo .)
    $end            reduce using rule 59 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 59 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 59 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 59 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 59 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 59 (expresiones_de_salida -> echo .)


state 15

    (60) expresiones_de_salida -> print .

    FLOAT           reduce using rule 60 (expresiones_de_salida -> print .)
    NUMBER          reduce using rule 60 (expresiones_de_salida -> print .)
    LPAREN          reduce using rule 60 (expresiones_de_salida -> print .)
    VARIABLE        reduce using rule 60 (expresiones_de_salida -> print .)
    VAR             reduce using rule 60 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 60 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 60 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 60 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 60 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 60 (expresiones_de_salida -> print .)
    IF              reduce using rule 60 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 60 (expresiones_de_salida -> print .)
    $end            reduce using rule 60 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 60 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 60 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 60 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 60 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 60 (expresiones_de_salida -> print .)


state 16

    (61) expresiones_de_salida -> var_dump .

    FLOAT           reduce using rule 61 (expresiones_de_salida -> var_dump .)
    NUMBER          reduce using rule 61 (expresiones_de_salida -> var_dump .)
    LPAREN          reduce using rule 61 (expresiones_de_salida -> var_dump .)
    VARIABLE        reduce using rule 61 (expresiones_de_salida -> var_dump .)
    VAR             reduce using rule 61 (expresiones_de_salida -> var_dump .)
    ECHO            reduce using rule 61 (expresiones_de_salida -> var_dump .)
    PRINT           reduce using rule 61 (expresiones_de_salida -> var_dump .)
    VAR_DUMP        reduce using rule 61 (expresiones_de_salida -> var_dump .)
    PRINT_R         reduce using rule 61 (expresiones_de_salida -> var_dump .)
    VAR_EXPORT      reduce using rule 61 (expresiones_de_salida -> var_dump .)
    IF              reduce using rule 61 (expresiones_de_salida -> var_dump .)
    WHILE           reduce using rule 61 (expresiones_de_salida -> var_dump .)
    $end            reduce using rule 61 (expresiones_de_salida -> var_dump .)
    RCURLY          reduce using rule 61 (expresiones_de_salida -> var_dump .)
    ENDIF           reduce using rule 61 (expresiones_de_salida -> var_dump .)
    ELSE            reduce using rule 61 (expresiones_de_salida -> var_dump .)
    ELSEIF          reduce using rule 61 (expresiones_de_salida -> var_dump .)
    ENDWHILE        reduce using rule 61 (expresiones_de_salida -> var_dump .)


state 17

    (62) expresiones_de_salida -> print_r .

    FLOAT           reduce using rule 62 (expresiones_de_salida -> print_r .)
    NUMBER          reduce using rule 62 (expresiones_de_salida -> print_r .)
    LPAREN          reduce using rule 62 (expresiones_de_salida -> print_r .)
    VARIABLE        reduce using rule 62 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 62 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 62 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 62 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 62 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 62 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 62 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 62 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 62 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 62 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 62 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 62 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 62 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 62 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 62 (expresiones_de_salida -> print_r .)


state 18

    (63) expresiones_de_salida -> var_export .

    FLOAT           reduce using rule 63 (expresiones_de_salida -> var_export .)
    NUMBER          reduce using rule 63 (expresiones_de_salida -> var_export .)
    LPAREN          reduce using rule 63 (expresiones_de_salida -> var_export .)
    VARIABLE        reduce using rule 63 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 63 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 63 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 63 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 63 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 63 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 63 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 63 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 63 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 63 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 63 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 63 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 63 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 63 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 63 (expresiones_de_salida -> var_export .)


state 19

    (73) estructuras_de_control -> if_structures .

    FLOAT           reduce using rule 73 (estructuras_de_control -> if_structures .)
    NUMBER          reduce using rule 73 (estructuras_de_control -> if_structures .)
    LPAREN          reduce using rule 73 (estructuras_de_control -> if_structures .)
    VARIABLE        reduce using rule 73 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 73 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 73 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 73 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 73 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 73 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 73 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 73 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 73 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 73 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 73 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 73 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 73 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 73 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 73 (estructuras_de_control -> if_structures .)


state 20

    (74) estructuras_de_control -> estructuras_while .

    FLOAT           reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    NUMBER          reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    LPAREN          reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    VARIABLE        reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 74 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 74 (estructuras_de_control -> estructuras_while .)


state 21

    (64) echo -> ECHO . params SEMICOLON
    (65) echo -> ECHO . params_points SEMICOLON
    (52) params -> . param
    (53) params -> . param COMMA params
    (54) params_points -> . param
    (55) params_points -> . param POINT params_points
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    params                         shift and go to state 45
    params_points                  shift and go to state 46
    param                          shift and go to state 47
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 22

    (66) print -> PRINT . param SEMICOLON
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 58
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 23

    (68) var_dump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 24

    (67) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 60


state 25

    (69) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 61


state 26

    (75) if_structures -> if .
    (76) if_structures -> if . else
    (77) if_structures -> if . else_if else
    (78) if_structures -> if . else_if
    (84) else -> . ELSE LCURLY expresiones RCURLY
    (85) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    FLOAT           reduce using rule 75 (if_structures -> if .)
    NUMBER          reduce using rule 75 (if_structures -> if .)
    LPAREN          reduce using rule 75 (if_structures -> if .)
    VARIABLE        reduce using rule 75 (if_structures -> if .)
    VAR             reduce using rule 75 (if_structures -> if .)
    ECHO            reduce using rule 75 (if_structures -> if .)
    PRINT           reduce using rule 75 (if_structures -> if .)
    VAR_DUMP        reduce using rule 75 (if_structures -> if .)
    PRINT_R         reduce using rule 75 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 75 (if_structures -> if .)
    IF              reduce using rule 75 (if_structures -> if .)
    WHILE           reduce using rule 75 (if_structures -> if .)
    $end            reduce using rule 75 (if_structures -> if .)
    RCURLY          reduce using rule 75 (if_structures -> if .)
    ENDIF           reduce using rule 75 (if_structures -> if .)
    ENDWHILE        reduce using rule 75 (if_structures -> if .)
    ELSE            shift and go to state 64
    ELSEIF          shift and go to state 65

  ! ELSE            [ reduce using rule 75 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 75 (if_structures -> if .) ]

    else                           shift and go to state 62
    else_if                        shift and go to state 63

state 27

    (79) if_structures -> if_r . ENDIF SEMICOLON
    (80) if_structures -> if_r . else_r ENDIF SEMICOLON
    (81) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (89) else_r -> . ELSE DOUBLEPOINT expresiones
    (90) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (91) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 66
    ELSE            shift and go to state 69
    ELSEIF          shift and go to state 70

    else_r                         shift and go to state 67
    elseif_r                       shift and go to state 68

state 28

    (92) estructuras_while -> while .

    FLOAT           reduce using rule 92 (estructuras_while -> while .)
    NUMBER          reduce using rule 92 (estructuras_while -> while .)
    LPAREN          reduce using rule 92 (estructuras_while -> while .)
    VARIABLE        reduce using rule 92 (estructuras_while -> while .)
    VAR             reduce using rule 92 (estructuras_while -> while .)
    ECHO            reduce using rule 92 (estructuras_while -> while .)
    PRINT           reduce using rule 92 (estructuras_while -> while .)
    VAR_DUMP        reduce using rule 92 (estructuras_while -> while .)
    PRINT_R         reduce using rule 92 (estructuras_while -> while .)
    VAR_EXPORT      reduce using rule 92 (estructuras_while -> while .)
    IF              reduce using rule 92 (estructuras_while -> while .)
    WHILE           reduce using rule 92 (estructuras_while -> while .)
    $end            reduce using rule 92 (estructuras_while -> while .)
    RCURLY          reduce using rule 92 (estructuras_while -> while .)
    ENDIF           reduce using rule 92 (estructuras_while -> while .)
    ELSE            reduce using rule 92 (estructuras_while -> while .)
    ELSEIF          reduce using rule 92 (estructuras_while -> while .)
    ENDWHILE        reduce using rule 92 (estructuras_while -> while .)


state 29

    (83) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 71


state 30

    (93) while -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 72


state 31

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 32

    (17) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 39

    elemento_numerico              shift and go to state 73

state 33

    (22) operador -> PLUS .

    FLOAT           reduce using rule 22 (operador -> PLUS .)
    NUMBER          reduce using rule 22 (operador -> PLUS .)
    LPAREN          reduce using rule 22 (operador -> PLUS .)
    VARIABLE        reduce using rule 22 (operador -> PLUS .)


state 34

    (23) operador -> MINUS .

    FLOAT           reduce using rule 23 (operador -> MINUS .)
    NUMBER          reduce using rule 23 (operador -> MINUS .)
    LPAREN          reduce using rule 23 (operador -> MINUS .)
    VARIABLE        reduce using rule 23 (operador -> MINUS .)


state 35

    (24) operador -> DIVIDE .

    FLOAT           reduce using rule 24 (operador -> DIVIDE .)
    NUMBER          reduce using rule 24 (operador -> DIVIDE .)
    LPAREN          reduce using rule 24 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 24 (operador -> DIVIDE .)


state 36

    (25) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 25 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 25 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 25 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 25 (operador -> EXPONENTIAL .)


state 37

    (26) operador -> TIMES .

    FLOAT           reduce using rule 26 (operador -> TIMES .)
    NUMBER          reduce using rule 26 (operador -> TIMES .)
    LPAREN          reduce using rule 26 (operador -> TIMES .)
    VARIABLE        reduce using rule 26 (operador -> TIMES .)


state 38

    (20) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

    operador                       shift and go to state 32

state 39

    (21) elemento_numerico -> VARIABLE .

    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    FLOAT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NUMBER          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VARIABLE        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR             reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ECHO            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PRINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR_DUMP        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PRINT_R         reduce using rule 21 (elemento_numerico -> VARIABLE .)
    VAR_EXPORT      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IF              reduce using rule 21 (elemento_numerico -> VARIABLE .)
    WHILE           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    $end            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    RCURLY          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ENDIF           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ELSE            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ELSEIF          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ENDWHILE        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 21 (elemento_numerico -> VARIABLE .)


state 40

    (12) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (70) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (71) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (72) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN

    VARIABLE        shift and go to state 75
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    VAR_EXPORT      shift and go to state 80
    READLINE        shift and go to state 81

    elemento_numerico              shift and go to state 76
    elemento_string                shift and go to state 77
    elemento_logico                shift and go to state 78
    funciones_ingreso_datos        shift and go to state 79

state 41

    (10) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 82


state 42

    (11) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 83


state 43

    (9) var_declarar -> VAR var_asignar .

    FLOAT           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    NUMBER          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    LPAREN          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VARIABLE        reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 9 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 9 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 9 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 9 (var_declarar -> VAR var_asignar .)


state 44

    (12) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON

    EQUALS          shift and go to state 40


state 45

    (64) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 84


state 46

    (65) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 85


state 47

    (52) params -> param .
    (53) params -> param . COMMA params
    (54) params_points -> param .
    (55) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (params -> param .)
    SEMICOLON       reduce using rule 52 (params -> param .)
    COMMA           shift and go to state 86
    POINT           shift and go to state 87

  ! SEMICOLON       [ reduce using rule 54 (params_points -> param .) ]


state 48

    (48) param -> VARIABLE .
    (29) elemento_string -> VARIABLE .
    (21) elemento_numerico -> VARIABLE .
    (35) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 48 (param -> VARIABLE .) ]
  ! POINT           [ reduce using rule 48 (param -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 48 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 48 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]


state 49

    (49) param -> elemento_string .
    (37) elemento_logico -> elemento_string . comparador elemento_string
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    COMMA           reduce using rule 49 (param -> elemento_string .)
    POINT           reduce using rule 49 (param -> elemento_string .)
    SEMICOLON       reduce using rule 49 (param -> elemento_string .)
    RPAREN          reduce using rule 49 (param -> elemento_string .)
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 88

state 50

    (50) param -> elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    COMMA           reduce using rule 50 (param -> elemento_numerico .)
    POINT           reduce using rule 50 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 50 (param -> elemento_numerico .)
    RPAREN          reduce using rule 50 (param -> elemento_numerico .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    operador                       shift and go to state 32
    comparador                     shift and go to state 99

state 51

    (51) param -> elemento_logico .
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    COMMA           reduce using rule 51 (param -> elemento_logico .)
    POINT           reduce using rule 51 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 51 (param -> elemento_logico .)
    RPAREN          reduce using rule 51 (param -> elemento_logico .)
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 52

    (27) elemento_string -> STRING .

    IDENTICAL       reduce using rule 27 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 27 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 27 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 27 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 27 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 27 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 27 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 27 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 27 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 27 (elemento_string -> STRING .)
    COMMA           reduce using rule 27 (elemento_string -> STRING .)
    POINT           reduce using rule 27 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 27 (elemento_string -> STRING .)
    RPAREN          reduce using rule 27 (elemento_string -> STRING .)


state 53

    (28) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 28 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 28 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 28 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 28 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 28 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 28 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 28 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 28 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 28 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 28 (elemento_string -> STRINGCC .)


state 54

    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (34) elemento_logico -> LPAREN . elemento_logico RPAREN
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    VARIABLE        shift and go to state 103
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_numerico              shift and go to state 101
    elemento_logico                shift and go to state 102
    elemento_string                shift and go to state 104

state 55

    (30) elemento_logico -> TRUE .

    IDENTICAL       reduce using rule 30 (elemento_logico -> TRUE .)
    NOTIDENTICAL    reduce using rule 30 (elemento_logico -> TRUE .)
    EQUALSLOGICAL   reduce using rule 30 (elemento_logico -> TRUE .)
    DIFFERENT       reduce using rule 30 (elemento_logico -> TRUE .)
    GREATEREQUAL    reduce using rule 30 (elemento_logico -> TRUE .)
    LESSEQUAL       reduce using rule 30 (elemento_logico -> TRUE .)
    GREATERTHAN     reduce using rule 30 (elemento_logico -> TRUE .)
    LESSTHAN        reduce using rule 30 (elemento_logico -> TRUE .)
    ANDlOGICAL      reduce using rule 30 (elemento_logico -> TRUE .)
    ORLOGICAL       reduce using rule 30 (elemento_logico -> TRUE .)
    COMMA           reduce using rule 30 (elemento_logico -> TRUE .)
    POINT           reduce using rule 30 (elemento_logico -> TRUE .)
    SEMICOLON       reduce using rule 30 (elemento_logico -> TRUE .)
    RPAREN          reduce using rule 30 (elemento_logico -> TRUE .)


state 56

    (31) elemento_logico -> FALSE .

    IDENTICAL       reduce using rule 31 (elemento_logico -> FALSE .)
    NOTIDENTICAL    reduce using rule 31 (elemento_logico -> FALSE .)
    EQUALSLOGICAL   reduce using rule 31 (elemento_logico -> FALSE .)
    DIFFERENT       reduce using rule 31 (elemento_logico -> FALSE .)
    GREATEREQUAL    reduce using rule 31 (elemento_logico -> FALSE .)
    LESSEQUAL       reduce using rule 31 (elemento_logico -> FALSE .)
    GREATERTHAN     reduce using rule 31 (elemento_logico -> FALSE .)
    LESSTHAN        reduce using rule 31 (elemento_logico -> FALSE .)
    ANDlOGICAL      reduce using rule 31 (elemento_logico -> FALSE .)
    ORLOGICAL       reduce using rule 31 (elemento_logico -> FALSE .)
    COMMA           reduce using rule 31 (elemento_logico -> FALSE .)
    POINT           reduce using rule 31 (elemento_logico -> FALSE .)
    SEMICOLON       reduce using rule 31 (elemento_logico -> FALSE .)
    RPAREN          reduce using rule 31 (elemento_logico -> FALSE .)


state 57

    (33) elemento_logico -> NOTLOGICAL . elemento_logico
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 105
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 58

    (66) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 109


state 59

    (68) var_dump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 110
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 60

    (67) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 111
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 61

    (69) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 112
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 62

    (76) if_structures -> if else .

    FLOAT           reduce using rule 76 (if_structures -> if else .)
    NUMBER          reduce using rule 76 (if_structures -> if else .)
    LPAREN          reduce using rule 76 (if_structures -> if else .)
    VARIABLE        reduce using rule 76 (if_structures -> if else .)
    VAR             reduce using rule 76 (if_structures -> if else .)
    ECHO            reduce using rule 76 (if_structures -> if else .)
    PRINT           reduce using rule 76 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 76 (if_structures -> if else .)
    PRINT_R         reduce using rule 76 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 76 (if_structures -> if else .)
    IF              reduce using rule 76 (if_structures -> if else .)
    WHILE           reduce using rule 76 (if_structures -> if else .)
    $end            reduce using rule 76 (if_structures -> if else .)
    RCURLY          reduce using rule 76 (if_structures -> if else .)
    ENDIF           reduce using rule 76 (if_structures -> if else .)
    ELSE            reduce using rule 76 (if_structures -> if else .)
    ELSEIF          reduce using rule 76 (if_structures -> if else .)
    ENDWHILE        reduce using rule 76 (if_structures -> if else .)


state 63

    (77) if_structures -> if else_if . else
    (78) if_structures -> if else_if .
    (87) else_if -> else_if . else_if
    (84) else -> . ELSE LCURLY expresiones RCURLY
    (85) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    FLOAT           reduce using rule 78 (if_structures -> if else_if .)
    NUMBER          reduce using rule 78 (if_structures -> if else_if .)
    LPAREN          reduce using rule 78 (if_structures -> if else_if .)
    VARIABLE        reduce using rule 78 (if_structures -> if else_if .)
    VAR             reduce using rule 78 (if_structures -> if else_if .)
    ECHO            reduce using rule 78 (if_structures -> if else_if .)
    PRINT           reduce using rule 78 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 78 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 78 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 78 (if_structures -> if else_if .)
    IF              reduce using rule 78 (if_structures -> if else_if .)
    WHILE           reduce using rule 78 (if_structures -> if else_if .)
    $end            reduce using rule 78 (if_structures -> if else_if .)
    RCURLY          reduce using rule 78 (if_structures -> if else_if .)
    ENDIF           reduce using rule 78 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 78 (if_structures -> if else_if .)
    ELSE            shift and go to state 64
    ELSEIF          shift and go to state 65

  ! ELSE            [ reduce using rule 78 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 78 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 113
    else                           shift and go to state 114

state 64

    (84) else -> ELSE . LCURLY expresiones RCURLY
    (86) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 115
    IF              shift and go to state 116


state 65

    (85) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 117


state 66

    (79) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 118


state 67

    (80) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 119


state 68

    (81) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (82) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (91) elseif_r -> elseif_r . elseif_r
    (89) else_r -> . ELSE DOUBLEPOINT expresiones
    (90) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (91) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 122
    ELSE            shift and go to state 69
    ELSEIF          shift and go to state 70

    elseif_r                       shift and go to state 120
    else_r                         shift and go to state 121

state 69

    (89) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 123


state 70

    (90) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 124


state 71

    (83) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 125
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 72

    (93) while -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 126
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 73

    (17) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    FLOAT           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NUMBER          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LPAREN          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    VARIABLE        reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    VAR             reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ECHO            reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PRINT           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    VAR_DUMP        reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PRINT_R         reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    VAR_EXPORT      reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    IF              reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    WHILE           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    $end            reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RCURLY          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ENDIF           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ELSE            reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ELSEIF          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ENDWHILE        reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    IDENTICAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

  ! PLUS            [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 32

state 74

    (20) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    FLOAT           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NUMBER          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LPAREN          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    VARIABLE        reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    VAR             reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ECHO            reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    PRINT           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    VAR_DUMP        reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    PRINT_R         reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    VAR_EXPORT      reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IF              reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    WHILE           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    $end            reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RCURLY          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ENDIF           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ELSE            reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ELSEIF          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ENDWHILE        reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 75

    (12) var_asignar -> VARIABLE EQUALS VARIABLE . SEMICOLON
    (21) elemento_numerico -> VARIABLE .
    (29) elemento_string -> VARIABLE .
    (35) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
    SEMICOLON       shift and go to state 127
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 21 (elemento_numerico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]


state 76

    (13) var_asignar -> VARIABLE EQUALS elemento_numerico . SEMICOLON
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 128
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    operador                       shift and go to state 32
    comparador                     shift and go to state 99

state 77

    (14) var_asignar -> VARIABLE EQUALS elemento_string . SEMICOLON
    (37) elemento_logico -> elemento_string . comparador elemento_string
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 129
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 88

state 78

    (15) var_asignar -> VARIABLE EQUALS elemento_logico . SEMICOLON
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 130
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 79

    (16) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos . SEMICOLON

    SEMICOLON       shift and go to state 131


state 80

    (70) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 132


state 81

    (71) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (72) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 133


state 82

    (10) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 134


state 83

    (11) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 135


state 84

    (64) echo -> ECHO params SEMICOLON .

    FLOAT           reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    NUMBER          reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    LPAREN          reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    VARIABLE        reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 64 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 64 (echo -> ECHO params SEMICOLON .)


state 85

    (65) echo -> ECHO params_points SEMICOLON .

    FLOAT           reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    NUMBER          reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    LPAREN          reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    VARIABLE        reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 65 (echo -> ECHO params_points SEMICOLON .)


state 86

    (53) params -> param COMMA . params
    (52) params -> . param
    (53) params -> . param COMMA params
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 136
    params                         shift and go to state 137
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 87

    (55) params_points -> param POINT . params_points
    (54) params_points -> . param
    (55) params_points -> . param POINT params_points
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 138
    params_points                  shift and go to state 139
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50
    elemento_logico                shift and go to state 51

state 88

    (37) elemento_logico -> elemento_string comparador . elemento_string
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    VARIABLE        shift and go to state 141

    elemento_string                shift and go to state 140

state 89

    (38) comparador -> IDENTICAL .

    STRING          reduce using rule 38 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 38 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 38 (comparador -> IDENTICAL .)
    FLOAT           reduce using rule 38 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 38 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 38 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 38 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 38 (comparador -> IDENTICAL .)
    NOTLOGICAL      reduce using rule 38 (comparador -> IDENTICAL .)


state 90

    (39) comparador -> NOTIDENTICAL .

    STRING          reduce using rule 39 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 39 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 39 (comparador -> NOTIDENTICAL .)
    FLOAT           reduce using rule 39 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 39 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 39 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 39 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 39 (comparador -> NOTIDENTICAL .)
    NOTLOGICAL      reduce using rule 39 (comparador -> NOTIDENTICAL .)


state 91

    (40) comparador -> EQUALSLOGICAL .

    STRING          reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    FLOAT           reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 40 (comparador -> EQUALSLOGICAL .)
    NOTLOGICAL      reduce using rule 40 (comparador -> EQUALSLOGICAL .)


state 92

    (41) comparador -> DIFFERENT .

    STRING          reduce using rule 41 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 41 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 41 (comparador -> DIFFERENT .)
    FLOAT           reduce using rule 41 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 41 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 41 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 41 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 41 (comparador -> DIFFERENT .)
    NOTLOGICAL      reduce using rule 41 (comparador -> DIFFERENT .)


state 93

    (42) comparador -> GREATEREQUAL .

    STRING          reduce using rule 42 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 42 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 42 (comparador -> GREATEREQUAL .)
    FLOAT           reduce using rule 42 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 42 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 42 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 42 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 42 (comparador -> GREATEREQUAL .)
    NOTLOGICAL      reduce using rule 42 (comparador -> GREATEREQUAL .)


state 94

    (43) comparador -> LESSEQUAL .

    STRING          reduce using rule 43 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 43 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 43 (comparador -> LESSEQUAL .)
    FLOAT           reduce using rule 43 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 43 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 43 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 43 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 43 (comparador -> LESSEQUAL .)
    NOTLOGICAL      reduce using rule 43 (comparador -> LESSEQUAL .)


state 95

    (44) comparador -> GREATERTHAN .

    STRING          reduce using rule 44 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 44 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 44 (comparador -> GREATERTHAN .)
    FLOAT           reduce using rule 44 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 44 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 44 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 44 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 44 (comparador -> GREATERTHAN .)
    NOTLOGICAL      reduce using rule 44 (comparador -> GREATERTHAN .)


state 96

    (45) comparador -> LESSTHAN .

    STRING          reduce using rule 45 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 45 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 45 (comparador -> LESSTHAN .)
    FLOAT           reduce using rule 45 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 45 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 45 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 45 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 45 (comparador -> LESSTHAN .)
    NOTLOGICAL      reduce using rule 45 (comparador -> LESSTHAN .)


state 97

    (46) comparador -> ANDlOGICAL .

    STRING          reduce using rule 46 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 46 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 46 (comparador -> ANDlOGICAL .)
    FLOAT           reduce using rule 46 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 46 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 46 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 46 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 46 (comparador -> ANDlOGICAL .)
    NOTLOGICAL      reduce using rule 46 (comparador -> ANDlOGICAL .)


state 98

    (47) comparador -> ORLOGICAL .

    STRING          reduce using rule 47 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 47 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 47 (comparador -> ORLOGICAL .)
    FLOAT           reduce using rule 47 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 47 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 47 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 47 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 47 (comparador -> ORLOGICAL .)
    NOTLOGICAL      reduce using rule 47 (comparador -> ORLOGICAL .)


state 99

    (36) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 39

    elemento_numerico              shift and go to state 142

state 100

    (32) elemento_logico -> elemento_logico comparador . elemento_logico
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 143
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 101

    (20) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    operador                       shift and go to state 32
    comparador                     shift and go to state 99

state 102

    (34) elemento_logico -> LPAREN elemento_logico . RPAREN
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 144
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 103

    (21) elemento_numerico -> VARIABLE .
    (35) elemento_logico -> VARIABLE .
    (29) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! RPAREN          [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]


state 104

    (37) elemento_logico -> elemento_string . comparador elemento_string
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 88

state 105

    (33) elemento_logico -> NOTLOGICAL elemento_logico .
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    COMMA           reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .)
    POINT           reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .)
    SEMICOLON       reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RPAREN          reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .)
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

  ! IDENTICAL       [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico .) ]

    comparador                     shift and go to state 100

state 106

    (34) elemento_logico -> LPAREN . elemento_logico RPAREN
    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 102
    elemento_numerico              shift and go to state 145
    elemento_string                shift and go to state 104

state 107

    (35) elemento_logico -> VARIABLE .
    (21) elemento_numerico -> VARIABLE .
    (29) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 35 (elemento_logico -> VARIABLE .)
    POINT           reduce using rule 35 (elemento_logico -> VARIABLE .)
    SEMICOLON       reduce using rule 35 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]


state 108

    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

    comparador                     shift and go to state 99
    operador                       shift and go to state 32

state 109

    (66) print -> PRINT param SEMICOLON .

    FLOAT           reduce using rule 66 (print -> PRINT param SEMICOLON .)
    NUMBER          reduce using rule 66 (print -> PRINT param SEMICOLON .)
    LPAREN          reduce using rule 66 (print -> PRINT param SEMICOLON .)
    VARIABLE        reduce using rule 66 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 66 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 66 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 66 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 66 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 66 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 66 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 66 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 66 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 66 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 66 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 66 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 66 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 66 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 66 (print -> PRINT param SEMICOLON .)


state 110

    (68) var_dump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 146


state 111

    (67) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 147


state 112

    (69) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 148


state 113

    (87) else_if -> else_if else_if .
    (87) else_if -> else_if . else_if
    (85) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FLOAT           reduce using rule 87 (else_if -> else_if else_if .)
    NUMBER          reduce using rule 87 (else_if -> else_if else_if .)
    LPAREN          reduce using rule 87 (else_if -> else_if else_if .)
    VARIABLE        reduce using rule 87 (else_if -> else_if else_if .)
    VAR             reduce using rule 87 (else_if -> else_if else_if .)
    ECHO            reduce using rule 87 (else_if -> else_if else_if .)
    PRINT           reduce using rule 87 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 87 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 87 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 87 (else_if -> else_if else_if .)
    IF              reduce using rule 87 (else_if -> else_if else_if .)
    WHILE           reduce using rule 87 (else_if -> else_if else_if .)
    $end            reduce using rule 87 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 87 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 87 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 87 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 65
    ELSE            shift and go to state 149

  ! ELSE            [ reduce using rule 87 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 87 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 113

state 114

    (77) if_structures -> if else_if else .

    FLOAT           reduce using rule 77 (if_structures -> if else_if else .)
    NUMBER          reduce using rule 77 (if_structures -> if else_if else .)
    LPAREN          reduce using rule 77 (if_structures -> if else_if else .)
    VARIABLE        reduce using rule 77 (if_structures -> if else_if else .)
    VAR             reduce using rule 77 (if_structures -> if else_if else .)
    ECHO            reduce using rule 77 (if_structures -> if else_if else .)
    PRINT           reduce using rule 77 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 77 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 77 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 77 (if_structures -> if else_if else .)
    IF              reduce using rule 77 (if_structures -> if else_if else .)
    WHILE           reduce using rule 77 (if_structures -> if else_if else .)
    $end            reduce using rule 77 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 77 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 77 (if_structures -> if else_if else .)
    ELSE            reduce using rule 77 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 77 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 77 (if_structures -> if else_if else .)


state 115

    (84) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 150
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 116

    (86) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 151


state 117

    (85) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 152
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 118

    (79) if_structures -> if_r ENDIF SEMICOLON .

    FLOAT           reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    NUMBER          reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    LPAREN          reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    VARIABLE        reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 79 (if_structures -> if_r ENDIF SEMICOLON .)


state 119

    (80) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 153


state 120

    (91) elseif_r -> elseif_r elseif_r .
    (91) elseif_r -> elseif_r . elseif_r
    (90) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (91) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 91 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 91 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 70

  ! ELSEIF          [ reduce using rule 91 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 120

state 121

    (81) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 154


state 122

    (82) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 155


state 123

    (89) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 156
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 124

    (90) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 157
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 125

    (83) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (88) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 158
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 126

    (93) while -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (94) while -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 159
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 127

    (12) var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .

    FLOAT           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR             reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ECHO            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_DUMP        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT_R         reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_EXPORT      reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    IF              reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    $end            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    RCURLY          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDIF           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSEIF          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDWHILE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)


state 128

    (13) var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .

    FLOAT           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    NUMBER          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    LPAREN          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VARIABLE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR             reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ECHO            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_DUMP        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT_R         reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_EXPORT      reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    IF              reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    WHILE           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    $end            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    RCURLY          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDIF           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSE            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSEIF          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDWHILE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)


state 129

    (14) var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .

    FLOAT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    NUMBER          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    LPAREN          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VARIABLE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR             reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ECHO            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_DUMP        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT_R         reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_EXPORT      reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    IF              reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    WHILE           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    $end            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    RCURLY          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDIF           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSE            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSEIF          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDWHILE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)


state 130

    (15) var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .

    FLOAT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    NUMBER          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    LPAREN          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VARIABLE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR             reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ECHO            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_DUMP        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT_R         reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_EXPORT      reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    IF              reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    WHILE           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    $end            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    RCURLY          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDIF           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSE            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSEIF          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDWHILE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)


state 131

    (16) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .

    FLOAT           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    NUMBER          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    LPAREN          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VARIABLE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR             reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ECHO            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_DUMP        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT_R         reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_EXPORT      reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    IF              reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    WHILE           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    $end            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    RCURLY          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDIF           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSE            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSEIF          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDWHILE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)


state 132

    (70) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (48) param -> . VARIABLE
    (49) param -> . elemento_string
    (50) param -> . elemento_numerico
    (51) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57

    param                          shift and go to state 160
    elemento_logico                shift and go to state 51
    elemento_string                shift and go to state 49
    elemento_numerico              shift and go to state 50

state 133

    (71) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (72) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 161
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53
    VARIABLE        shift and go to state 141

    elemento_string                shift and go to state 162

state 134

    (10) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    FLOAT           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    NUMBER          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    LPAREN          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VARIABLE        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 135

    (11) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    FLOAT           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    NUMBER          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    LPAREN          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VARIABLE        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 136

    (52) params -> param .
    (53) params -> param . COMMA params

    SEMICOLON       reduce using rule 52 (params -> param .)
    COMMA           shift and go to state 86


state 137

    (53) params -> param COMMA params .

    SEMICOLON       reduce using rule 53 (params -> param COMMA params .)


state 138

    (54) params_points -> param .
    (55) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 54 (params_points -> param .)
    POINT           shift and go to state 87


state 139

    (55) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 55 (params_points -> param POINT params_points .)


state 140

    (37) elemento_logico -> elemento_string comparador elemento_string .

    IDENTICAL       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    NOTIDENTICAL    reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    EQUALSLOGICAL   reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    DIFFERENT       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATEREQUAL    reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSEQUAL       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATERTHAN     reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSTHAN        reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    ANDlOGICAL      reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    ORLOGICAL       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    COMMA           reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)


state 141

    (29) elemento_string -> VARIABLE .

    IDENTICAL       reduce using rule 29 (elemento_string -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 29 (elemento_string -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 29 (elemento_string -> VARIABLE .)
    DIFFERENT       reduce using rule 29 (elemento_string -> VARIABLE .)
    GREATEREQUAL    reduce using rule 29 (elemento_string -> VARIABLE .)
    LESSEQUAL       reduce using rule 29 (elemento_string -> VARIABLE .)
    GREATERTHAN     reduce using rule 29 (elemento_string -> VARIABLE .)
    LESSTHAN        reduce using rule 29 (elemento_string -> VARIABLE .)
    ANDlOGICAL      reduce using rule 29 (elemento_string -> VARIABLE .)
    ORLOGICAL       reduce using rule 29 (elemento_string -> VARIABLE .)
    COMMA           reduce using rule 29 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 29 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 29 (elemento_string -> VARIABLE .)


state 142

    (36) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    IDENTICAL       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    DIFFERENT       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATEREQUAL    reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSEQUAL       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATERTHAN     reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSTHAN        reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ANDlOGICAL      reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ORLOGICAL       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    COMMA           reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

    operador                       shift and go to state 32

state 143

    (32) elemento_logico -> elemento_logico comparador elemento_logico .
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    COMMA           reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .)
    POINT           reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .)
    SEMICOLON       reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RPAREN          reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .)
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

  ! IDENTICAL       [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 32 (elemento_logico -> elemento_logico comparador elemento_logico .) ]

    comparador                     shift and go to state 100

state 144

    (34) elemento_logico -> LPAREN elemento_logico RPAREN .

    IDENTICAL       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    NOTIDENTICAL    reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    EQUALSLOGICAL   reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    DIFFERENT       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    GREATEREQUAL    reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    LESSEQUAL       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    GREATERTHAN     reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    LESSTHAN        reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    ANDlOGICAL      reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    ORLOGICAL       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    COMMA           reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    POINT           reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    SEMICOLON       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    RPAREN          reduce using rule 34 (elemento_logico -> LPAREN elemento_logico RPAREN .)


state 145

    (20) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    RPAREN          shift and go to state 74
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    EXPONENTIAL     shift and go to state 36
    TIMES           shift and go to state 37

    comparador                     shift and go to state 99
    operador                       shift and go to state 32

state 146

    (68) var_dump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 147

    (67) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 148

    (69) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 149

    (86) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 116


state 150

    (84) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 166


state 151

    (86) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 167
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 152

    (85) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 168
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 153

    (80) if_structures -> if_r else_r ENDIF SEMICOLON .

    FLOAT           reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    NUMBER          reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    LPAREN          reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VARIABLE        reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 80 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 154

    (81) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 169


state 155

    (82) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    FLOAT           reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    NUMBER          reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    LPAREN          reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VARIABLE        reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 82 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 156

    (89) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 89 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 157

    (90) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 170
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 158

    (83) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (88) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 171
    DOUBLEPOINT     shift and go to state 172


state 159

    (93) while -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (94) while -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 173
    DOUBLEPOINT     shift and go to state 174


state 160

    (70) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 175


state 161

    (71) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 71 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 162

    (72) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 176


state 163

    (68) var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    FLOAT           reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    NUMBER          reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    LPAREN          reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 68 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 164

    (67) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    FLOAT           reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    NUMBER          reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    LPAREN          reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 67 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 165

    (69) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    FLOAT           reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    NUMBER          reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    LPAREN          reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 69 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 166

    (84) else -> ELSE LCURLY expresiones RCURLY .

    FLOAT           reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    NUMBER          reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    LPAREN          reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 84 (else -> ELSE LCURLY expresiones RCURLY .)


state 167

    (86) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 177
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 168

    (85) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 178


state 169

    (81) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    FLOAT           reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    NUMBER          reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    LPAREN          reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VARIABLE        reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 81 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 170

    (90) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 179


state 171

    (83) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 180
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 172

    (88) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 181
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 173

    (93) while -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 182
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 174

    (94) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 183
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 175

    (70) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (30) elemento_logico -> . TRUE
    (31) elemento_logico -> . FALSE
    (32) elemento_logico -> . elemento_logico comparador elemento_logico
    (33) elemento_logico -> . NOTLOGICAL elemento_logico
    (34) elemento_logico -> . LPAREN elemento_logico RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NOTLOGICAL      shift and go to state 57
    LPAREN          shift and go to state 106
    VARIABLE        shift and go to state 107
    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    STRING          shift and go to state 52
    STRINGCC        shift and go to state 53

    elemento_logico                shift and go to state 184
    elemento_numerico              shift and go to state 108
    elemento_string                shift and go to state 104

state 176

    (72) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 72 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 177

    (86) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 185


state 178

    (85) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 186
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 179

    (90) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 187
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 180

    (83) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 188


state 181

    (88) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 88 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 88 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 88 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 182

    (93) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 189


state 183

    (94) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 190


state 184

    (70) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN
    (32) elemento_logico -> elemento_logico . comparador elemento_logico
    (38) comparador -> . IDENTICAL
    (39) comparador -> . NOTIDENTICAL
    (40) comparador -> . EQUALSLOGICAL
    (41) comparador -> . DIFFERENT
    (42) comparador -> . GREATEREQUAL
    (43) comparador -> . LESSEQUAL
    (44) comparador -> . GREATERTHAN
    (45) comparador -> . LESSTHAN
    (46) comparador -> . ANDlOGICAL
    (47) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 191
    IDENTICAL       shift and go to state 89
    NOTIDENTICAL    shift and go to state 90
    EQUALSLOGICAL   shift and go to state 91
    DIFFERENT       shift and go to state 92
    GREATEREQUAL    shift and go to state 93
    LESSEQUAL       shift and go to state 94
    GREATERTHAN     shift and go to state 95
    LESSTHAN        shift and go to state 96
    ANDlOGICAL      shift and go to state 97
    ORLOGICAL       shift and go to state 98

    comparador                     shift and go to state 100

state 185

    (86) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . elemento_numerico
    (4) expresion -> . var_asignar
    (5) expresion -> . var_declarar
    (6) expresion -> . expresiones_de_salida
    (7) expresion -> . estructuras_de_control
    (8) expresion -> . var_plusminus
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (59) expresiones_de_salida -> . echo
    (60) expresiones_de_salida -> . print
    (61) expresiones_de_salida -> . var_dump
    (62) expresiones_de_salida -> . print_r
    (63) expresiones_de_salida -> . var_export
    (73) estructuras_de_control -> . if_structures
    (74) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (64) echo -> . ECHO params SEMICOLON
    (65) echo -> . ECHO params_points SEMICOLON
    (66) print -> . PRINT param SEMICOLON
    (68) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (67) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (69) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (75) if_structures -> . if
    (76) if_structures -> . if else
    (77) if_structures -> . if else_if else
    (78) if_structures -> . if else_if
    (79) if_structures -> . if_r ENDIF SEMICOLON
    (80) if_structures -> . if_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (92) estructuras_while -> . while
    (83) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (94) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    FLOAT           shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 11
    VARIABLE        shift and go to state 12
    VAR             shift and go to state 13
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 192
    expresion                      shift and go to state 2
    elemento_numerico              shift and go to state 3
    var_asignar                    shift and go to state 4
    var_declarar                   shift and go to state 5
    expresiones_de_salida          shift and go to state 6
    estructuras_de_control         shift and go to state 7
    var_plusminus                  shift and go to state 8
    echo                           shift and go to state 14
    print                          shift and go to state 15
    var_dump                       shift and go to state 16
    print_r                        shift and go to state 17
    var_export                     shift and go to state 18
    if_structures                  shift and go to state 19
    estructuras_while              shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 186

    (85) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 193


state 187

    (90) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 90 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 90 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 90 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 188

    (83) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FLOAT           reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    NUMBER          reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    LPAREN          reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 83 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 189

    (93) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    FLOAT           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    NUMBER          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    LPAREN          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 190

    (94) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 194


state 191

    (70) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 70 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 192

    (86) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 195


state 193

    (85) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FLOAT           reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    NUMBER          reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    LPAREN          reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 85 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 194

    (94) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    FLOAT           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    NUMBER          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    LPAREN          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VARIABLE        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 195

    (86) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FLOAT           reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    NUMBER          reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    LPAREN          reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 86 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 26 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 26 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 63 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 75 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 75 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 75 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 105 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 105 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 105 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 113 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 120 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 143 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 143 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 143 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 143 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 143 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 143 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 143 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 143 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 143 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 47
WARNING: reduce/reduce conflict in state 48 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 48
WARNING: reduce/reduce conflict in state 48 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 48
WARNING: reduce/reduce conflict in state 75 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 75
WARNING: reduce/reduce conflict in state 103 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 103
WARNING: reduce/reduce conflict in state 107 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 107
WARNING: Rule (param -> VARIABLE) is never reduced
