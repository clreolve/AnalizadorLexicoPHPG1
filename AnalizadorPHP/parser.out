Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARROW
    AS
    BREAK
    CASE
    CATCH
    CLASS
    DO
    ENDFOR
    ENDFOREACH
    ENDSWITCH
    EXTENDS
    FINAL
    FOR
    FOREACH
    FUNCTION
    GLOBAL
    ID
    IMPLEMENTS
    INTERFACE
    LBRACKET
    NEW
    OR
    PHPEND
    PHPSTART
    PRIVATE
    PROTECTED
    PUBLIC
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW
    XOR

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> var_asignar
Rule 4     expresion -> var_declarar
Rule 5     expresion -> expresiones_de_salida
Rule 6     expresion -> estructuras_de_control
Rule 7     expresion -> var_plusminus
Rule 8     var_declarar -> VAR var_asignar
Rule 9     var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 10    var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 11    var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON
Rule 12    var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON
Rule 13    var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON
Rule 14    var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON
Rule 15    var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
Rule 16    elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 17    elemento_numerico -> FLOAT
Rule 18    elemento_numerico -> NUMBER
Rule 19    elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 20    elemento_numerico -> VARIABLE
Rule 21    operador -> PLUS
Rule 22    operador -> MINUS
Rule 23    operador -> DIVIDE
Rule 24    operador -> EXPONENTIAL
Rule 25    operador -> TIMES
Rule 26    elemento_string -> STRING
Rule 27    elemento_string -> STRINGCC
Rule 28    elemento_string -> VARIABLE
Rule 29    elemento_logico -> TRUE
Rule 30    elemento_logico -> FALSE
Rule 31    elemento_logico -> elemento_logico comparador elemento_logico
Rule 32    elemento_logico -> NOTLOGICAL elemento_logico
Rule 33    elemento_logico -> LPAREN elemento_logico RPAREN
Rule 34    elemento_logico -> VARIABLE
Rule 35    elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 36    elemento_logico -> elemento_string comparador elemento_string
Rule 37    comparador -> IDENTICAL
Rule 38    comparador -> NOTIDENTICAL
Rule 39    comparador -> EQUALSLOGICAL
Rule 40    comparador -> DIFFERENT
Rule 41    comparador -> GREATEREQUAL
Rule 42    comparador -> LESSEQUAL
Rule 43    comparador -> GREATERTHAN
Rule 44    comparador -> LESSTHAN
Rule 45    comparador -> ANDlOGICAL
Rule 46    comparador -> ORLOGICAL
Rule 47    param -> VARIABLE
Rule 48    param -> elemento_string
Rule 49    param -> elemento_numerico
Rule 50    param -> elemento_logico
Rule 51    params -> param
Rule 52    params -> param COMMA params
Rule 53    params_points -> param
Rule 54    params_points -> param POINT params_points
Rule 55    optional_params -> param
Rule 56    optional_params -> 
Rule 57    optional_params -> param COMMA optional_params
Rule 58    expresiones_de_salida -> echo
Rule 59    expresiones_de_salida -> print
Rule 60    expresiones_de_salida -> var_dump
Rule 61    expresiones_de_salida -> print_r
Rule 62    expresiones_de_salida -> var_export
Rule 63    echo -> ECHO params SEMICOLON
Rule 64    echo -> ECHO params_points SEMICOLON
Rule 65    print -> PRINT param SEMICOLON
Rule 66    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 67    var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 68    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 69    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 70    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 71    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 72    estructuras_de_control -> if_structures
Rule 73    estructuras_de_control -> estructuras_while
Rule 74    if_structures -> if
Rule 75    if_structures -> if else
Rule 76    if_structures -> if else_if else
Rule 77    if_structures -> if else_if
Rule 78    if_structures -> if_r ENDIF SEMICOLON
Rule 79    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 80    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 81    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 82    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 83    else -> ELSE LCURLY expresiones RCURLY
Rule 84    else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 85    else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 86    else_if -> else_if else_if
Rule 87    if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 88    else_r -> ELSE DOUBLEPOINT expresiones
Rule 89    elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 90    elseif_r -> elseif_r elseif_r
Rule 91    estructuras_while -> while
Rule 92    while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 93    while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

Terminals, with rules where they appear

                     : 56
AND                  : 
ANDlOGICAL           : 45
ARROW                : 
AS                   : 
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COMMA                : 52 57 69
DIFFERENT            : 40
DIVIDE               : 23
DO                   : 
DOUBLEPOINT          : 87 88 89 93
ECHO                 : 63 64
ELSE                 : 83 85 88
ELSEIF               : 84 89
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 78 79 80 81
ENDSWITCH            : 
ENDWHILE             : 93
EQUALS               : 11 12 13 14 15
EQUALSLOGICAL        : 39
EXPONENTIAL          : 24
EXTENDS              : 
FALSE                : 30
FINAL                : 
FLOAT                : 17
FOR                  : 
FOREACH              : 
FUNCTION             : 
GLOBAL               : 
GREATEREQUAL         : 41
GREATERTHAN          : 43
ID                   : 
IDENTICAL            : 37
IF                   : 82 85 87
IMPLEMENTS           : 
INTERFACE            : 
LBRACKET             : 
LCURLY               : 82 83 84 85 92
LESSEQUAL            : 42
LESSTHAN             : 44
LPAREN               : 19 33 66 67 68 69 70 71 82 84 85 87 89 92 93
MINUS                : 10 10 22
NEW                  : 
NOTIDENTICAL         : 38
NOTLOGICAL           : 32
NUMBER               : 18
OR                   : 
ORLOGICAL            : 46
PHPEND               : 
PHPSTART             : 
PLUS                 : 9 9 21
POINT                : 54
PRINT                : 65
PRINT_R              : 66
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACKET             : 
RCURLY               : 82 83 84 85 92
READLINE             : 70 71
RETURN               : 
RPAREN               : 19 33 66 67 68 69 70 71 82 84 85 87 89 92 93
SEMICOLON            : 9 10 11 12 13 14 15 63 64 65 66 67 68 78 79 80 81 93
STATIC               : 
STRING               : 26
STRINGCC             : 27
SWITCH               : 
THROW                : 
TIMES                : 25
TRUE                 : 29
VAR                  : 8
VARIABLE             : 9 10 11 11 12 13 14 15 20 28 34 47
VAR_DUMP             : 67
VAR_EXPORT           : 68 69
WHILE                : 92 93
XOR                  : 
error                : 

Nonterminals, with rules where they appear

comparador           : 31 35 36
echo                 : 58
elemento_logico      : 14 31 31 32 33 50 69 82 84 85 87 89 92 93
elemento_numerico    : 12 16 16 19 35 35 49
elemento_string      : 13 36 36 48 71
else                 : 75 76
else_if              : 76 77 86 86
else_r               : 79 80
elseif_r             : 80 81 90 90
estructuras_de_control : 6
estructuras_while    : 73
expresion            : 1 2
expresiones          : 2 82 83 84 85 87 88 89 92 93 0
expresiones_de_salida : 5
funciones_ingreso_datos : 15
if                   : 74 75 76 77
if_r                 : 78 79 80 81
if_structures        : 72
operador             : 16
optional_params      : 57
param                : 51 52 53 54 55 57 65 66 67 68 69
params               : 52 63
params_points        : 54 64
print                : 59
print_r              : 61
var_asignar          : 3 8
var_declarar         : 4
var_dump             : 60
var_export           : 62
var_plusminus        : 7
while                : 91

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 27
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 3

    (3) expresion -> var_asignar .

    VARIABLE        reduce using rule 3 (expresion -> var_asignar .)
    VAR             reduce using rule 3 (expresion -> var_asignar .)
    ECHO            reduce using rule 3 (expresion -> var_asignar .)
    PRINT           reduce using rule 3 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 3 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 3 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 3 (expresion -> var_asignar .)
    IF              reduce using rule 3 (expresion -> var_asignar .)
    WHILE           reduce using rule 3 (expresion -> var_asignar .)
    $end            reduce using rule 3 (expresion -> var_asignar .)
    RCURLY          reduce using rule 3 (expresion -> var_asignar .)
    ENDIF           reduce using rule 3 (expresion -> var_asignar .)
    ELSE            reduce using rule 3 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 3 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 3 (expresion -> var_asignar .)


state 4

    (4) expresion -> var_declarar .

    VARIABLE        reduce using rule 4 (expresion -> var_declarar .)
    VAR             reduce using rule 4 (expresion -> var_declarar .)
    ECHO            reduce using rule 4 (expresion -> var_declarar .)
    PRINT           reduce using rule 4 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 4 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_declarar .)
    IF              reduce using rule 4 (expresion -> var_declarar .)
    WHILE           reduce using rule 4 (expresion -> var_declarar .)
    $end            reduce using rule 4 (expresion -> var_declarar .)
    RCURLY          reduce using rule 4 (expresion -> var_declarar .)
    ENDIF           reduce using rule 4 (expresion -> var_declarar .)
    ELSE            reduce using rule 4 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 4 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_declarar .)


state 5

    (5) expresion -> expresiones_de_salida .

    VARIABLE        reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 5 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 5 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 5 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 5 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 5 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 5 (expresion -> expresiones_de_salida .)


state 6

    (6) expresion -> estructuras_de_control .

    VARIABLE        reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 6 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 6 (expresion -> estructuras_de_control .)
    IF              reduce using rule 6 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 6 (expresion -> estructuras_de_control .)
    $end            reduce using rule 6 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 6 (expresion -> estructuras_de_control .)


state 7

    (7) expresion -> var_plusminus .

    VARIABLE        reduce using rule 7 (expresion -> var_plusminus .)
    VAR             reduce using rule 7 (expresion -> var_plusminus .)
    ECHO            reduce using rule 7 (expresion -> var_plusminus .)
    PRINT           reduce using rule 7 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 7 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 7 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 7 (expresion -> var_plusminus .)
    IF              reduce using rule 7 (expresion -> var_plusminus .)
    WHILE           reduce using rule 7 (expresion -> var_plusminus .)
    $end            reduce using rule 7 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 7 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 7 (expresion -> var_plusminus .)
    ELSE            reduce using rule 7 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 7 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 7 (expresion -> var_plusminus .)


state 8

    (11) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (10) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON

    EQUALS          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 9

    (8) var_declarar -> VAR . var_asignar
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON

    VARIABLE        shift and go to state 32

    var_asignar                    shift and go to state 31

state 10

    (58) expresiones_de_salida -> echo .

    VARIABLE        reduce using rule 58 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 58 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 58 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 58 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 58 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 58 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 58 (expresiones_de_salida -> echo .)
    IF              reduce using rule 58 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 58 (expresiones_de_salida -> echo .)
    $end            reduce using rule 58 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 58 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 58 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 58 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 58 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 58 (expresiones_de_salida -> echo .)


state 11

    (59) expresiones_de_salida -> print .

    VARIABLE        reduce using rule 59 (expresiones_de_salida -> print .)
    VAR             reduce using rule 59 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 59 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 59 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 59 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 59 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 59 (expresiones_de_salida -> print .)
    IF              reduce using rule 59 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 59 (expresiones_de_salida -> print .)
    $end            reduce using rule 59 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 59 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 59 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 59 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 59 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 59 (expresiones_de_salida -> print .)


state 12

    (60) expresiones_de_salida -> var_dump .

    VARIABLE        reduce using rule 60 (expresiones_de_salida -> var_dump .)
    VAR             reduce using rule 60 (expresiones_de_salida -> var_dump .)
    ECHO            reduce using rule 60 (expresiones_de_salida -> var_dump .)
    PRINT           reduce using rule 60 (expresiones_de_salida -> var_dump .)
    VAR_DUMP        reduce using rule 60 (expresiones_de_salida -> var_dump .)
    PRINT_R         reduce using rule 60 (expresiones_de_salida -> var_dump .)
    VAR_EXPORT      reduce using rule 60 (expresiones_de_salida -> var_dump .)
    IF              reduce using rule 60 (expresiones_de_salida -> var_dump .)
    WHILE           reduce using rule 60 (expresiones_de_salida -> var_dump .)
    $end            reduce using rule 60 (expresiones_de_salida -> var_dump .)
    RCURLY          reduce using rule 60 (expresiones_de_salida -> var_dump .)
    ENDIF           reduce using rule 60 (expresiones_de_salida -> var_dump .)
    ELSE            reduce using rule 60 (expresiones_de_salida -> var_dump .)
    ELSEIF          reduce using rule 60 (expresiones_de_salida -> var_dump .)
    ENDWHILE        reduce using rule 60 (expresiones_de_salida -> var_dump .)


state 13

    (61) expresiones_de_salida -> print_r .

    VARIABLE        reduce using rule 61 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 61 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 61 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 61 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 61 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 61 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 61 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 61 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 61 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 61 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 61 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 61 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 61 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 61 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 61 (expresiones_de_salida -> print_r .)


state 14

    (62) expresiones_de_salida -> var_export .

    VARIABLE        reduce using rule 62 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 62 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 62 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 62 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 62 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 62 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 62 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 62 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 62 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 62 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 62 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 62 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 62 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 62 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 62 (expresiones_de_salida -> var_export .)


state 15

    (72) estructuras_de_control -> if_structures .

    VARIABLE        reduce using rule 72 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 72 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 72 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 72 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 72 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 72 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 72 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 72 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 72 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 72 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 72 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 72 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 72 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 72 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 72 (estructuras_de_control -> if_structures .)


state 16

    (73) estructuras_de_control -> estructuras_while .

    VARIABLE        reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 73 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 73 (estructuras_de_control -> estructuras_while .)


state 17

    (63) echo -> ECHO . params SEMICOLON
    (64) echo -> ECHO . params_points SEMICOLON
    (51) params -> . param
    (52) params -> . param COMMA params
    (53) params_points -> . param
    (54) params_points -> . param POINT params_points
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    params                         shift and go to state 33
    params_points                  shift and go to state 34
    param                          shift and go to state 35
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 18

    (65) print -> PRINT . param SEMICOLON
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 48
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 19

    (67) var_dump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 49


state 20

    (66) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 50


state 21

    (68) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 51


state 22

    (74) if_structures -> if .
    (75) if_structures -> if . else
    (76) if_structures -> if . else_if else
    (77) if_structures -> if . else_if
    (83) else -> . ELSE LCURLY expresiones RCURLY
    (84) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (85) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 74 (if_structures -> if .)
    VAR             reduce using rule 74 (if_structures -> if .)
    ECHO            reduce using rule 74 (if_structures -> if .)
    PRINT           reduce using rule 74 (if_structures -> if .)
    VAR_DUMP        reduce using rule 74 (if_structures -> if .)
    PRINT_R         reduce using rule 74 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 74 (if_structures -> if .)
    IF              reduce using rule 74 (if_structures -> if .)
    WHILE           reduce using rule 74 (if_structures -> if .)
    $end            reduce using rule 74 (if_structures -> if .)
    RCURLY          reduce using rule 74 (if_structures -> if .)
    ENDIF           reduce using rule 74 (if_structures -> if .)
    ENDWHILE        reduce using rule 74 (if_structures -> if .)
    ELSE            shift and go to state 54
    ELSEIF          shift and go to state 55

  ! ELSE            [ reduce using rule 74 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 74 (if_structures -> if .) ]

    else                           shift and go to state 52
    else_if                        shift and go to state 53

state 23

    (78) if_structures -> if_r . ENDIF SEMICOLON
    (79) if_structures -> if_r . else_r ENDIF SEMICOLON
    (80) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (88) else_r -> . ELSE DOUBLEPOINT expresiones
    (89) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (90) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 56
    ELSE            shift and go to state 59
    ELSEIF          shift and go to state 60

    else_r                         shift and go to state 57
    elseif_r                       shift and go to state 58

state 24

    (91) estructuras_while -> while .

    VARIABLE        reduce using rule 91 (estructuras_while -> while .)
    VAR             reduce using rule 91 (estructuras_while -> while .)
    ECHO            reduce using rule 91 (estructuras_while -> while .)
    PRINT           reduce using rule 91 (estructuras_while -> while .)
    VAR_DUMP        reduce using rule 91 (estructuras_while -> while .)
    PRINT_R         reduce using rule 91 (estructuras_while -> while .)
    VAR_EXPORT      reduce using rule 91 (estructuras_while -> while .)
    IF              reduce using rule 91 (estructuras_while -> while .)
    WHILE           reduce using rule 91 (estructuras_while -> while .)
    $end            reduce using rule 91 (estructuras_while -> while .)
    RCURLY          reduce using rule 91 (estructuras_while -> while .)
    ENDIF           reduce using rule 91 (estructuras_while -> while .)
    ELSE            reduce using rule 91 (estructuras_while -> while .)
    ELSEIF          reduce using rule 91 (estructuras_while -> while .)
    ENDWHILE        reduce using rule 91 (estructuras_while -> while .)


state 25

    (82) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 61


state 26

    (92) while -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 62


state 27

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 28

    (11) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (12) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (13) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (69) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (70) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (71) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN

    VARIABLE        shift and go to state 63
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    VAR_EXPORT      shift and go to state 68
    READLINE        shift and go to state 69

    elemento_numerico              shift and go to state 64
    elemento_string                shift and go to state 65
    elemento_logico                shift and go to state 66
    funciones_ingreso_datos        shift and go to state 67

state 29

    (9) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 70


state 30

    (10) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 71


state 31

    (8) var_declarar -> VAR var_asignar .

    VARIABLE        reduce using rule 8 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 8 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 8 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 8 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 8 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 8 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 8 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 8 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 8 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 8 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 8 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 8 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 8 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 8 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 8 (var_declarar -> VAR var_asignar .)


state 32

    (11) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON

    EQUALS          shift and go to state 28


state 33

    (63) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 72


state 34

    (64) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 73


state 35

    (51) params -> param .
    (52) params -> param . COMMA params
    (53) params_points -> param .
    (54) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (params -> param .)
    SEMICOLON       reduce using rule 51 (params -> param .)
    COMMA           shift and go to state 74
    POINT           shift and go to state 75

  ! SEMICOLON       [ reduce using rule 53 (params_points -> param .) ]


state 36

    (47) param -> VARIABLE .
    (28) elemento_string -> VARIABLE .
    (20) elemento_numerico -> VARIABLE .
    (34) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 28 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 28 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 20 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 20 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 20 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 47 (param -> VARIABLE .) ]
  ! POINT           [ reduce using rule 47 (param -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 47 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 47 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]


state 37

    (48) param -> elemento_string .
    (36) elemento_logico -> elemento_string . comparador elemento_string
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    COMMA           reduce using rule 48 (param -> elemento_string .)
    POINT           reduce using rule 48 (param -> elemento_string .)
    SEMICOLON       reduce using rule 48 (param -> elemento_string .)
    RPAREN          reduce using rule 48 (param -> elemento_string .)
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 76

state 38

    (49) param -> elemento_numerico .
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    COMMA           reduce using rule 49 (param -> elemento_numerico .)
    POINT           reduce using rule 49 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 49 (param -> elemento_numerico .)
    RPAREN          reduce using rule 49 (param -> elemento_numerico .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    operador                       shift and go to state 87
    comparador                     shift and go to state 88

state 39

    (50) param -> elemento_logico .
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    COMMA           reduce using rule 50 (param -> elemento_logico .)
    POINT           reduce using rule 50 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 50 (param -> elemento_logico .)
    RPAREN          reduce using rule 50 (param -> elemento_logico .)
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 40

    (26) elemento_string -> STRING .

    IDENTICAL       reduce using rule 26 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 26 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 26 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 26 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 26 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 26 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 26 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 26 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 26 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 26 (elemento_string -> STRING .)
    COMMA           reduce using rule 26 (elemento_string -> STRING .)
    POINT           reduce using rule 26 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 26 (elemento_string -> STRING .)
    RPAREN          reduce using rule 26 (elemento_string -> STRING .)


state 41

    (27) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 27 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 27 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 27 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 27 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 27 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 27 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 27 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 27 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 27 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 27 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 27 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 27 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 27 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 27 (elemento_string -> STRINGCC .)


state 42

    (17) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 17 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 17 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 17 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 17 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 17 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 17 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 17 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 17 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 17 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 17 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 17 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 17 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 17 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 17 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 17 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 17 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 17 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 17 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 17 (elemento_numerico -> FLOAT .)


state 43

    (18) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 18 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 18 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 18 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 18 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 18 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 18 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 18 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 18 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 18 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 18 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 18 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 18 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 18 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 18 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 18 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 18 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 18 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 18 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 18 (elemento_numerico -> NUMBER .)


state 44

    (19) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (33) elemento_logico -> LPAREN . elemento_logico RPAREN
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    VARIABLE        shift and go to state 97
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_numerico              shift and go to state 95
    elemento_logico                shift and go to state 96
    elemento_string                shift and go to state 98

state 45

    (29) elemento_logico -> TRUE .

    IDENTICAL       reduce using rule 29 (elemento_logico -> TRUE .)
    NOTIDENTICAL    reduce using rule 29 (elemento_logico -> TRUE .)
    EQUALSLOGICAL   reduce using rule 29 (elemento_logico -> TRUE .)
    DIFFERENT       reduce using rule 29 (elemento_logico -> TRUE .)
    GREATEREQUAL    reduce using rule 29 (elemento_logico -> TRUE .)
    LESSEQUAL       reduce using rule 29 (elemento_logico -> TRUE .)
    GREATERTHAN     reduce using rule 29 (elemento_logico -> TRUE .)
    LESSTHAN        reduce using rule 29 (elemento_logico -> TRUE .)
    ANDlOGICAL      reduce using rule 29 (elemento_logico -> TRUE .)
    ORLOGICAL       reduce using rule 29 (elemento_logico -> TRUE .)
    COMMA           reduce using rule 29 (elemento_logico -> TRUE .)
    POINT           reduce using rule 29 (elemento_logico -> TRUE .)
    SEMICOLON       reduce using rule 29 (elemento_logico -> TRUE .)
    RPAREN          reduce using rule 29 (elemento_logico -> TRUE .)


state 46

    (30) elemento_logico -> FALSE .

    IDENTICAL       reduce using rule 30 (elemento_logico -> FALSE .)
    NOTIDENTICAL    reduce using rule 30 (elemento_logico -> FALSE .)
    EQUALSLOGICAL   reduce using rule 30 (elemento_logico -> FALSE .)
    DIFFERENT       reduce using rule 30 (elemento_logico -> FALSE .)
    GREATEREQUAL    reduce using rule 30 (elemento_logico -> FALSE .)
    LESSEQUAL       reduce using rule 30 (elemento_logico -> FALSE .)
    GREATERTHAN     reduce using rule 30 (elemento_logico -> FALSE .)
    LESSTHAN        reduce using rule 30 (elemento_logico -> FALSE .)
    ANDlOGICAL      reduce using rule 30 (elemento_logico -> FALSE .)
    ORLOGICAL       reduce using rule 30 (elemento_logico -> FALSE .)
    COMMA           reduce using rule 30 (elemento_logico -> FALSE .)
    POINT           reduce using rule 30 (elemento_logico -> FALSE .)
    SEMICOLON       reduce using rule 30 (elemento_logico -> FALSE .)
    RPAREN          reduce using rule 30 (elemento_logico -> FALSE .)


state 47

    (32) elemento_logico -> NOTLOGICAL . elemento_logico
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 99
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 48

    (65) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 103


state 49

    (67) var_dump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 104
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 50

    (66) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 105
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 51

    (68) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 106
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 52

    (75) if_structures -> if else .

    VARIABLE        reduce using rule 75 (if_structures -> if else .)
    VAR             reduce using rule 75 (if_structures -> if else .)
    ECHO            reduce using rule 75 (if_structures -> if else .)
    PRINT           reduce using rule 75 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 75 (if_structures -> if else .)
    PRINT_R         reduce using rule 75 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 75 (if_structures -> if else .)
    IF              reduce using rule 75 (if_structures -> if else .)
    WHILE           reduce using rule 75 (if_structures -> if else .)
    $end            reduce using rule 75 (if_structures -> if else .)
    RCURLY          reduce using rule 75 (if_structures -> if else .)
    ENDIF           reduce using rule 75 (if_structures -> if else .)
    ELSE            reduce using rule 75 (if_structures -> if else .)
    ELSEIF          reduce using rule 75 (if_structures -> if else .)
    ENDWHILE        reduce using rule 75 (if_structures -> if else .)


state 53

    (76) if_structures -> if else_if . else
    (77) if_structures -> if else_if .
    (86) else_if -> else_if . else_if
    (83) else -> . ELSE LCURLY expresiones RCURLY
    (84) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (85) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 77 (if_structures -> if else_if .)
    VAR             reduce using rule 77 (if_structures -> if else_if .)
    ECHO            reduce using rule 77 (if_structures -> if else_if .)
    PRINT           reduce using rule 77 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 77 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 77 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 77 (if_structures -> if else_if .)
    IF              reduce using rule 77 (if_structures -> if else_if .)
    WHILE           reduce using rule 77 (if_structures -> if else_if .)
    $end            reduce using rule 77 (if_structures -> if else_if .)
    RCURLY          reduce using rule 77 (if_structures -> if else_if .)
    ENDIF           reduce using rule 77 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 77 (if_structures -> if else_if .)
    ELSE            shift and go to state 54
    ELSEIF          shift and go to state 55

  ! ELSE            [ reduce using rule 77 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 77 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 107
    else                           shift and go to state 108

state 54

    (83) else -> ELSE . LCURLY expresiones RCURLY
    (85) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 109
    IF              shift and go to state 110


state 55

    (84) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 111


state 56

    (78) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 112


state 57

    (79) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 113


state 58

    (80) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (81) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (90) elseif_r -> elseif_r . elseif_r
    (88) else_r -> . ELSE DOUBLEPOINT expresiones
    (89) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (90) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 116
    ELSE            shift and go to state 59
    ELSEIF          shift and go to state 60

    elseif_r                       shift and go to state 114
    else_r                         shift and go to state 115

state 59

    (88) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 117


state 60

    (89) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 118


state 61

    (82) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 119
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 62

    (92) while -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 120
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 63

    (11) var_asignar -> VARIABLE EQUALS VARIABLE . SEMICOLON
    (20) elemento_numerico -> VARIABLE .
    (28) elemento_string -> VARIABLE .
    (34) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
    SEMICOLON       shift and go to state 121
    PLUS            reduce using rule 20 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 20 (elemento_numerico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]


state 64

    (12) var_asignar -> VARIABLE EQUALS elemento_numerico . SEMICOLON
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 122
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    operador                       shift and go to state 87
    comparador                     shift and go to state 88

state 65

    (13) var_asignar -> VARIABLE EQUALS elemento_string . SEMICOLON
    (36) elemento_logico -> elemento_string . comparador elemento_string
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 123
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 76

state 66

    (14) var_asignar -> VARIABLE EQUALS elemento_logico . SEMICOLON
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 124
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 67

    (15) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos . SEMICOLON

    SEMICOLON       shift and go to state 125


state 68

    (69) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 126


state 69

    (70) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (71) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 127


state 70

    (9) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 128


state 71

    (10) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 129


state 72

    (63) echo -> ECHO params SEMICOLON .

    VARIABLE        reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 63 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 63 (echo -> ECHO params SEMICOLON .)


state 73

    (64) echo -> ECHO params_points SEMICOLON .

    VARIABLE        reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 64 (echo -> ECHO params_points SEMICOLON .)


state 74

    (52) params -> param COMMA . params
    (51) params -> . param
    (52) params -> . param COMMA params
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 130
    params                         shift and go to state 131
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 75

    (54) params_points -> param POINT . params_points
    (53) params_points -> . param
    (54) params_points -> . param POINT params_points
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 132
    params_points                  shift and go to state 133
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38
    elemento_logico                shift and go to state 39

state 76

    (36) elemento_logico -> elemento_string comparador . elemento_string
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    VARIABLE        shift and go to state 135

    elemento_string                shift and go to state 134

state 77

    (37) comparador -> IDENTICAL .

    STRING          reduce using rule 37 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 37 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 37 (comparador -> IDENTICAL .)
    FLOAT           reduce using rule 37 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 37 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 37 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 37 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 37 (comparador -> IDENTICAL .)
    NOTLOGICAL      reduce using rule 37 (comparador -> IDENTICAL .)


state 78

    (38) comparador -> NOTIDENTICAL .

    STRING          reduce using rule 38 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 38 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 38 (comparador -> NOTIDENTICAL .)
    FLOAT           reduce using rule 38 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 38 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 38 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 38 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 38 (comparador -> NOTIDENTICAL .)
    NOTLOGICAL      reduce using rule 38 (comparador -> NOTIDENTICAL .)


state 79

    (39) comparador -> EQUALSLOGICAL .

    STRING          reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    FLOAT           reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 39 (comparador -> EQUALSLOGICAL .)
    NOTLOGICAL      reduce using rule 39 (comparador -> EQUALSLOGICAL .)


state 80

    (40) comparador -> DIFFERENT .

    STRING          reduce using rule 40 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 40 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 40 (comparador -> DIFFERENT .)
    FLOAT           reduce using rule 40 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 40 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 40 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 40 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 40 (comparador -> DIFFERENT .)
    NOTLOGICAL      reduce using rule 40 (comparador -> DIFFERENT .)


state 81

    (41) comparador -> GREATEREQUAL .

    STRING          reduce using rule 41 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 41 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 41 (comparador -> GREATEREQUAL .)
    FLOAT           reduce using rule 41 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 41 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 41 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 41 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 41 (comparador -> GREATEREQUAL .)
    NOTLOGICAL      reduce using rule 41 (comparador -> GREATEREQUAL .)


state 82

    (42) comparador -> LESSEQUAL .

    STRING          reduce using rule 42 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 42 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 42 (comparador -> LESSEQUAL .)
    FLOAT           reduce using rule 42 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 42 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 42 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 42 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 42 (comparador -> LESSEQUAL .)
    NOTLOGICAL      reduce using rule 42 (comparador -> LESSEQUAL .)


state 83

    (43) comparador -> GREATERTHAN .

    STRING          reduce using rule 43 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 43 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 43 (comparador -> GREATERTHAN .)
    FLOAT           reduce using rule 43 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 43 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 43 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 43 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 43 (comparador -> GREATERTHAN .)
    NOTLOGICAL      reduce using rule 43 (comparador -> GREATERTHAN .)


state 84

    (44) comparador -> LESSTHAN .

    STRING          reduce using rule 44 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 44 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 44 (comparador -> LESSTHAN .)
    FLOAT           reduce using rule 44 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 44 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 44 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 44 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 44 (comparador -> LESSTHAN .)
    NOTLOGICAL      reduce using rule 44 (comparador -> LESSTHAN .)


state 85

    (45) comparador -> ANDlOGICAL .

    STRING          reduce using rule 45 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 45 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 45 (comparador -> ANDlOGICAL .)
    FLOAT           reduce using rule 45 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 45 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 45 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 45 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 45 (comparador -> ANDlOGICAL .)
    NOTLOGICAL      reduce using rule 45 (comparador -> ANDlOGICAL .)


state 86

    (46) comparador -> ORLOGICAL .

    STRING          reduce using rule 46 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 46 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 46 (comparador -> ORLOGICAL .)
    FLOAT           reduce using rule 46 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 46 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 46 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 46 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 46 (comparador -> ORLOGICAL .)
    NOTLOGICAL      reduce using rule 46 (comparador -> ORLOGICAL .)


state 87

    (16) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 137
    VARIABLE        shift and go to state 138

    elemento_numerico              shift and go to state 136

state 88

    (35) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 137
    VARIABLE        shift and go to state 138

    elemento_numerico              shift and go to state 139

state 89

    (21) operador -> PLUS .

    FLOAT           reduce using rule 21 (operador -> PLUS .)
    NUMBER          reduce using rule 21 (operador -> PLUS .)
    LPAREN          reduce using rule 21 (operador -> PLUS .)
    VARIABLE        reduce using rule 21 (operador -> PLUS .)


state 90

    (22) operador -> MINUS .

    FLOAT           reduce using rule 22 (operador -> MINUS .)
    NUMBER          reduce using rule 22 (operador -> MINUS .)
    LPAREN          reduce using rule 22 (operador -> MINUS .)
    VARIABLE        reduce using rule 22 (operador -> MINUS .)


state 91

    (23) operador -> DIVIDE .

    FLOAT           reduce using rule 23 (operador -> DIVIDE .)
    NUMBER          reduce using rule 23 (operador -> DIVIDE .)
    LPAREN          reduce using rule 23 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 23 (operador -> DIVIDE .)


state 92

    (24) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 24 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 24 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 24 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 24 (operador -> EXPONENTIAL .)


state 93

    (25) operador -> TIMES .

    FLOAT           reduce using rule 25 (operador -> TIMES .)
    NUMBER          reduce using rule 25 (operador -> TIMES .)
    LPAREN          reduce using rule 25 (operador -> TIMES .)
    VARIABLE        reduce using rule 25 (operador -> TIMES .)


state 94

    (31) elemento_logico -> elemento_logico comparador . elemento_logico
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 140
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 95

    (19) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    operador                       shift and go to state 87
    comparador                     shift and go to state 88

state 96

    (33) elemento_logico -> LPAREN elemento_logico . RPAREN
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 142
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 97

    (20) elemento_numerico -> VARIABLE .
    (34) elemento_logico -> VARIABLE .
    (28) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 20 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)

  ! RPAREN          [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]


state 98

    (36) elemento_logico -> elemento_string . comparador elemento_string
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 76

state 99

    (32) elemento_logico -> NOTLOGICAL elemento_logico .
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    COMMA           reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .)
    POINT           reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .)
    SEMICOLON       reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RPAREN          reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .)
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

  ! IDENTICAL       [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico .) ]

    comparador                     shift and go to state 94

state 100

    (33) elemento_logico -> LPAREN . elemento_logico RPAREN
    (19) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 96
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 98

state 101

    (34) elemento_logico -> VARIABLE .
    (20) elemento_numerico -> VARIABLE .
    (28) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 20 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 34 (elemento_logico -> VARIABLE .)
    POINT           reduce using rule 34 (elemento_logico -> VARIABLE .)
    SEMICOLON       reduce using rule 34 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 20 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 20 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 28 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 28 (elemento_string -> VARIABLE .) ]


state 102

    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES

    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93

    comparador                     shift and go to state 88
    operador                       shift and go to state 87

state 103

    (65) print -> PRINT param SEMICOLON .

    VARIABLE        reduce using rule 65 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 65 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 65 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 65 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 65 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 65 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 65 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 65 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 65 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 65 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 65 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 65 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 65 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 65 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 65 (print -> PRINT param SEMICOLON .)


state 104

    (67) var_dump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 144


state 105

    (66) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 106

    (68) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 146


state 107

    (86) else_if -> else_if else_if .
    (86) else_if -> else_if . else_if
    (84) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (85) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (86) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    VARIABLE        reduce using rule 86 (else_if -> else_if else_if .)
    VAR             reduce using rule 86 (else_if -> else_if else_if .)
    ECHO            reduce using rule 86 (else_if -> else_if else_if .)
    PRINT           reduce using rule 86 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 86 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 86 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 86 (else_if -> else_if else_if .)
    IF              reduce using rule 86 (else_if -> else_if else_if .)
    WHILE           reduce using rule 86 (else_if -> else_if else_if .)
    $end            reduce using rule 86 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 86 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 86 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 86 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 55
    ELSE            shift and go to state 147

  ! ELSE            [ reduce using rule 86 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 86 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 107

state 108

    (76) if_structures -> if else_if else .

    VARIABLE        reduce using rule 76 (if_structures -> if else_if else .)
    VAR             reduce using rule 76 (if_structures -> if else_if else .)
    ECHO            reduce using rule 76 (if_structures -> if else_if else .)
    PRINT           reduce using rule 76 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 76 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 76 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 76 (if_structures -> if else_if else .)
    IF              reduce using rule 76 (if_structures -> if else_if else .)
    WHILE           reduce using rule 76 (if_structures -> if else_if else .)
    $end            reduce using rule 76 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 76 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 76 (if_structures -> if else_if else .)
    ELSE            reduce using rule 76 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 76 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 76 (if_structures -> if else_if else .)


state 109

    (83) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 148
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 110

    (85) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 149


state 111

    (84) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 150
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 112

    (78) if_structures -> if_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 78 (if_structures -> if_r ENDIF SEMICOLON .)


state 113

    (79) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 151


state 114

    (90) elseif_r -> elseif_r elseif_r .
    (90) elseif_r -> elseif_r . elseif_r
    (89) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (90) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 90 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 90 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 60

  ! ELSEIF          [ reduce using rule 90 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 114

state 115

    (80) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 152


state 116

    (81) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 153


state 117

    (88) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 154
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 118

    (89) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 155
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 119

    (82) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (87) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 156
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 120

    (92) while -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (93) while -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 157
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 121

    (11) var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR             reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ECHO            reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_DUMP        reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT_R         reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_EXPORT      reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    IF              reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    $end            reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    RCURLY          reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDIF           reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSEIF          reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDWHILE        reduce using rule 11 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)


state 122

    (12) var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .

    VARIABLE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR             reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ECHO            reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT           reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_DUMP        reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT_R         reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_EXPORT      reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    IF              reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    WHILE           reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    $end            reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    RCURLY          reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDIF           reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSE            reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSEIF          reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDWHILE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)


state 123

    (13) var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .

    VARIABLE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR             reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ECHO            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_DUMP        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT_R         reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_EXPORT      reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    IF              reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    WHILE           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    $end            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    RCURLY          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDIF           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSE            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSEIF          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDWHILE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)


state 124

    (14) var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .

    VARIABLE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR             reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ECHO            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_DUMP        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT_R         reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_EXPORT      reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    IF              reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    WHILE           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    $end            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    RCURLY          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDIF           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSE            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSEIF          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDWHILE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)


state 125

    (15) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .

    VARIABLE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR             reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ECHO            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_DUMP        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT_R         reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_EXPORT      reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    IF              reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    WHILE           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    $end            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    RCURLY          reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDIF           reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSE            reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSEIF          reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDWHILE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)


state 126

    (69) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (47) param -> . VARIABLE
    (48) param -> . elemento_string
    (49) param -> . elemento_numerico
    (50) param -> . elemento_logico
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string

    VARIABLE        shift and go to state 36
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47

    param                          shift and go to state 158
    elemento_logico                shift and go to state 39
    elemento_string                shift and go to state 37
    elemento_numerico              shift and go to state 38

state 127

    (70) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (71) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 159
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41
    VARIABLE        shift and go to state 135

    elemento_string                shift and go to state 160

state 128

    (9) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    VARIABLE        reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 9 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 129

    (10) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    VARIABLE        reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 10 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 130

    (51) params -> param .
    (52) params -> param . COMMA params

    SEMICOLON       reduce using rule 51 (params -> param .)
    COMMA           shift and go to state 74


state 131

    (52) params -> param COMMA params .

    SEMICOLON       reduce using rule 52 (params -> param COMMA params .)


state 132

    (53) params_points -> param .
    (54) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 53 (params_points -> param .)
    POINT           shift and go to state 75


state 133

    (54) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 54 (params_points -> param POINT params_points .)


state 134

    (36) elemento_logico -> elemento_string comparador elemento_string .

    IDENTICAL       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    NOTIDENTICAL    reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    EQUALSLOGICAL   reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    DIFFERENT       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATEREQUAL    reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSEQUAL       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATERTHAN     reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSTHAN        reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    ANDlOGICAL      reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    ORLOGICAL       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    COMMA           reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)


state 135

    (28) elemento_string -> VARIABLE .

    IDENTICAL       reduce using rule 28 (elemento_string -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 28 (elemento_string -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_string -> VARIABLE .)
    DIFFERENT       reduce using rule 28 (elemento_string -> VARIABLE .)
    GREATEREQUAL    reduce using rule 28 (elemento_string -> VARIABLE .)
    LESSEQUAL       reduce using rule 28 (elemento_string -> VARIABLE .)
    GREATERTHAN     reduce using rule 28 (elemento_string -> VARIABLE .)
    LESSTHAN        reduce using rule 28 (elemento_string -> VARIABLE .)
    ANDlOGICAL      reduce using rule 28 (elemento_string -> VARIABLE .)
    ORLOGICAL       reduce using rule 28 (elemento_string -> VARIABLE .)
    COMMA           reduce using rule 28 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 28 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 28 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 28 (elemento_string -> VARIABLE .)


state 136

    (16) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    IDENTICAL       reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93

  ! PLUS            [ reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 16 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 87

state 137

    (19) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    LPAREN          shift and go to state 137
    VARIABLE        shift and go to state 138

    elemento_numerico              shift and go to state 161

state 138

    (20) elemento_numerico -> VARIABLE .

    PLUS            reduce using rule 20 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 20 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 20 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 20 (elemento_numerico -> VARIABLE .)


state 139

    (35) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES

    IDENTICAL       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    DIFFERENT       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATEREQUAL    reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSEQUAL       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATERTHAN     reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSTHAN        reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ANDlOGICAL      reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ORLOGICAL       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    COMMA           reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93

    operador                       shift and go to state 87

state 140

    (31) elemento_logico -> elemento_logico comparador elemento_logico .
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    COMMA           reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .)
    POINT           reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .)
    SEMICOLON       reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RPAREN          reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .)
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

  ! IDENTICAL       [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 31 (elemento_logico -> elemento_logico comparador elemento_logico .) ]

    comparador                     shift and go to state 94

state 141

    (19) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 19 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 142

    (33) elemento_logico -> LPAREN elemento_logico RPAREN .

    IDENTICAL       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    NOTIDENTICAL    reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    EQUALSLOGICAL   reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    DIFFERENT       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    GREATEREQUAL    reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    LESSEQUAL       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    GREATERTHAN     reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    LESSTHAN        reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    ANDlOGICAL      reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    ORLOGICAL       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    COMMA           reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    POINT           reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    SEMICOLON       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)
    RPAREN          reduce using rule 33 (elemento_logico -> LPAREN elemento_logico RPAREN .)


state 143

    (19) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES

    RPAREN          shift and go to state 141
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93

    comparador                     shift and go to state 88
    operador                       shift and go to state 87

state 144

    (67) var_dump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 162


state 145

    (66) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 146

    (68) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 147

    (85) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 110


state 148

    (83) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 165


state 149

    (85) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 166
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 150

    (84) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 167
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 151

    (79) if_structures -> if_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 79 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 152

    (80) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 168


state 153

    (81) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 81 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 154

    (88) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 88 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 155

    (89) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 169
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 156

    (82) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (87) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 170
    DOUBLEPOINT     shift and go to state 171


state 157

    (92) while -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (93) while -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 172
    DOUBLEPOINT     shift and go to state 173


state 158

    (69) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 174


state 159

    (70) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 70 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 160

    (71) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 175


state 161

    (19) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (16) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (21) operador -> . PLUS
    (22) operador -> . MINUS
    (23) operador -> . DIVIDE
    (24) operador -> . EXPONENTIAL
    (25) operador -> . TIMES

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    DIVIDE          shift and go to state 91
    EXPONENTIAL     shift and go to state 92
    TIMES           shift and go to state 93

    operador                       shift and go to state 87

state 162

    (67) var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 67 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 163

    (66) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 66 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 164

    (68) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 68 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 165

    (83) else -> ELSE LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 83 (else -> ELSE LCURLY expresiones RCURLY .)


state 166

    (85) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 176
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 167

    (84) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 177


state 168

    (80) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 80 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 169

    (89) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 178


state 170

    (82) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 179
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 171

    (87) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 180
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 172

    (92) while -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 181
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 173

    (93) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 182
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 174

    (69) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (29) elemento_logico -> . TRUE
    (30) elemento_logico -> . FALSE
    (31) elemento_logico -> . elemento_logico comparador elemento_logico
    (32) elemento_logico -> . NOTLOGICAL elemento_logico
    (33) elemento_logico -> . LPAREN elemento_logico RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (16) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (17) elemento_numerico -> . FLOAT
    (18) elemento_numerico -> . NUMBER
    (19) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (20) elemento_numerico -> . VARIABLE
    (26) elemento_string -> . STRING
    (27) elemento_string -> . STRINGCC
    (28) elemento_string -> . VARIABLE

    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    NOTLOGICAL      shift and go to state 47
    LPAREN          shift and go to state 100
    VARIABLE        shift and go to state 101
    FLOAT           shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 40
    STRINGCC        shift and go to state 41

    elemento_logico                shift and go to state 183
    elemento_numerico              shift and go to state 102
    elemento_string                shift and go to state 98

state 175

    (71) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 71 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 176

    (85) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 184


state 177

    (84) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 185
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 178

    (89) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 186
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 179

    (82) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 187


state 180

    (87) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 87 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 87 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 87 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 181

    (92) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 188


state 182

    (93) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 189


state 183

    (69) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN
    (31) elemento_logico -> elemento_logico . comparador elemento_logico
    (37) comparador -> . IDENTICAL
    (38) comparador -> . NOTIDENTICAL
    (39) comparador -> . EQUALSLOGICAL
    (40) comparador -> . DIFFERENT
    (41) comparador -> . GREATEREQUAL
    (42) comparador -> . LESSEQUAL
    (43) comparador -> . GREATERTHAN
    (44) comparador -> . LESSTHAN
    (45) comparador -> . ANDlOGICAL
    (46) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 190
    IDENTICAL       shift and go to state 77
    NOTIDENTICAL    shift and go to state 78
    EQUALSLOGICAL   shift and go to state 79
    DIFFERENT       shift and go to state 80
    GREATEREQUAL    shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    ANDlOGICAL      shift and go to state 85
    ORLOGICAL       shift and go to state 86

    comparador                     shift and go to state 94

state 184

    (85) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (11) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (12) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (8) var_declarar -> . VAR var_asignar
    (58) expresiones_de_salida -> . echo
    (59) expresiones_de_salida -> . print
    (60) expresiones_de_salida -> . var_dump
    (61) expresiones_de_salida -> . print_r
    (62) expresiones_de_salida -> . var_export
    (72) estructuras_de_control -> . if_structures
    (73) estructuras_de_control -> . estructuras_while
    (9) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (10) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (63) echo -> . ECHO params SEMICOLON
    (64) echo -> . ECHO params_points SEMICOLON
    (65) print -> . PRINT param SEMICOLON
    (67) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (66) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (68) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (74) if_structures -> . if
    (75) if_structures -> . if else
    (76) if_structures -> . if else_if else
    (77) if_structures -> . if else_if
    (78) if_structures -> . if_r ENDIF SEMICOLON
    (79) if_structures -> . if_r else_r ENDIF SEMICOLON
    (80) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (81) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (91) estructuras_while -> . while
    (82) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (93) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 8
    VAR             shift and go to state 9
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VAR_DUMP        shift and go to state 19
    PRINT_R         shift and go to state 20
    VAR_EXPORT      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    expresiones                    shift and go to state 191
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    echo                           shift and go to state 10
    print                          shift and go to state 11
    var_dump                       shift and go to state 12
    print_r                        shift and go to state 13
    var_export                     shift and go to state 14
    if_structures                  shift and go to state 15
    estructuras_while              shift and go to state 16
    if                             shift and go to state 22
    if_r                           shift and go to state 23
    while                          shift and go to state 24

state 185

    (84) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 192


state 186

    (89) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 89 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 89 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 89 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 187

    (82) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 82 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 188

    (92) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 92 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 189

    (93) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 193


state 190

    (69) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 69 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 191

    (85) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 194


state 192

    (84) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 84 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 193

    (93) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    VARIABLE        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 93 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 194

    (85) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 85 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 53 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 99 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 99 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 99 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 107 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 107 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 140 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 140 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 140 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 140 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 140 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 140 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 140 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 140 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 140 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 35 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 35
WARNING: reduce/reduce conflict in state 36 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 36
WARNING: reduce/reduce conflict in state 63 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 63
WARNING: reduce/reduce conflict in state 97 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 97
WARNING: reduce/reduce conflict in state 97 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 97
WARNING: reduce/reduce conflict in state 101 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 101
WARNING: reduce/reduce conflict in state 101 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 101
WARNING: Rule (param -> VARIABLE) is never reduced
