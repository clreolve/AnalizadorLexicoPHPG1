Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    CASE
    CATCH
    CLASS
    DO
    ENDFOR
    ENDFOREACH
    ENDSWITCH
    EXTENDS
    FINAL
    FOR
    FOREACH
    FUNCTION
    GLOBAL
    ID
    IMPLEMENTS
    INTERFACE
    OR
    PHPEND
    PHPSTART
    PRIVATE
    PROTECTED
    PUBLIC
    RETURN
    STATIC
    SWITCH
    THROW
    XOR

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> var_asignar
Rule 4     expresion -> var_declarar
Rule 5     expresion -> expresiones_de_salida
Rule 6     expresion -> estructuras_de_control
Rule 7     expresion -> var_plusminus
Rule 8     expresion -> datos_estructurados
Rule 9     var_declarar -> VAR var_asignar
Rule 10    var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 11    var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 12    var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON
Rule 13    var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON
Rule 14    var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON
Rule 15    var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON
Rule 16    var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
Rule 17    elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 18    elemento_numerico -> FLOAT
Rule 19    elemento_numerico -> NUMBER
Rule 20    elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 21    elemento_numerico -> VARIABLE
Rule 22    operador -> PLUS
Rule 23    operador -> MINUS
Rule 24    operador -> DIVIDE
Rule 25    operador -> EXPONENTIAL
Rule 26    operador -> TIMES
Rule 27    elemento_string -> STRING
Rule 28    elemento_string -> STRINGCC
Rule 29    elemento_string -> VARIABLE
Rule 30    elemento_logico -> elemento_logico_pri
Rule 31    elemento_logico -> elemento_logico_pri comparador elemento_logico_pri
Rule 32    elemento_logico -> NOTLOGICAL elemento_logico_pri
Rule 33    elemento_logico -> LPAREN elemento_logico_pri RPAREN
Rule 34    elemento_logico -> VARIABLE
Rule 35    elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 36    elemento_logico -> elemento_string comparador elemento_string
Rule 37    elemento_logico_pri -> TRUE
Rule 38    elemento_logico_pri -> FALSE
Rule 39    comparador -> IDENTICAL
Rule 40    comparador -> NOTIDENTICAL
Rule 41    comparador -> EQUALSLOGICAL
Rule 42    comparador -> DIFFERENT
Rule 43    comparador -> GREATEREQUAL
Rule 44    comparador -> LESSEQUAL
Rule 45    comparador -> GREATERTHAN
Rule 46    comparador -> LESSTHAN
Rule 47    comparador -> ANDlOGICAL
Rule 48    comparador -> ORLOGICAL
Rule 49    param -> VARIABLE
Rule 50    param -> elemento_string
Rule 51    param -> elemento_numerico
Rule 52    param -> elemento_logico
Rule 53    params -> param
Rule 54    params -> param COMMA params
Rule 55    params_points -> param
Rule 56    params_points -> param POINT params_points
Rule 57    optional_params -> param
Rule 58    optional_params -> 
Rule 59    optional_params -> param COMMA optional_params
Rule 60    expresiones_de_salida -> echo
Rule 61    expresiones_de_salida -> print
Rule 62    expresiones_de_salida -> var_dump
Rule 63    expresiones_de_salida -> print_r
Rule 64    expresiones_de_salida -> var_export
Rule 65    echo -> ECHO params SEMICOLON
Rule 66    echo -> ECHO params_points SEMICOLON
Rule 67    print -> PRINT param SEMICOLON
Rule 68    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 69    var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 70    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 71    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 72    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 73    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 74    estructuras_de_control -> if_structures
Rule 75    estructuras_de_control -> estructuras_while
Rule 76    if_structures -> if
Rule 77    if_structures -> if else
Rule 78    if_structures -> if else_if else
Rule 79    if_structures -> if else_if
Rule 80    if_structures -> if_r ENDIF SEMICOLON
Rule 81    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 82    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 83    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 84    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 85    else -> ELSE LCURLY expresiones RCURLY
Rule 86    else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 87    else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 88    else_if -> else_if else_if
Rule 89    if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 90    else_r -> ELSE DOUBLEPOINT expresiones
Rule 91    elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 92    elseif_r -> elseif_r elseif_r
Rule 93    estructuras_while -> while
Rule 94    while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 95    while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
Rule 96    datos_estructurados -> map
Rule 97    datos_estructurados -> vector
Rule 98    datos_estructurados -> set
Rule 99    map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
Rule 100   clave_valor -> elemento_string ARROW elemento_string
Rule 101   clave_valor -> elemento_string ARROW NUMBER
Rule 102   clave_valor -> NUMBER ARROW elemento_string
Rule 103   clave_valor -> NUMBER ARROW NUMBER
Rule 104   clave_valor -> NUMBER ARROW elemento_logico_pri
Rule 105   clave_valor -> elemento_string ARROW elemento_logico_pri
Rule 106   todos_clave_valor -> clave_valor
Rule 107   todos_clave_valor -> clave_valor COMMA todos_clave_valor
Rule 108   vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
Rule 109   datos -> FLOAT
Rule 110   datos -> NUMBER
Rule 111   datos -> STRING
Rule 112   datos -> STRINGCC
Rule 113   datos -> elemento_logico_pri
Rule 114   llenar -> datos
Rule 115   llenar -> datos COMMA llenar
Rule 116   set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON

Terminals, with rules where they appear

                     : 58
AND                  : 
ANDlOGICAL           : 47
ARROW                : 100 101 102 103 104 105
AS                   : 
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COMMA                : 54 59 71 107 115
DIFFERENT            : 42
DIVIDE               : 24
DO                   : 
DOUBLEPOINT          : 89 90 91 95
ECHO                 : 65 66
ELSE                 : 85 87 90
ELSEIF               : 86 91
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 80 81 82 83
ENDSWITCH            : 
ENDWHILE             : 95
EQUALS               : 12 13 14 15 16 99 108 116
EQUALSLOGICAL        : 41
EXPONENTIAL          : 25
EXTENDS              : 
FALSE                : 38
FINAL                : 
FLOAT                : 18 109
FOR                  : 
FOREACH              : 
FUNCTION             : 
GLOBAL               : 
GREATEREQUAL         : 43
GREATERTHAN          : 45
ID                   : 
IDENTICAL            : 39
IF                   : 84 87 89
IMPLEMENTS           : 
INTERFACE            : 
LBRACKET             : 99 108 116
LCURLY               : 84 85 86 87 94
LESSEQUAL            : 44
LESSTHAN             : 46
LPAREN               : 20 33 68 69 70 71 72 73 84 86 87 89 91 94 95 99 108 116
MAP                  : 99
MINUS                : 11 11 23
NEW                  : 99 108 116
NOTIDENTICAL         : 40
NOTLOGICAL           : 32
NUMBER               : 19 101 102 103 103 104 110
OR                   : 
ORLOGICAL            : 48
PHPEND               : 
PHPSTART             : 
PLUS                 : 10 10 22
POINT                : 56
PRINT                : 67
PRINT_R              : 68
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACKET             : 99 108 116
RCURLY               : 84 85 86 87 94
READLINE             : 72 73
RETURN               : 
RPAREN               : 20 33 68 69 70 71 72 73 84 86 87 89 91 94 95 99 108 116
SEMICOLON            : 10 11 12 13 14 15 16 65 66 67 68 69 70 80 81 82 83 95 99 108 116
SET                  : 116
STATIC               : 
STRING               : 27 111
STRINGCC             : 28 112
SWITCH               : 
THROW                : 
TIMES                : 26
TRUE                 : 37
VAR                  : 9
VARIABLE             : 10 11 12 12 13 14 15 16 21 29 34 49 99 108 116
VAR_DUMP             : 69
VAR_EXPORT           : 70 71
VECTOR               : 108
WHILE                : 94 95
XOR                  : 
error                : 

Nonterminals, with rules where they appear

clave_valor          : 106 107
comparador           : 31 35 36
datos                : 114 115
datos_estructurados  : 8
echo                 : 60
elemento_logico      : 15 52 71 84 86 87 89 91 94 95
elemento_logico_pri  : 30 31 31 32 33 104 105 113
elemento_numerico    : 13 17 17 20 35 35 51
elemento_string      : 14 36 36 50 73 100 100 101 102 105
else                 : 77 78
else_if              : 78 79 88 88
else_r               : 81 82
elseif_r             : 82 83 92 92
estructuras_de_control : 6
estructuras_while    : 75
expresion            : 1 2
expresiones          : 2 84 85 86 87 89 90 91 94 95 0
expresiones_de_salida : 5
funciones_ingreso_datos : 16
if                   : 76 77 78 79
if_r                 : 80 81 82 83
if_structures        : 74
llenar               : 108 115 116
map                  : 96
operador             : 17
optional_params      : 59
param                : 53 54 55 56 57 59 67 68 69 70 71
params               : 54 65
params_points        : 56 66
print                : 61
print_r              : 63
set                  : 98
todos_clave_valor    : 99 107
var_asignar          : 3 9
var_declarar         : 4
var_dump             : 62
var_export           : 64
var_plusminus        : 7
vector               : 97
while                : 93

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 31
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 3

    (3) expresion -> var_asignar .

    VARIABLE        reduce using rule 3 (expresion -> var_asignar .)
    VAR             reduce using rule 3 (expresion -> var_asignar .)
    ECHO            reduce using rule 3 (expresion -> var_asignar .)
    PRINT           reduce using rule 3 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 3 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 3 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 3 (expresion -> var_asignar .)
    IF              reduce using rule 3 (expresion -> var_asignar .)
    WHILE           reduce using rule 3 (expresion -> var_asignar .)
    $end            reduce using rule 3 (expresion -> var_asignar .)
    RCURLY          reduce using rule 3 (expresion -> var_asignar .)
    ENDIF           reduce using rule 3 (expresion -> var_asignar .)
    ELSE            reduce using rule 3 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 3 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 3 (expresion -> var_asignar .)


state 4

    (4) expresion -> var_declarar .

    VARIABLE        reduce using rule 4 (expresion -> var_declarar .)
    VAR             reduce using rule 4 (expresion -> var_declarar .)
    ECHO            reduce using rule 4 (expresion -> var_declarar .)
    PRINT           reduce using rule 4 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 4 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_declarar .)
    IF              reduce using rule 4 (expresion -> var_declarar .)
    WHILE           reduce using rule 4 (expresion -> var_declarar .)
    $end            reduce using rule 4 (expresion -> var_declarar .)
    RCURLY          reduce using rule 4 (expresion -> var_declarar .)
    ENDIF           reduce using rule 4 (expresion -> var_declarar .)
    ELSE            reduce using rule 4 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 4 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_declarar .)


state 5

    (5) expresion -> expresiones_de_salida .

    VARIABLE        reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 5 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 5 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 5 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 5 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 5 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 5 (expresion -> expresiones_de_salida .)


state 6

    (6) expresion -> estructuras_de_control .

    VARIABLE        reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 6 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 6 (expresion -> estructuras_de_control .)
    IF              reduce using rule 6 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 6 (expresion -> estructuras_de_control .)
    $end            reduce using rule 6 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 6 (expresion -> estructuras_de_control .)


state 7

    (7) expresion -> var_plusminus .

    VARIABLE        reduce using rule 7 (expresion -> var_plusminus .)
    VAR             reduce using rule 7 (expresion -> var_plusminus .)
    ECHO            reduce using rule 7 (expresion -> var_plusminus .)
    PRINT           reduce using rule 7 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 7 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 7 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 7 (expresion -> var_plusminus .)
    IF              reduce using rule 7 (expresion -> var_plusminus .)
    WHILE           reduce using rule 7 (expresion -> var_plusminus .)
    $end            reduce using rule 7 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 7 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 7 (expresion -> var_plusminus .)
    ELSE            reduce using rule 7 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 7 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 7 (expresion -> var_plusminus .)


state 8

    (8) expresion -> datos_estructurados .

    VARIABLE        reduce using rule 8 (expresion -> datos_estructurados .)
    VAR             reduce using rule 8 (expresion -> datos_estructurados .)
    ECHO            reduce using rule 8 (expresion -> datos_estructurados .)
    PRINT           reduce using rule 8 (expresion -> datos_estructurados .)
    VAR_DUMP        reduce using rule 8 (expresion -> datos_estructurados .)
    PRINT_R         reduce using rule 8 (expresion -> datos_estructurados .)
    VAR_EXPORT      reduce using rule 8 (expresion -> datos_estructurados .)
    IF              reduce using rule 8 (expresion -> datos_estructurados .)
    WHILE           reduce using rule 8 (expresion -> datos_estructurados .)
    $end            reduce using rule 8 (expresion -> datos_estructurados .)
    RCURLY          reduce using rule 8 (expresion -> datos_estructurados .)
    ENDIF           reduce using rule 8 (expresion -> datos_estructurados .)
    ELSE            reduce using rule 8 (expresion -> datos_estructurados .)
    ELSEIF          reduce using rule 8 (expresion -> datos_estructurados .)
    ENDWHILE        reduce using rule 8 (expresion -> datos_estructurados .)


state 9

    (12) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (11) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON
    (99) map -> VARIABLE . EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> VARIABLE . EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> VARIABLE . EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON

    EQUALS          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 10

    (9) var_declarar -> VAR . var_asignar
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON

    VARIABLE        shift and go to state 36

    var_asignar                    shift and go to state 35

state 11

    (60) expresiones_de_salida -> echo .

    VARIABLE        reduce using rule 60 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 60 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 60 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 60 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 60 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 60 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 60 (expresiones_de_salida -> echo .)
    IF              reduce using rule 60 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 60 (expresiones_de_salida -> echo .)
    $end            reduce using rule 60 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 60 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 60 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 60 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 60 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 60 (expresiones_de_salida -> echo .)


state 12

    (61) expresiones_de_salida -> print .

    VARIABLE        reduce using rule 61 (expresiones_de_salida -> print .)
    VAR             reduce using rule 61 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 61 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 61 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 61 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 61 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 61 (expresiones_de_salida -> print .)
    IF              reduce using rule 61 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 61 (expresiones_de_salida -> print .)
    $end            reduce using rule 61 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 61 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 61 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 61 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 61 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 61 (expresiones_de_salida -> print .)


state 13

    (62) expresiones_de_salida -> var_dump .

    VARIABLE        reduce using rule 62 (expresiones_de_salida -> var_dump .)
    VAR             reduce using rule 62 (expresiones_de_salida -> var_dump .)
    ECHO            reduce using rule 62 (expresiones_de_salida -> var_dump .)
    PRINT           reduce using rule 62 (expresiones_de_salida -> var_dump .)
    VAR_DUMP        reduce using rule 62 (expresiones_de_salida -> var_dump .)
    PRINT_R         reduce using rule 62 (expresiones_de_salida -> var_dump .)
    VAR_EXPORT      reduce using rule 62 (expresiones_de_salida -> var_dump .)
    IF              reduce using rule 62 (expresiones_de_salida -> var_dump .)
    WHILE           reduce using rule 62 (expresiones_de_salida -> var_dump .)
    $end            reduce using rule 62 (expresiones_de_salida -> var_dump .)
    RCURLY          reduce using rule 62 (expresiones_de_salida -> var_dump .)
    ENDIF           reduce using rule 62 (expresiones_de_salida -> var_dump .)
    ELSE            reduce using rule 62 (expresiones_de_salida -> var_dump .)
    ELSEIF          reduce using rule 62 (expresiones_de_salida -> var_dump .)
    ENDWHILE        reduce using rule 62 (expresiones_de_salida -> var_dump .)


state 14

    (63) expresiones_de_salida -> print_r .

    VARIABLE        reduce using rule 63 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 63 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 63 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 63 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 63 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 63 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 63 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 63 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 63 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 63 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 63 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 63 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 63 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 63 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 63 (expresiones_de_salida -> print_r .)


state 15

    (64) expresiones_de_salida -> var_export .

    VARIABLE        reduce using rule 64 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 64 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 64 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 64 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 64 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 64 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 64 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 64 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 64 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 64 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 64 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 64 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 64 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 64 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 64 (expresiones_de_salida -> var_export .)


state 16

    (74) estructuras_de_control -> if_structures .

    VARIABLE        reduce using rule 74 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 74 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 74 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 74 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 74 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 74 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 74 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 74 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 74 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 74 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 74 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 74 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 74 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 74 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 74 (estructuras_de_control -> if_structures .)


state 17

    (75) estructuras_de_control -> estructuras_while .

    VARIABLE        reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 75 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 75 (estructuras_de_control -> estructuras_while .)


state 18

    (96) datos_estructurados -> map .

    VARIABLE        reduce using rule 96 (datos_estructurados -> map .)
    VAR             reduce using rule 96 (datos_estructurados -> map .)
    ECHO            reduce using rule 96 (datos_estructurados -> map .)
    PRINT           reduce using rule 96 (datos_estructurados -> map .)
    VAR_DUMP        reduce using rule 96 (datos_estructurados -> map .)
    PRINT_R         reduce using rule 96 (datos_estructurados -> map .)
    VAR_EXPORT      reduce using rule 96 (datos_estructurados -> map .)
    IF              reduce using rule 96 (datos_estructurados -> map .)
    WHILE           reduce using rule 96 (datos_estructurados -> map .)
    $end            reduce using rule 96 (datos_estructurados -> map .)
    RCURLY          reduce using rule 96 (datos_estructurados -> map .)
    ENDIF           reduce using rule 96 (datos_estructurados -> map .)
    ELSE            reduce using rule 96 (datos_estructurados -> map .)
    ELSEIF          reduce using rule 96 (datos_estructurados -> map .)
    ENDWHILE        reduce using rule 96 (datos_estructurados -> map .)


state 19

    (97) datos_estructurados -> vector .

    VARIABLE        reduce using rule 97 (datos_estructurados -> vector .)
    VAR             reduce using rule 97 (datos_estructurados -> vector .)
    ECHO            reduce using rule 97 (datos_estructurados -> vector .)
    PRINT           reduce using rule 97 (datos_estructurados -> vector .)
    VAR_DUMP        reduce using rule 97 (datos_estructurados -> vector .)
    PRINT_R         reduce using rule 97 (datos_estructurados -> vector .)
    VAR_EXPORT      reduce using rule 97 (datos_estructurados -> vector .)
    IF              reduce using rule 97 (datos_estructurados -> vector .)
    WHILE           reduce using rule 97 (datos_estructurados -> vector .)
    $end            reduce using rule 97 (datos_estructurados -> vector .)
    RCURLY          reduce using rule 97 (datos_estructurados -> vector .)
    ENDIF           reduce using rule 97 (datos_estructurados -> vector .)
    ELSE            reduce using rule 97 (datos_estructurados -> vector .)
    ELSEIF          reduce using rule 97 (datos_estructurados -> vector .)
    ENDWHILE        reduce using rule 97 (datos_estructurados -> vector .)


state 20

    (98) datos_estructurados -> set .

    VARIABLE        reduce using rule 98 (datos_estructurados -> set .)
    VAR             reduce using rule 98 (datos_estructurados -> set .)
    ECHO            reduce using rule 98 (datos_estructurados -> set .)
    PRINT           reduce using rule 98 (datos_estructurados -> set .)
    VAR_DUMP        reduce using rule 98 (datos_estructurados -> set .)
    PRINT_R         reduce using rule 98 (datos_estructurados -> set .)
    VAR_EXPORT      reduce using rule 98 (datos_estructurados -> set .)
    IF              reduce using rule 98 (datos_estructurados -> set .)
    WHILE           reduce using rule 98 (datos_estructurados -> set .)
    $end            reduce using rule 98 (datos_estructurados -> set .)
    RCURLY          reduce using rule 98 (datos_estructurados -> set .)
    ENDIF           reduce using rule 98 (datos_estructurados -> set .)
    ELSE            reduce using rule 98 (datos_estructurados -> set .)
    ELSEIF          reduce using rule 98 (datos_estructurados -> set .)
    ENDWHILE        reduce using rule 98 (datos_estructurados -> set .)


state 21

    (65) echo -> ECHO . params SEMICOLON
    (66) echo -> ECHO . params_points SEMICOLON
    (53) params -> . param
    (54) params -> . param COMMA params
    (55) params_points -> . param
    (56) params_points -> . param POINT params_points
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    params                         shift and go to state 37
    params_points                  shift and go to state 38
    param                          shift and go to state 39
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 22

    (67) print -> PRINT . param SEMICOLON
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 53
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 23

    (69) var_dump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 24

    (68) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 55


state 25

    (70) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 56


state 26

    (76) if_structures -> if .
    (77) if_structures -> if . else
    (78) if_structures -> if . else_if else
    (79) if_structures -> if . else_if
    (85) else -> . ELSE LCURLY expresiones RCURLY
    (86) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 76 (if_structures -> if .)
    VAR             reduce using rule 76 (if_structures -> if .)
    ECHO            reduce using rule 76 (if_structures -> if .)
    PRINT           reduce using rule 76 (if_structures -> if .)
    VAR_DUMP        reduce using rule 76 (if_structures -> if .)
    PRINT_R         reduce using rule 76 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 76 (if_structures -> if .)
    IF              reduce using rule 76 (if_structures -> if .)
    WHILE           reduce using rule 76 (if_structures -> if .)
    $end            reduce using rule 76 (if_structures -> if .)
    RCURLY          reduce using rule 76 (if_structures -> if .)
    ENDIF           reduce using rule 76 (if_structures -> if .)
    ENDWHILE        reduce using rule 76 (if_structures -> if .)
    ELSE            shift and go to state 59
    ELSEIF          shift and go to state 60

  ! ELSE            [ reduce using rule 76 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 76 (if_structures -> if .) ]

    else                           shift and go to state 57
    else_if                        shift and go to state 58

state 27

    (80) if_structures -> if_r . ENDIF SEMICOLON
    (81) if_structures -> if_r . else_r ENDIF SEMICOLON
    (82) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (90) else_r -> . ELSE DOUBLEPOINT expresiones
    (91) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 61
    ELSE            shift and go to state 64
    ELSEIF          shift and go to state 65

    else_r                         shift and go to state 62
    elseif_r                       shift and go to state 63

state 28

    (93) estructuras_while -> while .

    VARIABLE        reduce using rule 93 (estructuras_while -> while .)
    VAR             reduce using rule 93 (estructuras_while -> while .)
    ECHO            reduce using rule 93 (estructuras_while -> while .)
    PRINT           reduce using rule 93 (estructuras_while -> while .)
    VAR_DUMP        reduce using rule 93 (estructuras_while -> while .)
    PRINT_R         reduce using rule 93 (estructuras_while -> while .)
    VAR_EXPORT      reduce using rule 93 (estructuras_while -> while .)
    IF              reduce using rule 93 (estructuras_while -> while .)
    WHILE           reduce using rule 93 (estructuras_while -> while .)
    $end            reduce using rule 93 (estructuras_while -> while .)
    RCURLY          reduce using rule 93 (estructuras_while -> while .)
    ENDIF           reduce using rule 93 (estructuras_while -> while .)
    ELSE            reduce using rule 93 (estructuras_while -> while .)
    ELSEIF          reduce using rule 93 (estructuras_while -> while .)
    ENDWHILE        reduce using rule 93 (estructuras_while -> while .)


state 29

    (84) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 66


state 30

    (94) while -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 67


state 31

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 32

    (12) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (99) map -> VARIABLE EQUALS . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> VARIABLE EQUALS . NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> VARIABLE EQUALS . NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (71) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (72) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (73) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 68
    NEW             shift and go to state 73
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    NOTLOGICAL      shift and go to state 50
    VAR_EXPORT      shift and go to state 74
    READLINE        shift and go to state 75
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_numerico              shift and go to state 69
    elemento_string                shift and go to state 70
    elemento_logico                shift and go to state 71
    funciones_ingreso_datos        shift and go to state 72
    elemento_logico_pri            shift and go to state 49

state 33

    (10) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 76


state 34

    (11) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 77


state 35

    (9) var_declarar -> VAR var_asignar .

    VARIABLE        reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 9 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 9 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 9 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 9 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 9 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 9 (var_declarar -> VAR var_asignar .)


state 36

    (12) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON

    EQUALS          shift and go to state 78


state 37

    (65) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 79


state 38

    (66) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 80


state 39

    (53) params -> param .
    (54) params -> param . COMMA params
    (55) params_points -> param .
    (56) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (params -> param .)
    SEMICOLON       reduce using rule 53 (params -> param .)
    COMMA           shift and go to state 81
    POINT           shift and go to state 82

  ! SEMICOLON       [ reduce using rule 55 (params_points -> param .) ]


state 40

    (49) param -> VARIABLE .
    (29) elemento_string -> VARIABLE .
    (21) elemento_numerico -> VARIABLE .
    (34) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 49 (param -> VARIABLE .) ]
  ! POINT           [ reduce using rule 49 (param -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 49 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 49 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]


state 41

    (50) param -> elemento_string .
    (36) elemento_logico -> elemento_string . comparador elemento_string
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    COMMA           reduce using rule 50 (param -> elemento_string .)
    POINT           reduce using rule 50 (param -> elemento_string .)
    SEMICOLON       reduce using rule 50 (param -> elemento_string .)
    RPAREN          reduce using rule 50 (param -> elemento_string .)
    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    comparador                     shift and go to state 83

state 42

    (51) param -> elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    COMMA           reduce using rule 51 (param -> elemento_numerico .)
    POINT           reduce using rule 51 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 51 (param -> elemento_numerico .)
    RPAREN          reduce using rule 51 (param -> elemento_numerico .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100
    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    operador                       shift and go to state 94
    comparador                     shift and go to state 95

state 43

    (52) param -> elemento_logico .

    COMMA           reduce using rule 52 (param -> elemento_logico .)
    POINT           reduce using rule 52 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 52 (param -> elemento_logico .)
    RPAREN          reduce using rule 52 (param -> elemento_logico .)


state 44

    (27) elemento_string -> STRING .

    IDENTICAL       reduce using rule 27 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 27 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 27 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 27 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 27 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 27 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 27 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 27 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 27 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 27 (elemento_string -> STRING .)
    COMMA           reduce using rule 27 (elemento_string -> STRING .)
    POINT           reduce using rule 27 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 27 (elemento_string -> STRING .)
    RPAREN          reduce using rule 27 (elemento_string -> STRING .)
    ARROW           reduce using rule 27 (elemento_string -> STRING .)
    RBRACKET        reduce using rule 27 (elemento_string -> STRING .)


state 45

    (28) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 28 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 28 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 28 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 28 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 28 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 28 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 28 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 28 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 28 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 28 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 28 (elemento_string -> STRINGCC .)
    ARROW           reduce using rule 28 (elemento_string -> STRINGCC .)
    RBRACKET        reduce using rule 28 (elemento_string -> STRINGCC .)


state 46

    (18) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 18 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 18 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 18 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 18 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 18 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 18 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 18 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 18 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 18 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 18 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 18 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 18 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 18 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 18 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 18 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 18 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 18 (elemento_numerico -> FLOAT .)


state 47

    (19) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 19 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 19 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 19 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 19 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 19 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 19 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 19 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 19 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 19 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 19 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 19 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 19 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 19 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 19 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 19 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 19 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 19 (elemento_numerico -> NUMBER .)


state 48

    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (33) elemento_logico -> LPAREN . elemento_logico_pri RPAREN
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 104
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_numerico              shift and go to state 102
    elemento_logico_pri            shift and go to state 103

state 49

    (30) elemento_logico -> elemento_logico_pri .
    (31) elemento_logico -> elemento_logico_pri . comparador elemento_logico_pri
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    COMMA           reduce using rule 30 (elemento_logico -> elemento_logico_pri .)
    POINT           reduce using rule 30 (elemento_logico -> elemento_logico_pri .)
    SEMICOLON       reduce using rule 30 (elemento_logico -> elemento_logico_pri .)
    RPAREN          reduce using rule 30 (elemento_logico -> elemento_logico_pri .)
    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    comparador                     shift and go to state 105

state 50

    (32) elemento_logico -> NOTLOGICAL . elemento_logico_pri
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_logico_pri            shift and go to state 106

state 51

    (37) elemento_logico_pri -> TRUE .

    IDENTICAL       reduce using rule 37 (elemento_logico_pri -> TRUE .)
    NOTIDENTICAL    reduce using rule 37 (elemento_logico_pri -> TRUE .)
    EQUALSLOGICAL   reduce using rule 37 (elemento_logico_pri -> TRUE .)
    DIFFERENT       reduce using rule 37 (elemento_logico_pri -> TRUE .)
    GREATEREQUAL    reduce using rule 37 (elemento_logico_pri -> TRUE .)
    LESSEQUAL       reduce using rule 37 (elemento_logico_pri -> TRUE .)
    GREATERTHAN     reduce using rule 37 (elemento_logico_pri -> TRUE .)
    LESSTHAN        reduce using rule 37 (elemento_logico_pri -> TRUE .)
    ANDlOGICAL      reduce using rule 37 (elemento_logico_pri -> TRUE .)
    ORLOGICAL       reduce using rule 37 (elemento_logico_pri -> TRUE .)
    COMMA           reduce using rule 37 (elemento_logico_pri -> TRUE .)
    POINT           reduce using rule 37 (elemento_logico_pri -> TRUE .)
    SEMICOLON       reduce using rule 37 (elemento_logico_pri -> TRUE .)
    RPAREN          reduce using rule 37 (elemento_logico_pri -> TRUE .)
    RBRACKET        reduce using rule 37 (elemento_logico_pri -> TRUE .)


state 52

    (38) elemento_logico_pri -> FALSE .

    IDENTICAL       reduce using rule 38 (elemento_logico_pri -> FALSE .)
    NOTIDENTICAL    reduce using rule 38 (elemento_logico_pri -> FALSE .)
    EQUALSLOGICAL   reduce using rule 38 (elemento_logico_pri -> FALSE .)
    DIFFERENT       reduce using rule 38 (elemento_logico_pri -> FALSE .)
    GREATEREQUAL    reduce using rule 38 (elemento_logico_pri -> FALSE .)
    LESSEQUAL       reduce using rule 38 (elemento_logico_pri -> FALSE .)
    GREATERTHAN     reduce using rule 38 (elemento_logico_pri -> FALSE .)
    LESSTHAN        reduce using rule 38 (elemento_logico_pri -> FALSE .)
    ANDlOGICAL      reduce using rule 38 (elemento_logico_pri -> FALSE .)
    ORLOGICAL       reduce using rule 38 (elemento_logico_pri -> FALSE .)
    COMMA           reduce using rule 38 (elemento_logico_pri -> FALSE .)
    POINT           reduce using rule 38 (elemento_logico_pri -> FALSE .)
    SEMICOLON       reduce using rule 38 (elemento_logico_pri -> FALSE .)
    RPAREN          reduce using rule 38 (elemento_logico_pri -> FALSE .)
    RBRACKET        reduce using rule 38 (elemento_logico_pri -> FALSE .)


state 53

    (67) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 107


state 54

    (69) var_dump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 108
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 55

    (68) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 109
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 56

    (70) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 110
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 57

    (77) if_structures -> if else .

    VARIABLE        reduce using rule 77 (if_structures -> if else .)
    VAR             reduce using rule 77 (if_structures -> if else .)
    ECHO            reduce using rule 77 (if_structures -> if else .)
    PRINT           reduce using rule 77 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 77 (if_structures -> if else .)
    PRINT_R         reduce using rule 77 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 77 (if_structures -> if else .)
    IF              reduce using rule 77 (if_structures -> if else .)
    WHILE           reduce using rule 77 (if_structures -> if else .)
    $end            reduce using rule 77 (if_structures -> if else .)
    RCURLY          reduce using rule 77 (if_structures -> if else .)
    ENDIF           reduce using rule 77 (if_structures -> if else .)
    ELSE            reduce using rule 77 (if_structures -> if else .)
    ELSEIF          reduce using rule 77 (if_structures -> if else .)
    ENDWHILE        reduce using rule 77 (if_structures -> if else .)


state 58

    (78) if_structures -> if else_if . else
    (79) if_structures -> if else_if .
    (88) else_if -> else_if . else_if
    (85) else -> . ELSE LCURLY expresiones RCURLY
    (86) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 79 (if_structures -> if else_if .)
    VAR             reduce using rule 79 (if_structures -> if else_if .)
    ECHO            reduce using rule 79 (if_structures -> if else_if .)
    PRINT           reduce using rule 79 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 79 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 79 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 79 (if_structures -> if else_if .)
    IF              reduce using rule 79 (if_structures -> if else_if .)
    WHILE           reduce using rule 79 (if_structures -> if else_if .)
    $end            reduce using rule 79 (if_structures -> if else_if .)
    RCURLY          reduce using rule 79 (if_structures -> if else_if .)
    ENDIF           reduce using rule 79 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 79 (if_structures -> if else_if .)
    ELSE            shift and go to state 59
    ELSEIF          shift and go to state 60

  ! ELSE            [ reduce using rule 79 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 79 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 111
    else                           shift and go to state 112

state 59

    (85) else -> ELSE . LCURLY expresiones RCURLY
    (87) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 113
    IF              shift and go to state 114


state 60

    (86) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 115


state 61

    (80) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 116


state 62

    (81) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 117


state 63

    (82) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (83) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (92) elseif_r -> elseif_r . elseif_r
    (90) else_r -> . ELSE DOUBLEPOINT expresiones
    (91) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 120
    ELSE            shift and go to state 64
    ELSEIF          shift and go to state 65

    elseif_r                       shift and go to state 118
    else_r                         shift and go to state 119

state 64

    (90) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 121


state 65

    (91) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 122


state 66

    (84) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 124
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 67

    (94) while -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 128
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 68

    (12) var_asignar -> VARIABLE EQUALS VARIABLE . SEMICOLON
    (21) elemento_numerico -> VARIABLE .
    (29) elemento_string -> VARIABLE .
    (34) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 129
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 21 (elemento_numerico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 34 (elemento_logico -> VARIABLE .) ]


state 69

    (13) var_asignar -> VARIABLE EQUALS elemento_numerico . SEMICOLON
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 130
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100
    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    operador                       shift and go to state 94
    comparador                     shift and go to state 95

state 70

    (14) var_asignar -> VARIABLE EQUALS elemento_string . SEMICOLON
    (36) elemento_logico -> elemento_string . comparador elemento_string
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 131
    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    comparador                     shift and go to state 83

state 71

    (15) var_asignar -> VARIABLE EQUALS elemento_logico . SEMICOLON

    SEMICOLON       shift and go to state 132


state 72

    (16) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos . SEMICOLON

    SEMICOLON       shift and go to state 133


state 73

    (99) map -> VARIABLE EQUALS NEW . MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> VARIABLE EQUALS NEW . VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> VARIABLE EQUALS NEW . SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON

    MAP             shift and go to state 134
    VECTOR          shift and go to state 135
    SET             shift and go to state 136


state 74

    (71) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 137


state 75

    (72) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (73) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 138


state 76

    (10) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 139


state 77

    (11) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 140


state 78

    (12) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (13) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (16) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (71) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (72) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (73) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 68
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    NOTLOGICAL      shift and go to state 50
    VAR_EXPORT      shift and go to state 74
    READLINE        shift and go to state 75
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_numerico              shift and go to state 69
    elemento_string                shift and go to state 70
    elemento_logico                shift and go to state 71
    funciones_ingreso_datos        shift and go to state 72
    elemento_logico_pri            shift and go to state 49

state 79

    (65) echo -> ECHO params SEMICOLON .

    VARIABLE        reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 65 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 65 (echo -> ECHO params SEMICOLON .)


state 80

    (66) echo -> ECHO params_points SEMICOLON .

    VARIABLE        reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 66 (echo -> ECHO params_points SEMICOLON .)


state 81

    (54) params -> param COMMA . params
    (53) params -> . param
    (54) params -> . param COMMA params
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 141
    params                         shift and go to state 142
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 82

    (56) params_points -> param POINT . params_points
    (55) params_points -> . param
    (56) params_points -> . param POINT params_points
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 143
    params_points                  shift and go to state 144
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico                shift and go to state 43
    elemento_logico_pri            shift and go to state 49

state 83

    (36) elemento_logico -> elemento_string comparador . elemento_string
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146

    elemento_string                shift and go to state 145

state 84

    (39) comparador -> IDENTICAL .

    STRING          reduce using rule 39 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 39 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 39 (comparador -> IDENTICAL .)
    FLOAT           reduce using rule 39 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 39 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 39 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 39 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 39 (comparador -> IDENTICAL .)


state 85

    (40) comparador -> NOTIDENTICAL .

    STRING          reduce using rule 40 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 40 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 40 (comparador -> NOTIDENTICAL .)
    FLOAT           reduce using rule 40 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 40 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 40 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 40 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 40 (comparador -> NOTIDENTICAL .)


state 86

    (41) comparador -> EQUALSLOGICAL .

    STRING          reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    FLOAT           reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 41 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 41 (comparador -> EQUALSLOGICAL .)


state 87

    (42) comparador -> DIFFERENT .

    STRING          reduce using rule 42 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 42 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 42 (comparador -> DIFFERENT .)
    FLOAT           reduce using rule 42 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 42 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 42 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 42 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 42 (comparador -> DIFFERENT .)


state 88

    (43) comparador -> GREATEREQUAL .

    STRING          reduce using rule 43 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 43 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 43 (comparador -> GREATEREQUAL .)
    FLOAT           reduce using rule 43 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 43 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 43 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 43 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 43 (comparador -> GREATEREQUAL .)


state 89

    (44) comparador -> LESSEQUAL .

    STRING          reduce using rule 44 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 44 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 44 (comparador -> LESSEQUAL .)
    FLOAT           reduce using rule 44 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 44 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 44 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 44 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 44 (comparador -> LESSEQUAL .)


state 90

    (45) comparador -> GREATERTHAN .

    STRING          reduce using rule 45 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 45 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 45 (comparador -> GREATERTHAN .)
    FLOAT           reduce using rule 45 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 45 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 45 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 45 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 45 (comparador -> GREATERTHAN .)


state 91

    (46) comparador -> LESSTHAN .

    STRING          reduce using rule 46 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 46 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 46 (comparador -> LESSTHAN .)
    FLOAT           reduce using rule 46 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 46 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 46 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 46 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 46 (comparador -> LESSTHAN .)


state 92

    (47) comparador -> ANDlOGICAL .

    STRING          reduce using rule 47 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 47 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 47 (comparador -> ANDlOGICAL .)
    FLOAT           reduce using rule 47 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 47 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 47 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 47 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 47 (comparador -> ANDlOGICAL .)


state 93

    (48) comparador -> ORLOGICAL .

    STRING          reduce using rule 48 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 48 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 48 (comparador -> ORLOGICAL .)
    FLOAT           reduce using rule 48 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 48 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 48 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 48 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 48 (comparador -> ORLOGICAL .)


state 94

    (17) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 104

    elemento_numerico              shift and go to state 147

state 95

    (35) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 104

    elemento_numerico              shift and go to state 148

state 96

    (22) operador -> PLUS .

    FLOAT           reduce using rule 22 (operador -> PLUS .)
    NUMBER          reduce using rule 22 (operador -> PLUS .)
    LPAREN          reduce using rule 22 (operador -> PLUS .)
    VARIABLE        reduce using rule 22 (operador -> PLUS .)


state 97

    (23) operador -> MINUS .

    FLOAT           reduce using rule 23 (operador -> MINUS .)
    NUMBER          reduce using rule 23 (operador -> MINUS .)
    LPAREN          reduce using rule 23 (operador -> MINUS .)
    VARIABLE        reduce using rule 23 (operador -> MINUS .)


state 98

    (24) operador -> DIVIDE .

    FLOAT           reduce using rule 24 (operador -> DIVIDE .)
    NUMBER          reduce using rule 24 (operador -> DIVIDE .)
    LPAREN          reduce using rule 24 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 24 (operador -> DIVIDE .)


state 99

    (25) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 25 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 25 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 25 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 25 (operador -> EXPONENTIAL .)


state 100

    (26) operador -> TIMES .

    FLOAT           reduce using rule 26 (operador -> TIMES .)
    NUMBER          reduce using rule 26 (operador -> TIMES .)
    LPAREN          reduce using rule 26 (operador -> TIMES .)
    VARIABLE        reduce using rule 26 (operador -> TIMES .)


state 101

    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 104

    elemento_numerico              shift and go to state 102

state 102

    (20) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    RPAREN          shift and go to state 149
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100

    operador                       shift and go to state 94

state 103

    (33) elemento_logico -> LPAREN elemento_logico_pri . RPAREN

    RPAREN          shift and go to state 150


state 104

    (21) elemento_numerico -> VARIABLE .

    RPAREN          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 21 (elemento_numerico -> VARIABLE .)


state 105

    (31) elemento_logico -> elemento_logico_pri comparador . elemento_logico_pri
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_logico_pri            shift and go to state 151

state 106

    (32) elemento_logico -> NOTLOGICAL elemento_logico_pri .

    COMMA           reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    POINT           reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    SEMICOLON       reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    RPAREN          reduce using rule 32 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)


state 107

    (67) print -> PRINT param SEMICOLON .

    VARIABLE        reduce using rule 67 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 67 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 67 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 67 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 67 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 67 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 67 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 67 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 67 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 67 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 67 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 67 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 67 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 67 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 67 (print -> PRINT param SEMICOLON .)


state 108

    (69) var_dump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 152


state 109

    (68) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 153


state 110

    (70) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 154


state 111

    (88) else_if -> else_if else_if .
    (88) else_if -> else_if . else_if
    (86) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (87) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    VARIABLE        reduce using rule 88 (else_if -> else_if else_if .)
    VAR             reduce using rule 88 (else_if -> else_if else_if .)
    ECHO            reduce using rule 88 (else_if -> else_if else_if .)
    PRINT           reduce using rule 88 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 88 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 88 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 88 (else_if -> else_if else_if .)
    IF              reduce using rule 88 (else_if -> else_if else_if .)
    WHILE           reduce using rule 88 (else_if -> else_if else_if .)
    $end            reduce using rule 88 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 88 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 88 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 88 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 60
    ELSE            shift and go to state 155

  ! ELSE            [ reduce using rule 88 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 88 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 111

state 112

    (78) if_structures -> if else_if else .

    VARIABLE        reduce using rule 78 (if_structures -> if else_if else .)
    VAR             reduce using rule 78 (if_structures -> if else_if else .)
    ECHO            reduce using rule 78 (if_structures -> if else_if else .)
    PRINT           reduce using rule 78 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 78 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 78 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 78 (if_structures -> if else_if else .)
    IF              reduce using rule 78 (if_structures -> if else_if else .)
    WHILE           reduce using rule 78 (if_structures -> if else_if else .)
    $end            reduce using rule 78 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 78 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 78 (if_structures -> if else_if else .)
    ELSE            reduce using rule 78 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 78 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 78 (if_structures -> if else_if else .)


state 113

    (85) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 156
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 114

    (87) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 157


state 115

    (86) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 158
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 116

    (80) if_structures -> if_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 80 (if_structures -> if_r ENDIF SEMICOLON .)


state 117

    (81) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 159


state 118

    (92) elseif_r -> elseif_r elseif_r .
    (92) elseif_r -> elseif_r . elseif_r
    (91) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (92) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 92 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 92 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 65

  ! ELSEIF          [ reduce using rule 92 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 118

state 119

    (82) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 160


state 120

    (83) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 161


state 121

    (90) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 162
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 122

    (91) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 163
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 123

    (33) elemento_logico -> LPAREN . elemento_logico_pri RPAREN
    (20) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 101
    VARIABLE        shift and go to state 104

    elemento_logico_pri            shift and go to state 103
    elemento_numerico              shift and go to state 102

state 124

    (84) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (89) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones

    RPAREN          shift and go to state 164


state 125

    (34) elemento_logico -> VARIABLE .
    (21) elemento_numerico -> VARIABLE .
    (29) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 21 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 34 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 21 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 21 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 21 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 29 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 29 (elemento_string -> VARIABLE .) ]


state 126

    (35) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100

    comparador                     shift and go to state 95
    operador                       shift and go to state 94

state 127

    (36) elemento_logico -> elemento_string . comparador elemento_string
    (39) comparador -> . IDENTICAL
    (40) comparador -> . NOTIDENTICAL
    (41) comparador -> . EQUALSLOGICAL
    (42) comparador -> . DIFFERENT
    (43) comparador -> . GREATEREQUAL
    (44) comparador -> . LESSEQUAL
    (45) comparador -> . GREATERTHAN
    (46) comparador -> . LESSTHAN
    (47) comparador -> . ANDlOGICAL
    (48) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 84
    NOTIDENTICAL    shift and go to state 85
    EQUALSLOGICAL   shift and go to state 86
    DIFFERENT       shift and go to state 87
    GREATEREQUAL    shift and go to state 88
    LESSEQUAL       shift and go to state 89
    GREATERTHAN     shift and go to state 90
    LESSTHAN        shift and go to state 91
    ANDlOGICAL      shift and go to state 92
    ORLOGICAL       shift and go to state 93

    comparador                     shift and go to state 83

state 128

    (94) while -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (95) while -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    RPAREN          shift and go to state 165


state 129

    (12) var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR             reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ECHO            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_DUMP        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT_R         reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_EXPORT      reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    IF              reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    $end            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    RCURLY          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDIF           reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSEIF          reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDWHILE        reduce using rule 12 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)


state 130

    (13) var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .

    VARIABLE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR             reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ECHO            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_DUMP        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT_R         reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_EXPORT      reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    IF              reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    WHILE           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    $end            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    RCURLY          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDIF           reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSE            reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSEIF          reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDWHILE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)


state 131

    (14) var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .

    VARIABLE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR             reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ECHO            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_DUMP        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT_R         reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_EXPORT      reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    IF              reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    WHILE           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    $end            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    RCURLY          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDIF           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSE            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSEIF          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDWHILE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)


state 132

    (15) var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .

    VARIABLE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR             reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ECHO            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_DUMP        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT_R         reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_EXPORT      reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    IF              reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    WHILE           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    $end            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    RCURLY          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDIF           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSE            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSEIF          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDWHILE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)


state 133

    (16) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .

    VARIABLE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR             reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ECHO            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_DUMP        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT_R         reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_EXPORT      reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    IF              reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    WHILE           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    $end            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    RCURLY          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDIF           reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSE            reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSEIF          reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDWHILE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)


state 134

    (99) map -> VARIABLE EQUALS NEW MAP . LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 166


state 135

    (108) vector -> VARIABLE EQUALS NEW VECTOR . LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 167


state 136

    (116) set -> VARIABLE EQUALS NEW SET . LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 168


state 137

    (71) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (49) param -> . VARIABLE
    (50) param -> . elemento_string
    (51) param -> . elemento_numerico
    (52) param -> . elemento_logico
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 40
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    LPAREN          shift and go to state 48
    NOTLOGICAL      shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    param                          shift and go to state 169
    elemento_logico                shift and go to state 43
    elemento_string                shift and go to state 41
    elemento_numerico              shift and go to state 42
    elemento_logico_pri            shift and go to state 49

state 138

    (72) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (73) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 170
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146

    elemento_string                shift and go to state 171

state 139

    (10) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    VARIABLE        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 10 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 140

    (11) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    VARIABLE        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 11 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 141

    (53) params -> param .
    (54) params -> param . COMMA params

    SEMICOLON       reduce using rule 53 (params -> param .)
    COMMA           shift and go to state 81


state 142

    (54) params -> param COMMA params .

    SEMICOLON       reduce using rule 54 (params -> param COMMA params .)


state 143

    (55) params_points -> param .
    (56) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 55 (params_points -> param .)
    POINT           shift and go to state 82


state 144

    (56) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 56 (params_points -> param POINT params_points .)


state 145

    (36) elemento_logico -> elemento_string comparador elemento_string .

    COMMA           reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 36 (elemento_logico -> elemento_string comparador elemento_string .)


state 146

    (29) elemento_string -> VARIABLE .

    COMMA           reduce using rule 29 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 29 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 29 (elemento_string -> VARIABLE .)
    ARROW           reduce using rule 29 (elemento_string -> VARIABLE .)
    RBRACKET        reduce using rule 29 (elemento_string -> VARIABLE .)


state 147

    (17) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    IDENTICAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100

  ! PLUS            [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 17 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 94

state 148

    (35) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (17) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (22) operador -> . PLUS
    (23) operador -> . MINUS
    (24) operador -> . DIVIDE
    (25) operador -> . EXPONENTIAL
    (26) operador -> . TIMES

    COMMA           reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 35 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    DIVIDE          shift and go to state 98
    EXPONENTIAL     shift and go to state 99
    TIMES           shift and go to state 100

    operador                       shift and go to state 94

state 149

    (20) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 20 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 150

    (33) elemento_logico -> LPAREN elemento_logico_pri RPAREN .

    COMMA           reduce using rule 33 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    POINT           reduce using rule 33 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    SEMICOLON       reduce using rule 33 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    RPAREN          reduce using rule 33 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)


state 151

    (31) elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .

    COMMA           reduce using rule 31 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    POINT           reduce using rule 31 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    SEMICOLON       reduce using rule 31 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    RPAREN          reduce using rule 31 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)


state 152

    (69) var_dump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 153

    (68) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 154

    (70) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 155

    (87) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 114


state 156

    (85) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 175


state 157

    (87) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 176
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 158

    (86) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 177


state 159

    (81) if_structures -> if_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 81 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 160

    (82) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 178


state 161

    (83) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 83 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 162

    (90) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 90 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 163

    (91) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones

    RPAREN          shift and go to state 179


state 164

    (84) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (89) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 180
    DOUBLEPOINT     shift and go to state 181


state 165

    (94) while -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (95) while -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 182
    DOUBLEPOINT     shift and go to state 183


state 166

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN . LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON

    LBRACKET        shift and go to state 184


state 167

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN . LBRACKET llenar RBRACKET RPAREN SEMICOLON

    LBRACKET        shift and go to state 185


state 168

    (116) set -> VARIABLE EQUALS NEW SET LPAREN . LBRACKET llenar RBRACKET RPAREN SEMICOLON

    LBRACKET        shift and go to state 186


state 169

    (71) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 187


state 170

    (72) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 72 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 171

    (73) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 188


state 172

    (69) var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 69 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 173

    (68) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 68 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 174

    (70) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 70 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 175

    (85) else -> ELSE LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 85 (else -> ELSE LCURLY expresiones RCURLY .)


state 176

    (87) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 189


state 177

    (86) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 190


state 178

    (82) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 82 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 179

    (91) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 191


state 180

    (84) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 192
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 181

    (89) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 193
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 182

    (94) while -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 194
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 183

    (95) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 195
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 184

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET . todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) todos_clave_valor -> . clave_valor
    (107) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (100) clave_valor -> . elemento_string ARROW elemento_string
    (101) clave_valor -> . elemento_string ARROW NUMBER
    (102) clave_valor -> . NUMBER ARROW elemento_string
    (103) clave_valor -> . NUMBER ARROW NUMBER
    (104) clave_valor -> . NUMBER ARROW elemento_logico_pri
    (105) clave_valor -> . elemento_string ARROW elemento_logico_pri
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 199
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146

    todos_clave_valor              shift and go to state 196
    clave_valor                    shift and go to state 197
    elemento_string                shift and go to state 198

state 185

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET . llenar RBRACKET RPAREN SEMICOLON
    (114) llenar -> . datos
    (115) llenar -> . datos COMMA llenar
    (109) datos -> . FLOAT
    (110) datos -> . NUMBER
    (111) datos -> . STRING
    (112) datos -> . STRINGCC
    (113) datos -> . elemento_logico_pri
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 202
    NUMBER          shift and go to state 203
    STRING          shift and go to state 204
    STRINGCC        shift and go to state 205
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    llenar                         shift and go to state 200
    datos                          shift and go to state 201
    elemento_logico_pri            shift and go to state 206

state 186

    (116) set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET . llenar RBRACKET RPAREN SEMICOLON
    (114) llenar -> . datos
    (115) llenar -> . datos COMMA llenar
    (109) datos -> . FLOAT
    (110) datos -> . NUMBER
    (111) datos -> . STRING
    (112) datos -> . STRINGCC
    (113) datos -> . elemento_logico_pri
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 202
    NUMBER          shift and go to state 203
    STRING          shift and go to state 204
    STRINGCC        shift and go to state 205
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    llenar                         shift and go to state 207
    datos                          shift and go to state 201
    elemento_logico_pri            shift and go to state 206

state 187

    (71) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (30) elemento_logico -> . elemento_logico_pri
    (31) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (32) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (33) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (34) elemento_logico -> . VARIABLE
    (35) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (36) elemento_logico -> . elemento_string comparador elemento_string
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE
    (17) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (18) elemento_numerico -> . FLOAT
    (19) elemento_numerico -> . NUMBER
    (20) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (21) elemento_numerico -> . VARIABLE
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 50
    LPAREN          shift and go to state 123
    VARIABLE        shift and go to state 125
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    FLOAT           shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45

    elemento_logico                shift and go to state 208
    elemento_logico_pri            shift and go to state 49
    elemento_numerico              shift and go to state 126
    elemento_string                shift and go to state 127

state 188

    (73) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 73 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 189

    (87) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 209


state 190

    (86) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 210
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 191

    (91) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 211
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 192

    (84) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 212


state 193

    (89) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 89 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 89 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 89 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 194

    (94) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 213


state 195

    (95) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 214


state 196

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 215


state 197

    (106) todos_clave_valor -> clave_valor .
    (107) todos_clave_valor -> clave_valor . COMMA todos_clave_valor

    RBRACKET        reduce using rule 106 (todos_clave_valor -> clave_valor .)
    COMMA           shift and go to state 216


state 198

    (100) clave_valor -> elemento_string . ARROW elemento_string
    (101) clave_valor -> elemento_string . ARROW NUMBER
    (105) clave_valor -> elemento_string . ARROW elemento_logico_pri

    ARROW           shift and go to state 217


state 199

    (102) clave_valor -> NUMBER . ARROW elemento_string
    (103) clave_valor -> NUMBER . ARROW NUMBER
    (104) clave_valor -> NUMBER . ARROW elemento_logico_pri

    ARROW           shift and go to state 218


state 200

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 219


state 201

    (114) llenar -> datos .
    (115) llenar -> datos . COMMA llenar

    RBRACKET        reduce using rule 114 (llenar -> datos .)
    COMMA           shift and go to state 220


state 202

    (109) datos -> FLOAT .

    COMMA           reduce using rule 109 (datos -> FLOAT .)
    RBRACKET        reduce using rule 109 (datos -> FLOAT .)


state 203

    (110) datos -> NUMBER .

    COMMA           reduce using rule 110 (datos -> NUMBER .)
    RBRACKET        reduce using rule 110 (datos -> NUMBER .)


state 204

    (111) datos -> STRING .

    COMMA           reduce using rule 111 (datos -> STRING .)
    RBRACKET        reduce using rule 111 (datos -> STRING .)


state 205

    (112) datos -> STRINGCC .

    COMMA           reduce using rule 112 (datos -> STRINGCC .)
    RBRACKET        reduce using rule 112 (datos -> STRINGCC .)


state 206

    (113) datos -> elemento_logico_pri .

    COMMA           reduce using rule 113 (datos -> elemento_logico_pri .)
    RBRACKET        reduce using rule 113 (datos -> elemento_logico_pri .)


state 207

    (116) set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 221


state 208

    (71) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN

    RPAREN          shift and go to state 222


state 209

    (87) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . datos_estructurados
    (12) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (13) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (9) var_declarar -> . VAR var_asignar
    (60) expresiones_de_salida -> . echo
    (61) expresiones_de_salida -> . print
    (62) expresiones_de_salida -> . var_dump
    (63) expresiones_de_salida -> . print_r
    (64) expresiones_de_salida -> . var_export
    (74) estructuras_de_control -> . if_structures
    (75) estructuras_de_control -> . estructuras_while
    (10) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (11) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (96) datos_estructurados -> . map
    (97) datos_estructurados -> . vector
    (98) datos_estructurados -> . set
    (65) echo -> . ECHO params SEMICOLON
    (66) echo -> . ECHO params_points SEMICOLON
    (67) print -> . PRINT param SEMICOLON
    (69) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (68) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (70) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (76) if_structures -> . if
    (77) if_structures -> . if else
    (78) if_structures -> . if else_if else
    (79) if_structures -> . if else_if
    (80) if_structures -> . if_r ENDIF SEMICOLON
    (81) if_structures -> . if_r else_r ENDIF SEMICOLON
    (82) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (93) estructuras_while -> . while
    (99) map -> . VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (108) vector -> . VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (116) set -> . VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON
    (84) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (94) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (95) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 9
    VAR             shift and go to state 10
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    VAR_DUMP        shift and go to state 23
    PRINT_R         shift and go to state 24
    VAR_EXPORT      shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    expresiones                    shift and go to state 223
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    datos_estructurados            shift and go to state 8
    echo                           shift and go to state 11
    print                          shift and go to state 12
    var_dump                       shift and go to state 13
    print_r                        shift and go to state 14
    var_export                     shift and go to state 15
    if_structures                  shift and go to state 16
    estructuras_while              shift and go to state 17
    map                            shift and go to state 18
    vector                         shift and go to state 19
    set                            shift and go to state 20
    if                             shift and go to state 26
    if_r                           shift and go to state 27
    while                          shift and go to state 28

state 210

    (86) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 224


state 211

    (91) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 91 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 91 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 91 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 212

    (84) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 84 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 213

    (94) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 94 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 214

    (95) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 225


state 215

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 226


state 216

    (107) todos_clave_valor -> clave_valor COMMA . todos_clave_valor
    (106) todos_clave_valor -> . clave_valor
    (107) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (100) clave_valor -> . elemento_string ARROW elemento_string
    (101) clave_valor -> . elemento_string ARROW NUMBER
    (102) clave_valor -> . NUMBER ARROW elemento_string
    (103) clave_valor -> . NUMBER ARROW NUMBER
    (104) clave_valor -> . NUMBER ARROW elemento_logico_pri
    (105) clave_valor -> . elemento_string ARROW elemento_logico_pri
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 199
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146

    clave_valor                    shift and go to state 197
    todos_clave_valor              shift and go to state 227
    elemento_string                shift and go to state 198

state 217

    (100) clave_valor -> elemento_string ARROW . elemento_string
    (101) clave_valor -> elemento_string ARROW . NUMBER
    (105) clave_valor -> elemento_string ARROW . elemento_logico_pri
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    NUMBER          shift and go to state 229
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_string                shift and go to state 228
    elemento_logico_pri            shift and go to state 230

state 218

    (102) clave_valor -> NUMBER ARROW . elemento_string
    (103) clave_valor -> NUMBER ARROW . NUMBER
    (104) clave_valor -> NUMBER ARROW . elemento_logico_pri
    (27) elemento_string -> . STRING
    (28) elemento_string -> . STRINGCC
    (29) elemento_string -> . VARIABLE
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    NUMBER          shift and go to state 231
    STRING          shift and go to state 44
    STRINGCC        shift and go to state 45
    VARIABLE        shift and go to state 146
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    elemento_string                shift and go to state 232
    elemento_logico_pri            shift and go to state 233

state 219

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 234


state 220

    (115) llenar -> datos COMMA . llenar
    (114) llenar -> . datos
    (115) llenar -> . datos COMMA llenar
    (109) datos -> . FLOAT
    (110) datos -> . NUMBER
    (111) datos -> . STRING
    (112) datos -> . STRINGCC
    (113) datos -> . elemento_logico_pri
    (37) elemento_logico_pri -> . TRUE
    (38) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 202
    NUMBER          shift and go to state 203
    STRING          shift and go to state 204
    STRINGCC        shift and go to state 205
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    datos                          shift and go to state 201
    llenar                         shift and go to state 235
    elemento_logico_pri            shift and go to state 206

state 221

    (116) set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 236


state 222

    (71) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 71 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 223

    (87) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 237


state 224

    (86) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 86 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 225

    (95) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    VARIABLE        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 226

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 238


state 227

    (107) todos_clave_valor -> clave_valor COMMA todos_clave_valor .

    RBRACKET        reduce using rule 107 (todos_clave_valor -> clave_valor COMMA todos_clave_valor .)


state 228

    (100) clave_valor -> elemento_string ARROW elemento_string .

    COMMA           reduce using rule 100 (clave_valor -> elemento_string ARROW elemento_string .)
    RBRACKET        reduce using rule 100 (clave_valor -> elemento_string ARROW elemento_string .)


state 229

    (101) clave_valor -> elemento_string ARROW NUMBER .

    COMMA           reduce using rule 101 (clave_valor -> elemento_string ARROW NUMBER .)
    RBRACKET        reduce using rule 101 (clave_valor -> elemento_string ARROW NUMBER .)


state 230

    (105) clave_valor -> elemento_string ARROW elemento_logico_pri .

    COMMA           reduce using rule 105 (clave_valor -> elemento_string ARROW elemento_logico_pri .)
    RBRACKET        reduce using rule 105 (clave_valor -> elemento_string ARROW elemento_logico_pri .)


state 231

    (103) clave_valor -> NUMBER ARROW NUMBER .

    COMMA           reduce using rule 103 (clave_valor -> NUMBER ARROW NUMBER .)
    RBRACKET        reduce using rule 103 (clave_valor -> NUMBER ARROW NUMBER .)


state 232

    (102) clave_valor -> NUMBER ARROW elemento_string .

    COMMA           reduce using rule 102 (clave_valor -> NUMBER ARROW elemento_string .)
    RBRACKET        reduce using rule 102 (clave_valor -> NUMBER ARROW elemento_string .)


state 233

    (104) clave_valor -> NUMBER ARROW elemento_logico_pri .

    COMMA           reduce using rule 104 (clave_valor -> NUMBER ARROW elemento_logico_pri .)
    RBRACKET        reduce using rule 104 (clave_valor -> NUMBER ARROW elemento_logico_pri .)


state 234

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 239


state 235

    (115) llenar -> datos COMMA llenar .

    RBRACKET        reduce using rule 115 (llenar -> datos COMMA llenar .)


state 236

    (116) set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 240


state 237

    (87) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 87 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 238

    (99) map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 99 (map -> VARIABLE EQUALS NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)


state 239

    (108) vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 108 (vector -> VARIABLE EQUALS NEW VECTOR LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)


state 240

    (116) set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 116 (set -> VARIABLE EQUALS NEW SET LPAREN LBRACKET llenar RBRACKET RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 26 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 26 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 58 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 68 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 68 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 111 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 111 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 147 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 39 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 39
WARNING: reduce/reduce conflict in state 40 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 40
WARNING: reduce/reduce conflict in state 68 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 68
WARNING: reduce/reduce conflict in state 125 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 125
WARNING: Rule (param -> VARIABLE) is never reduced
