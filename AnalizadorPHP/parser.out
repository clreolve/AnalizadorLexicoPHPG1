Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    CASE
    CATCH
    CLASS
    DO
    ENDFOR
    ENDFOREACH
    ENDSWITCH
    EXTENDS
    FINAL
    FOR
    FOREACH
    FUNCTION
    GLOBAL
    ID
    IMPLEMENTS
    INTERFACE
    OR
    PHPEND
    PHPSTART
    PRIVATE
    PROTECTED
    PUBLIC
    RETURN
    STATIC
    SWITCH
    THROW
    XOR

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> var_asignar
Rule 4     expresion -> var_declarar
Rule 5     expresion -> expresiones_de_salida
Rule 6     expresion -> estructuras_de_control
Rule 7     expresion -> var_plusminus
Rule 8     expresion -> map
Rule 9     expresion -> vector
Rule 10    var_declarar -> VAR var_asignar
Rule 11    var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 12    var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 13    var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON
Rule 14    var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON
Rule 15    var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON
Rule 16    var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON
Rule 17    var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
Rule 18    elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 19    elemento_numerico -> FLOAT
Rule 20    elemento_numerico -> NUMBER
Rule 21    elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 22    elemento_numerico -> VARIABLE
Rule 23    operador -> PLUS
Rule 24    operador -> MINUS
Rule 25    operador -> DIVIDE
Rule 26    operador -> EXPONENTIAL
Rule 27    operador -> TIMES
Rule 28    elemento_string -> STRING
Rule 29    elemento_string -> STRINGCC
Rule 30    elemento_string -> VARIABLE
Rule 31    elemento_logico -> elemento_logico_pri
Rule 32    elemento_logico -> elemento_logico_pri comparador elemento_logico_pri
Rule 33    elemento_logico -> NOTLOGICAL elemento_logico_pri
Rule 34    elemento_logico -> LPAREN elemento_logico_pri RPAREN
Rule 35    elemento_logico -> VARIABLE
Rule 36    elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 37    elemento_logico -> elemento_string comparador elemento_string
Rule 38    elemento_logico_pri -> TRUE
Rule 39    elemento_logico_pri -> FALSE
Rule 40    comparador -> IDENTICAL
Rule 41    comparador -> NOTIDENTICAL
Rule 42    comparador -> EQUALSLOGICAL
Rule 43    comparador -> DIFFERENT
Rule 44    comparador -> GREATEREQUAL
Rule 45    comparador -> LESSEQUAL
Rule 46    comparador -> GREATERTHAN
Rule 47    comparador -> LESSTHAN
Rule 48    comparador -> ANDlOGICAL
Rule 49    comparador -> ORLOGICAL
Rule 50    param -> VARIABLE
Rule 51    param -> elemento_string
Rule 52    param -> elemento_numerico
Rule 53    param -> elemento_logico
Rule 54    params -> param
Rule 55    params -> param COMMA params
Rule 56    params_points -> param
Rule 57    params_points -> param POINT params_points
Rule 58    optional_params -> param
Rule 59    optional_params -> 
Rule 60    optional_params -> param COMMA optional_params
Rule 61    expresiones_de_salida -> echo
Rule 62    expresiones_de_salida -> print
Rule 63    expresiones_de_salida -> var_dump
Rule 64    expresiones_de_salida -> print_r
Rule 65    expresiones_de_salida -> var_export
Rule 66    echo -> ECHO params SEMICOLON
Rule 67    echo -> ECHO params_points SEMICOLON
Rule 68    print -> PRINT param SEMICOLON
Rule 69    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 70    var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 71    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 72    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 73    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 74    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 75    estructuras_de_control -> if_structures
Rule 76    estructuras_de_control -> estructuras_while
Rule 77    if_structures -> if
Rule 78    if_structures -> if else
Rule 79    if_structures -> if else_if else
Rule 80    if_structures -> if else_if
Rule 81    if_structures -> if_r ENDIF SEMICOLON
Rule 82    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 83    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 84    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 85    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 86    else -> ELSE LCURLY expresiones RCURLY
Rule 87    else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 88    else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 89    else_if -> else_if else_if
Rule 90    if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 91    else_r -> ELSE DOUBLEPOINT expresiones
Rule 92    elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 93    elseif_r -> elseif_r elseif_r
Rule 94    estructuras_while -> while
Rule 95    while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 96    while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
Rule 97    map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
Rule 98    clave_valor -> elemento_string ARROW elemento_string
Rule 99    clave_valor -> elemento_string ARROW NUMBER
Rule 100   clave_valor -> NUMBER ARROW elemento_string
Rule 101   clave_valor -> NUMBER ARROW NUMBER
Rule 102   clave_valor -> NUMBER ARROW elemento_logico_pri
Rule 103   clave_valor -> elemento_string ARROW elemento_logico_pri
Rule 104   todos_clave_valor -> clave_valor
Rule 105   todos_clave_valor -> clave_valor COMMA todos_clave_valor
Rule 106   vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
Rule 107   datos -> FLOAT
Rule 108   datos -> NUMBER
Rule 109   datos -> STRING
Rule 110   datos -> STRINGCC
Rule 111   datos -> elemento_logico_pri
Rule 112   llenar_vector -> datos
Rule 113   llenar_vector -> datos COMMA llenar_vector

Terminals, with rules where they appear

                     : 59
AND                  : 
ANDlOGICAL           : 48
ARROW                : 98 99 100 101 102 103
AS                   : 
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COMMA                : 55 60 72 105 113
DIFFERENT            : 43
DIVIDE               : 25
DO                   : 
DOUBLEPOINT          : 90 91 92 96
ECHO                 : 66 67
ELSE                 : 86 88 91
ELSEIF               : 87 92
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 81 82 83 84
ENDSWITCH            : 
ENDWHILE             : 96
EQUALS               : 13 14 15 16 17 97 106
EQUALSLOGICAL        : 42
EXPONENTIAL          : 26
EXTENDS              : 
FALSE                : 39
FINAL                : 
FLOAT                : 19 107
FOR                  : 
FOREACH              : 
FUNCTION             : 
GLOBAL               : 
GREATEREQUAL         : 44
GREATERTHAN          : 46
ID                   : 
IDENTICAL            : 40
IF                   : 85 88 90
IMPLEMENTS           : 
INTERFACE            : 
LBRACKET             : 97 106
LCURLY               : 85 86 87 88 95
LESSEQUAL            : 45
LESSTHAN             : 47
LPAREN               : 21 34 69 70 71 72 73 74 85 87 88 90 92 95 96 97 106
MINUS                : 12 12 24
NEW                  : 97 106
NOTIDENTICAL         : 41
NOTLOGICAL           : 33
NUMBER               : 20 99 100 101 101 102 108
OR                   : 
ORLOGICAL            : 49
PHPEND               : 
PHPSTART             : 
PLUS                 : 11 11 23
POINT                : 57
PRINT                : 68
PRINT_R              : 69
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACKET             : 97 106
RCURLY               : 85 86 87 88 95
READLINE             : 73 74
RETURN               : 
RPAREN               : 21 34 69 70 71 72 73 74 85 87 88 90 92 95 96 97 106
SEMICOLON            : 11 12 13 14 15 16 17 66 67 68 69 70 71 81 82 83 84 96 97 106
STATIC               : 
STRING               : 28 109
STRINGCC             : 29 110
SWITCH               : 
THROW                : 
TIMES                : 27
TRUE                 : 38
VAR                  : 10
VARIABLE             : 11 12 13 13 14 15 16 17 22 30 35 50 97 106
VAR_DUMP             : 70
VAR_EXPORT           : 71 72
WHILE                : 95 96
XOR                  : 
error                : 

Nonterminals, with rules where they appear

clave_valor          : 104 105
comparador           : 32 36 37
datos                : 112 113
echo                 : 61
elemento_logico      : 16 53 72 85 87 88 90 92 95 96
elemento_logico_pri  : 31 32 32 33 34 102 103 111
elemento_numerico    : 14 18 18 21 36 36 52
elemento_string      : 15 37 37 51 74 98 98 99 100 103
else                 : 78 79
else_if              : 79 80 89 89
else_r               : 82 83
elseif_r             : 83 84 93 93
estructuras_de_control : 6
estructuras_while    : 76
expresion            : 1 2
expresiones          : 2 85 86 87 88 90 91 92 95 96 0
expresiones_de_salida : 5
funciones_ingreso_datos : 17
if                   : 77 78 79 80
if_r                 : 81 82 83 84
if_structures        : 75
llenar_vector        : 106 113
map                  : 8
operador             : 18
optional_params      : 60
param                : 54 55 56 57 58 60 68 69 70 71 72
params               : 55 66
params_points        : 57 67
print                : 62
print_r              : 64
todos_clave_valor    : 97 105
var_asignar          : 3 10
var_declarar         : 4
var_dump             : 63
var_export           : 65
var_plusminus        : 7
vector               : 9
while                : 94

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 29
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 3

    (3) expresion -> var_asignar .

    VARIABLE        reduce using rule 3 (expresion -> var_asignar .)
    VAR             reduce using rule 3 (expresion -> var_asignar .)
    ECHO            reduce using rule 3 (expresion -> var_asignar .)
    PRINT           reduce using rule 3 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 3 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 3 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 3 (expresion -> var_asignar .)
    IF              reduce using rule 3 (expresion -> var_asignar .)
    WHILE           reduce using rule 3 (expresion -> var_asignar .)
    $end            reduce using rule 3 (expresion -> var_asignar .)
    RCURLY          reduce using rule 3 (expresion -> var_asignar .)
    ENDIF           reduce using rule 3 (expresion -> var_asignar .)
    ELSE            reduce using rule 3 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 3 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 3 (expresion -> var_asignar .)


state 4

    (4) expresion -> var_declarar .

    VARIABLE        reduce using rule 4 (expresion -> var_declarar .)
    VAR             reduce using rule 4 (expresion -> var_declarar .)
    ECHO            reduce using rule 4 (expresion -> var_declarar .)
    PRINT           reduce using rule 4 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 4 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_declarar .)
    IF              reduce using rule 4 (expresion -> var_declarar .)
    WHILE           reduce using rule 4 (expresion -> var_declarar .)
    $end            reduce using rule 4 (expresion -> var_declarar .)
    RCURLY          reduce using rule 4 (expresion -> var_declarar .)
    ENDIF           reduce using rule 4 (expresion -> var_declarar .)
    ELSE            reduce using rule 4 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 4 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_declarar .)


state 5

    (5) expresion -> expresiones_de_salida .

    VARIABLE        reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 5 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 5 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 5 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 5 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 5 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 5 (expresion -> expresiones_de_salida .)


state 6

    (6) expresion -> estructuras_de_control .

    VARIABLE        reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 6 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 6 (expresion -> estructuras_de_control .)
    IF              reduce using rule 6 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 6 (expresion -> estructuras_de_control .)
    $end            reduce using rule 6 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 6 (expresion -> estructuras_de_control .)


state 7

    (7) expresion -> var_plusminus .

    VARIABLE        reduce using rule 7 (expresion -> var_plusminus .)
    VAR             reduce using rule 7 (expresion -> var_plusminus .)
    ECHO            reduce using rule 7 (expresion -> var_plusminus .)
    PRINT           reduce using rule 7 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 7 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 7 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 7 (expresion -> var_plusminus .)
    IF              reduce using rule 7 (expresion -> var_plusminus .)
    WHILE           reduce using rule 7 (expresion -> var_plusminus .)
    $end            reduce using rule 7 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 7 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 7 (expresion -> var_plusminus .)
    ELSE            reduce using rule 7 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 7 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 7 (expresion -> var_plusminus .)


state 8

    (8) expresion -> map .

    VARIABLE        reduce using rule 8 (expresion -> map .)
    VAR             reduce using rule 8 (expresion -> map .)
    ECHO            reduce using rule 8 (expresion -> map .)
    PRINT           reduce using rule 8 (expresion -> map .)
    VAR_DUMP        reduce using rule 8 (expresion -> map .)
    PRINT_R         reduce using rule 8 (expresion -> map .)
    VAR_EXPORT      reduce using rule 8 (expresion -> map .)
    IF              reduce using rule 8 (expresion -> map .)
    WHILE           reduce using rule 8 (expresion -> map .)
    $end            reduce using rule 8 (expresion -> map .)
    RCURLY          reduce using rule 8 (expresion -> map .)
    ENDIF           reduce using rule 8 (expresion -> map .)
    ELSE            reduce using rule 8 (expresion -> map .)
    ELSEIF          reduce using rule 8 (expresion -> map .)
    ENDWHILE        reduce using rule 8 (expresion -> map .)


state 9

    (9) expresion -> vector .

    VARIABLE        reduce using rule 9 (expresion -> vector .)
    VAR             reduce using rule 9 (expresion -> vector .)
    ECHO            reduce using rule 9 (expresion -> vector .)
    PRINT           reduce using rule 9 (expresion -> vector .)
    VAR_DUMP        reduce using rule 9 (expresion -> vector .)
    PRINT_R         reduce using rule 9 (expresion -> vector .)
    VAR_EXPORT      reduce using rule 9 (expresion -> vector .)
    IF              reduce using rule 9 (expresion -> vector .)
    WHILE           reduce using rule 9 (expresion -> vector .)
    $end            reduce using rule 9 (expresion -> vector .)
    RCURLY          reduce using rule 9 (expresion -> vector .)
    ENDIF           reduce using rule 9 (expresion -> vector .)
    ELSE            reduce using rule 9 (expresion -> vector .)
    ELSEIF          reduce using rule 9 (expresion -> vector .)
    ENDWHILE        reduce using rule 9 (expresion -> vector .)


state 10

    (13) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON
    (11) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (12) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON
    (97) map -> VARIABLE . EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> VARIABLE . EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON

    EQUALS          shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 11

    (10) var_declarar -> VAR . var_asignar
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON

    VARIABLE        shift and go to state 34

    var_asignar                    shift and go to state 33

state 12

    (61) expresiones_de_salida -> echo .

    VARIABLE        reduce using rule 61 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 61 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 61 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 61 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 61 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 61 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 61 (expresiones_de_salida -> echo .)
    IF              reduce using rule 61 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 61 (expresiones_de_salida -> echo .)
    $end            reduce using rule 61 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 61 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 61 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 61 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 61 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 61 (expresiones_de_salida -> echo .)


state 13

    (62) expresiones_de_salida -> print .

    VARIABLE        reduce using rule 62 (expresiones_de_salida -> print .)
    VAR             reduce using rule 62 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 62 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 62 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 62 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 62 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 62 (expresiones_de_salida -> print .)
    IF              reduce using rule 62 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 62 (expresiones_de_salida -> print .)
    $end            reduce using rule 62 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 62 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 62 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 62 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 62 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 62 (expresiones_de_salida -> print .)


state 14

    (63) expresiones_de_salida -> var_dump .

    VARIABLE        reduce using rule 63 (expresiones_de_salida -> var_dump .)
    VAR             reduce using rule 63 (expresiones_de_salida -> var_dump .)
    ECHO            reduce using rule 63 (expresiones_de_salida -> var_dump .)
    PRINT           reduce using rule 63 (expresiones_de_salida -> var_dump .)
    VAR_DUMP        reduce using rule 63 (expresiones_de_salida -> var_dump .)
    PRINT_R         reduce using rule 63 (expresiones_de_salida -> var_dump .)
    VAR_EXPORT      reduce using rule 63 (expresiones_de_salida -> var_dump .)
    IF              reduce using rule 63 (expresiones_de_salida -> var_dump .)
    WHILE           reduce using rule 63 (expresiones_de_salida -> var_dump .)
    $end            reduce using rule 63 (expresiones_de_salida -> var_dump .)
    RCURLY          reduce using rule 63 (expresiones_de_salida -> var_dump .)
    ENDIF           reduce using rule 63 (expresiones_de_salida -> var_dump .)
    ELSE            reduce using rule 63 (expresiones_de_salida -> var_dump .)
    ELSEIF          reduce using rule 63 (expresiones_de_salida -> var_dump .)
    ENDWHILE        reduce using rule 63 (expresiones_de_salida -> var_dump .)


state 15

    (64) expresiones_de_salida -> print_r .

    VARIABLE        reduce using rule 64 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 64 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 64 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 64 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 64 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 64 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 64 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 64 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 64 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 64 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 64 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 64 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 64 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 64 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 64 (expresiones_de_salida -> print_r .)


state 16

    (65) expresiones_de_salida -> var_export .

    VARIABLE        reduce using rule 65 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 65 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 65 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 65 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 65 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 65 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 65 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 65 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 65 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 65 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 65 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 65 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 65 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 65 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 65 (expresiones_de_salida -> var_export .)


state 17

    (75) estructuras_de_control -> if_structures .

    VARIABLE        reduce using rule 75 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 75 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 75 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 75 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 75 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 75 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 75 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 75 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 75 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 75 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 75 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 75 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 75 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 75 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 75 (estructuras_de_control -> if_structures .)


state 18

    (76) estructuras_de_control -> estructuras_while .

    VARIABLE        reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 76 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 76 (estructuras_de_control -> estructuras_while .)


state 19

    (66) echo -> ECHO . params SEMICOLON
    (67) echo -> ECHO . params_points SEMICOLON
    (54) params -> . param
    (55) params -> . param COMMA params
    (56) params_points -> . param
    (57) params_points -> . param POINT params_points
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    params                         shift and go to state 35
    params_points                  shift and go to state 36
    param                          shift and go to state 37
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 20

    (68) print -> PRINT . param SEMICOLON
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 51
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 21

    (70) var_dump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 52


state 22

    (69) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 53


state 23

    (71) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 24

    (77) if_structures -> if .
    (78) if_structures -> if . else
    (79) if_structures -> if . else_if else
    (80) if_structures -> if . else_if
    (86) else -> . ELSE LCURLY expresiones RCURLY
    (87) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 77 (if_structures -> if .)
    VAR             reduce using rule 77 (if_structures -> if .)
    ECHO            reduce using rule 77 (if_structures -> if .)
    PRINT           reduce using rule 77 (if_structures -> if .)
    VAR_DUMP        reduce using rule 77 (if_structures -> if .)
    PRINT_R         reduce using rule 77 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 77 (if_structures -> if .)
    IF              reduce using rule 77 (if_structures -> if .)
    WHILE           reduce using rule 77 (if_structures -> if .)
    $end            reduce using rule 77 (if_structures -> if .)
    RCURLY          reduce using rule 77 (if_structures -> if .)
    ENDIF           reduce using rule 77 (if_structures -> if .)
    ENDWHILE        reduce using rule 77 (if_structures -> if .)
    ELSE            shift and go to state 57
    ELSEIF          shift and go to state 58

  ! ELSE            [ reduce using rule 77 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 77 (if_structures -> if .) ]

    else                           shift and go to state 55
    else_if                        shift and go to state 56

state 25

    (81) if_structures -> if_r . ENDIF SEMICOLON
    (82) if_structures -> if_r . else_r ENDIF SEMICOLON
    (83) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (91) else_r -> . ELSE DOUBLEPOINT expresiones
    (92) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 59
    ELSE            shift and go to state 62
    ELSEIF          shift and go to state 63

    else_r                         shift and go to state 60
    elseif_r                       shift and go to state 61

state 26

    (94) estructuras_while -> while .

    VARIABLE        reduce using rule 94 (estructuras_while -> while .)
    VAR             reduce using rule 94 (estructuras_while -> while .)
    ECHO            reduce using rule 94 (estructuras_while -> while .)
    PRINT           reduce using rule 94 (estructuras_while -> while .)
    VAR_DUMP        reduce using rule 94 (estructuras_while -> while .)
    PRINT_R         reduce using rule 94 (estructuras_while -> while .)
    VAR_EXPORT      reduce using rule 94 (estructuras_while -> while .)
    IF              reduce using rule 94 (estructuras_while -> while .)
    WHILE           reduce using rule 94 (estructuras_while -> while .)
    $end            reduce using rule 94 (estructuras_while -> while .)
    RCURLY          reduce using rule 94 (estructuras_while -> while .)
    ENDIF           reduce using rule 94 (estructuras_while -> while .)
    ELSE            reduce using rule 94 (estructuras_while -> while .)
    ELSEIF          reduce using rule 94 (estructuras_while -> while .)
    ENDWHILE        reduce using rule 94 (estructuras_while -> while .)


state 27

    (85) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 64


state 28

    (95) while -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 65


state 29

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 30

    (13) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (16) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (17) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (97) map -> VARIABLE EQUALS . NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> VARIABLE EQUALS . NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (72) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (73) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (74) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 66
    NEW             shift and go to state 71
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    NOTLOGICAL      shift and go to state 48
    VAR_EXPORT      shift and go to state 72
    READLINE        shift and go to state 73
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_numerico              shift and go to state 67
    elemento_string                shift and go to state 68
    elemento_logico                shift and go to state 69
    funciones_ingreso_datos        shift and go to state 70
    elemento_logico_pri            shift and go to state 47

state 31

    (11) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 74


state 32

    (12) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 75


state 33

    (10) var_declarar -> VAR var_asignar .

    VARIABLE        reduce using rule 10 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 10 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 10 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 10 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 10 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 10 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 10 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 10 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 10 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 10 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 10 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 10 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 10 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 10 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 10 (var_declarar -> VAR var_asignar .)


state 34

    (13) var_asignar -> VARIABLE . EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> VARIABLE . EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> VARIABLE . EQUALS elemento_string SEMICOLON
    (16) var_asignar -> VARIABLE . EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> VARIABLE . EQUALS funciones_ingreso_datos SEMICOLON

    EQUALS          shift and go to state 76


state 35

    (66) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 77


state 36

    (67) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 78


state 37

    (54) params -> param .
    (55) params -> param . COMMA params
    (56) params_points -> param .
    (57) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (params -> param .)
    SEMICOLON       reduce using rule 54 (params -> param .)
    COMMA           shift and go to state 79
    POINT           shift and go to state 80

  ! SEMICOLON       [ reduce using rule 56 (params_points -> param .) ]


state 38

    (50) param -> VARIABLE .
    (30) elemento_string -> VARIABLE .
    (22) elemento_numerico -> VARIABLE .
    (35) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 30 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 30 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (elemento_string -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 22 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 22 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 50 (param -> VARIABLE .) ]
  ! POINT           [ reduce using rule 50 (param -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 50 (param -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 50 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]


state 39

    (51) param -> elemento_string .
    (37) elemento_logico -> elemento_string . comparador elemento_string
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    COMMA           reduce using rule 51 (param -> elemento_string .)
    POINT           reduce using rule 51 (param -> elemento_string .)
    SEMICOLON       reduce using rule 51 (param -> elemento_string .)
    RPAREN          reduce using rule 51 (param -> elemento_string .)
    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    comparador                     shift and go to state 81

state 40

    (52) param -> elemento_numerico .
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    COMMA           reduce using rule 52 (param -> elemento_numerico .)
    POINT           reduce using rule 52 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 52 (param -> elemento_numerico .)
    RPAREN          reduce using rule 52 (param -> elemento_numerico .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98
    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    operador                       shift and go to state 92
    comparador                     shift and go to state 93

state 41

    (53) param -> elemento_logico .

    COMMA           reduce using rule 53 (param -> elemento_logico .)
    POINT           reduce using rule 53 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 53 (param -> elemento_logico .)
    RPAREN          reduce using rule 53 (param -> elemento_logico .)


state 42

    (28) elemento_string -> STRING .

    IDENTICAL       reduce using rule 28 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 28 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 28 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 28 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 28 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 28 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 28 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 28 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 28 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 28 (elemento_string -> STRING .)
    COMMA           reduce using rule 28 (elemento_string -> STRING .)
    POINT           reduce using rule 28 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 28 (elemento_string -> STRING .)
    RPAREN          reduce using rule 28 (elemento_string -> STRING .)
    ARROW           reduce using rule 28 (elemento_string -> STRING .)
    RBRACKET        reduce using rule 28 (elemento_string -> STRING .)


state 43

    (29) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 29 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 29 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 29 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 29 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 29 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 29 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 29 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 29 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 29 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 29 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 29 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 29 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 29 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 29 (elemento_string -> STRINGCC .)
    ARROW           reduce using rule 29 (elemento_string -> STRINGCC .)
    RBRACKET        reduce using rule 29 (elemento_string -> STRINGCC .)


state 44

    (19) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 19 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 19 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 19 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 19 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 19 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 19 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 19 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 19 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 19 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 19 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 19 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 19 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 19 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 19 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 19 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 19 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 19 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 19 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 19 (elemento_numerico -> FLOAT .)


state 45

    (20) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 20 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 20 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 20 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 20 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 20 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 20 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 20 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 20 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 20 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 20 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 20 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 20 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 20 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 20 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 20 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 20 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 20 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 20 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 20 (elemento_numerico -> NUMBER .)


state 46

    (21) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (34) elemento_logico -> LPAREN . elemento_logico_pri RPAREN
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 99
    VARIABLE        shift and go to state 102
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_numerico              shift and go to state 100
    elemento_logico_pri            shift and go to state 101

state 47

    (31) elemento_logico -> elemento_logico_pri .
    (32) elemento_logico -> elemento_logico_pri . comparador elemento_logico_pri
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    COMMA           reduce using rule 31 (elemento_logico -> elemento_logico_pri .)
    POINT           reduce using rule 31 (elemento_logico -> elemento_logico_pri .)
    SEMICOLON       reduce using rule 31 (elemento_logico -> elemento_logico_pri .)
    RPAREN          reduce using rule 31 (elemento_logico -> elemento_logico_pri .)
    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    comparador                     shift and go to state 103

state 48

    (33) elemento_logico -> NOTLOGICAL . elemento_logico_pri
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_logico_pri            shift and go to state 104

state 49

    (38) elemento_logico_pri -> TRUE .

    IDENTICAL       reduce using rule 38 (elemento_logico_pri -> TRUE .)
    NOTIDENTICAL    reduce using rule 38 (elemento_logico_pri -> TRUE .)
    EQUALSLOGICAL   reduce using rule 38 (elemento_logico_pri -> TRUE .)
    DIFFERENT       reduce using rule 38 (elemento_logico_pri -> TRUE .)
    GREATEREQUAL    reduce using rule 38 (elemento_logico_pri -> TRUE .)
    LESSEQUAL       reduce using rule 38 (elemento_logico_pri -> TRUE .)
    GREATERTHAN     reduce using rule 38 (elemento_logico_pri -> TRUE .)
    LESSTHAN        reduce using rule 38 (elemento_logico_pri -> TRUE .)
    ANDlOGICAL      reduce using rule 38 (elemento_logico_pri -> TRUE .)
    ORLOGICAL       reduce using rule 38 (elemento_logico_pri -> TRUE .)
    COMMA           reduce using rule 38 (elemento_logico_pri -> TRUE .)
    POINT           reduce using rule 38 (elemento_logico_pri -> TRUE .)
    SEMICOLON       reduce using rule 38 (elemento_logico_pri -> TRUE .)
    RPAREN          reduce using rule 38 (elemento_logico_pri -> TRUE .)
    RBRACKET        reduce using rule 38 (elemento_logico_pri -> TRUE .)


state 50

    (39) elemento_logico_pri -> FALSE .

    IDENTICAL       reduce using rule 39 (elemento_logico_pri -> FALSE .)
    NOTIDENTICAL    reduce using rule 39 (elemento_logico_pri -> FALSE .)
    EQUALSLOGICAL   reduce using rule 39 (elemento_logico_pri -> FALSE .)
    DIFFERENT       reduce using rule 39 (elemento_logico_pri -> FALSE .)
    GREATEREQUAL    reduce using rule 39 (elemento_logico_pri -> FALSE .)
    LESSEQUAL       reduce using rule 39 (elemento_logico_pri -> FALSE .)
    GREATERTHAN     reduce using rule 39 (elemento_logico_pri -> FALSE .)
    LESSTHAN        reduce using rule 39 (elemento_logico_pri -> FALSE .)
    ANDlOGICAL      reduce using rule 39 (elemento_logico_pri -> FALSE .)
    ORLOGICAL       reduce using rule 39 (elemento_logico_pri -> FALSE .)
    COMMA           reduce using rule 39 (elemento_logico_pri -> FALSE .)
    POINT           reduce using rule 39 (elemento_logico_pri -> FALSE .)
    SEMICOLON       reduce using rule 39 (elemento_logico_pri -> FALSE .)
    RPAREN          reduce using rule 39 (elemento_logico_pri -> FALSE .)
    RBRACKET        reduce using rule 39 (elemento_logico_pri -> FALSE .)


state 51

    (68) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 105


state 52

    (70) var_dump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 106
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 53

    (69) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 107
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 54

    (71) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 108
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 55

    (78) if_structures -> if else .

    VARIABLE        reduce using rule 78 (if_structures -> if else .)
    VAR             reduce using rule 78 (if_structures -> if else .)
    ECHO            reduce using rule 78 (if_structures -> if else .)
    PRINT           reduce using rule 78 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 78 (if_structures -> if else .)
    PRINT_R         reduce using rule 78 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 78 (if_structures -> if else .)
    IF              reduce using rule 78 (if_structures -> if else .)
    WHILE           reduce using rule 78 (if_structures -> if else .)
    $end            reduce using rule 78 (if_structures -> if else .)
    RCURLY          reduce using rule 78 (if_structures -> if else .)
    ENDIF           reduce using rule 78 (if_structures -> if else .)
    ELSE            reduce using rule 78 (if_structures -> if else .)
    ELSEIF          reduce using rule 78 (if_structures -> if else .)
    ENDWHILE        reduce using rule 78 (if_structures -> if else .)


state 56

    (79) if_structures -> if else_if . else
    (80) if_structures -> if else_if .
    (89) else_if -> else_if . else_if
    (86) else -> . ELSE LCURLY expresiones RCURLY
    (87) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 80 (if_structures -> if else_if .)
    VAR             reduce using rule 80 (if_structures -> if else_if .)
    ECHO            reduce using rule 80 (if_structures -> if else_if .)
    PRINT           reduce using rule 80 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 80 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 80 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 80 (if_structures -> if else_if .)
    IF              reduce using rule 80 (if_structures -> if else_if .)
    WHILE           reduce using rule 80 (if_structures -> if else_if .)
    $end            reduce using rule 80 (if_structures -> if else_if .)
    RCURLY          reduce using rule 80 (if_structures -> if else_if .)
    ENDIF           reduce using rule 80 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 80 (if_structures -> if else_if .)
    ELSE            shift and go to state 57
    ELSEIF          shift and go to state 58

  ! ELSE            [ reduce using rule 80 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 80 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 109
    else                           shift and go to state 110

state 57

    (86) else -> ELSE . LCURLY expresiones RCURLY
    (88) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 111
    IF              shift and go to state 112


state 58

    (87) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 113


state 59

    (81) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 114


state 60

    (82) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 115


state 61

    (83) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (84) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (93) elseif_r -> elseif_r . elseif_r
    (91) else_r -> . ELSE DOUBLEPOINT expresiones
    (92) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 118
    ELSE            shift and go to state 62
    ELSEIF          shift and go to state 63

    elseif_r                       shift and go to state 116
    else_r                         shift and go to state 117

state 62

    (91) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 119


state 63

    (92) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 120


state 64

    (85) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 122
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 65

    (95) while -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 126
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 66

    (13) var_asignar -> VARIABLE EQUALS VARIABLE . SEMICOLON
    (22) elemento_numerico -> VARIABLE .
    (30) elemento_string -> VARIABLE .
    (35) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for IDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 127
    PLUS            reduce using rule 22 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 22 (elemento_numerico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 35 (elemento_logico -> VARIABLE .) ]


state 67

    (14) var_asignar -> VARIABLE EQUALS elemento_numerico . SEMICOLON
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 128
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98
    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    operador                       shift and go to state 92
    comparador                     shift and go to state 93

state 68

    (15) var_asignar -> VARIABLE EQUALS elemento_string . SEMICOLON
    (37) elemento_logico -> elemento_string . comparador elemento_string
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    SEMICOLON       shift and go to state 129
    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    comparador                     shift and go to state 81

state 69

    (16) var_asignar -> VARIABLE EQUALS elemento_logico . SEMICOLON

    SEMICOLON       shift and go to state 130


state 70

    (17) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos . SEMICOLON

    SEMICOLON       shift and go to state 131


state 71

    (97) map -> VARIABLE EQUALS NEW . LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> VARIABLE EQUALS NEW . LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 132


state 72

    (72) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 133


state 73

    (73) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (74) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 134


state 74

    (11) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 135


state 75

    (12) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 136


state 76

    (13) var_asignar -> VARIABLE EQUALS . VARIABLE SEMICOLON
    (14) var_asignar -> VARIABLE EQUALS . elemento_numerico SEMICOLON
    (15) var_asignar -> VARIABLE EQUALS . elemento_string SEMICOLON
    (16) var_asignar -> VARIABLE EQUALS . elemento_logico SEMICOLON
    (17) var_asignar -> VARIABLE EQUALS . funciones_ingreso_datos SEMICOLON
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (72) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (73) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (74) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 66
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    NOTLOGICAL      shift and go to state 48
    VAR_EXPORT      shift and go to state 72
    READLINE        shift and go to state 73
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_numerico              shift and go to state 67
    elemento_string                shift and go to state 68
    elemento_logico                shift and go to state 69
    funciones_ingreso_datos        shift and go to state 70
    elemento_logico_pri            shift and go to state 47

state 77

    (66) echo -> ECHO params SEMICOLON .

    VARIABLE        reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 66 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 66 (echo -> ECHO params SEMICOLON .)


state 78

    (67) echo -> ECHO params_points SEMICOLON .

    VARIABLE        reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 67 (echo -> ECHO params_points SEMICOLON .)


state 79

    (55) params -> param COMMA . params
    (54) params -> . param
    (55) params -> . param COMMA params
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 137
    params                         shift and go to state 138
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 80

    (57) params_points -> param POINT . params_points
    (56) params_points -> . param
    (57) params_points -> . param POINT params_points
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 139
    params_points                  shift and go to state 140
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico                shift and go to state 41
    elemento_logico_pri            shift and go to state 47

state 81

    (37) elemento_logico -> elemento_string comparador . elemento_string
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    VARIABLE        shift and go to state 142

    elemento_string                shift and go to state 141

state 82

    (40) comparador -> IDENTICAL .

    STRING          reduce using rule 40 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 40 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 40 (comparador -> IDENTICAL .)
    FLOAT           reduce using rule 40 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 40 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 40 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 40 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 40 (comparador -> IDENTICAL .)


state 83

    (41) comparador -> NOTIDENTICAL .

    STRING          reduce using rule 41 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 41 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 41 (comparador -> NOTIDENTICAL .)
    FLOAT           reduce using rule 41 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 41 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 41 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 41 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 41 (comparador -> NOTIDENTICAL .)


state 84

    (42) comparador -> EQUALSLOGICAL .

    STRING          reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    FLOAT           reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 42 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 42 (comparador -> EQUALSLOGICAL .)


state 85

    (43) comparador -> DIFFERENT .

    STRING          reduce using rule 43 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 43 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 43 (comparador -> DIFFERENT .)
    FLOAT           reduce using rule 43 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 43 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 43 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 43 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 43 (comparador -> DIFFERENT .)


state 86

    (44) comparador -> GREATEREQUAL .

    STRING          reduce using rule 44 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 44 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 44 (comparador -> GREATEREQUAL .)
    FLOAT           reduce using rule 44 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 44 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 44 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 44 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 44 (comparador -> GREATEREQUAL .)


state 87

    (45) comparador -> LESSEQUAL .

    STRING          reduce using rule 45 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 45 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 45 (comparador -> LESSEQUAL .)
    FLOAT           reduce using rule 45 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 45 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 45 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 45 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 45 (comparador -> LESSEQUAL .)


state 88

    (46) comparador -> GREATERTHAN .

    STRING          reduce using rule 46 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 46 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 46 (comparador -> GREATERTHAN .)
    FLOAT           reduce using rule 46 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 46 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 46 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 46 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 46 (comparador -> GREATERTHAN .)


state 89

    (47) comparador -> LESSTHAN .

    STRING          reduce using rule 47 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 47 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 47 (comparador -> LESSTHAN .)
    FLOAT           reduce using rule 47 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 47 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 47 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 47 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 47 (comparador -> LESSTHAN .)


state 90

    (48) comparador -> ANDlOGICAL .

    STRING          reduce using rule 48 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 48 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 48 (comparador -> ANDlOGICAL .)
    FLOAT           reduce using rule 48 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 48 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 48 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 48 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 48 (comparador -> ANDlOGICAL .)


state 91

    (49) comparador -> ORLOGICAL .

    STRING          reduce using rule 49 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 49 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 49 (comparador -> ORLOGICAL .)
    FLOAT           reduce using rule 49 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 49 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 49 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 49 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 49 (comparador -> ORLOGICAL .)


state 92

    (18) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 99
    VARIABLE        shift and go to state 102

    elemento_numerico              shift and go to state 143

state 93

    (36) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 99
    VARIABLE        shift and go to state 102

    elemento_numerico              shift and go to state 144

state 94

    (23) operador -> PLUS .

    FLOAT           reduce using rule 23 (operador -> PLUS .)
    NUMBER          reduce using rule 23 (operador -> PLUS .)
    LPAREN          reduce using rule 23 (operador -> PLUS .)
    VARIABLE        reduce using rule 23 (operador -> PLUS .)


state 95

    (24) operador -> MINUS .

    FLOAT           reduce using rule 24 (operador -> MINUS .)
    NUMBER          reduce using rule 24 (operador -> MINUS .)
    LPAREN          reduce using rule 24 (operador -> MINUS .)
    VARIABLE        reduce using rule 24 (operador -> MINUS .)


state 96

    (25) operador -> DIVIDE .

    FLOAT           reduce using rule 25 (operador -> DIVIDE .)
    NUMBER          reduce using rule 25 (operador -> DIVIDE .)
    LPAREN          reduce using rule 25 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 25 (operador -> DIVIDE .)


state 97

    (26) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 26 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 26 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 26 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 26 (operador -> EXPONENTIAL .)


state 98

    (27) operador -> TIMES .

    FLOAT           reduce using rule 27 (operador -> TIMES .)
    NUMBER          reduce using rule 27 (operador -> TIMES .)
    LPAREN          reduce using rule 27 (operador -> TIMES .)
    VARIABLE        reduce using rule 27 (operador -> TIMES .)


state 99

    (21) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 99
    VARIABLE        shift and go to state 102

    elemento_numerico              shift and go to state 100

state 100

    (21) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES

    RPAREN          shift and go to state 145
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98

    operador                       shift and go to state 92

state 101

    (34) elemento_logico -> LPAREN elemento_logico_pri . RPAREN

    RPAREN          shift and go to state 146


state 102

    (22) elemento_numerico -> VARIABLE .

    RPAREN          reduce using rule 22 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 22 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 22 (elemento_numerico -> VARIABLE .)


state 103

    (32) elemento_logico -> elemento_logico_pri comparador . elemento_logico_pri
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_logico_pri            shift and go to state 147

state 104

    (33) elemento_logico -> NOTLOGICAL elemento_logico_pri .

    COMMA           reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    POINT           reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    SEMICOLON       reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)
    RPAREN          reduce using rule 33 (elemento_logico -> NOTLOGICAL elemento_logico_pri .)


state 105

    (68) print -> PRINT param SEMICOLON .

    VARIABLE        reduce using rule 68 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 68 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 68 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 68 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 68 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 68 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 68 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 68 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 68 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 68 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 68 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 68 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 68 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 68 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 68 (print -> PRINT param SEMICOLON .)


state 106

    (70) var_dump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 148


state 107

    (69) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 149


state 108

    (71) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 150


state 109

    (89) else_if -> else_if else_if .
    (89) else_if -> else_if . else_if
    (87) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (88) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (89) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    VARIABLE        reduce using rule 89 (else_if -> else_if else_if .)
    VAR             reduce using rule 89 (else_if -> else_if else_if .)
    ECHO            reduce using rule 89 (else_if -> else_if else_if .)
    PRINT           reduce using rule 89 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 89 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 89 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 89 (else_if -> else_if else_if .)
    IF              reduce using rule 89 (else_if -> else_if else_if .)
    WHILE           reduce using rule 89 (else_if -> else_if else_if .)
    $end            reduce using rule 89 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 89 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 89 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 89 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 58
    ELSE            shift and go to state 151

  ! ELSE            [ reduce using rule 89 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 89 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 109

state 110

    (79) if_structures -> if else_if else .

    VARIABLE        reduce using rule 79 (if_structures -> if else_if else .)
    VAR             reduce using rule 79 (if_structures -> if else_if else .)
    ECHO            reduce using rule 79 (if_structures -> if else_if else .)
    PRINT           reduce using rule 79 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 79 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 79 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 79 (if_structures -> if else_if else .)
    IF              reduce using rule 79 (if_structures -> if else_if else .)
    WHILE           reduce using rule 79 (if_structures -> if else_if else .)
    $end            reduce using rule 79 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 79 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 79 (if_structures -> if else_if else .)
    ELSE            reduce using rule 79 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 79 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 79 (if_structures -> if else_if else .)


state 111

    (86) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 152
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 112

    (88) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 153


state 113

    (87) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 154
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 114

    (81) if_structures -> if_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 81 (if_structures -> if_r ENDIF SEMICOLON .)


state 115

    (82) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 155


state 116

    (93) elseif_r -> elseif_r elseif_r .
    (93) elseif_r -> elseif_r . elseif_r
    (92) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (93) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 93 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 93 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 63

  ! ELSEIF          [ reduce using rule 93 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 116

state 117

    (83) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 156


state 118

    (84) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 157


state 119

    (91) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 158
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 120

    (92) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 159
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 121

    (34) elemento_logico -> LPAREN . elemento_logico_pri RPAREN
    (21) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 99
    VARIABLE        shift and go to state 102

    elemento_logico_pri            shift and go to state 101
    elemento_numerico              shift and go to state 100

state 122

    (85) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (90) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones

    RPAREN          shift and go to state 160


state 123

    (35) elemento_logico -> VARIABLE .
    (22) elemento_numerico -> VARIABLE .
    (30) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 22 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 35 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 22 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 22 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 22 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 22 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 22 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 22 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 22 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 30 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 30 (elemento_string -> VARIABLE .) ]


state 124

    (36) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES

    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98

    comparador                     shift and go to state 93
    operador                       shift and go to state 92

state 125

    (37) elemento_logico -> elemento_string . comparador elemento_string
    (40) comparador -> . IDENTICAL
    (41) comparador -> . NOTIDENTICAL
    (42) comparador -> . EQUALSLOGICAL
    (43) comparador -> . DIFFERENT
    (44) comparador -> . GREATEREQUAL
    (45) comparador -> . LESSEQUAL
    (46) comparador -> . GREATERTHAN
    (47) comparador -> . LESSTHAN
    (48) comparador -> . ANDlOGICAL
    (49) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 82
    NOTIDENTICAL    shift and go to state 83
    EQUALSLOGICAL   shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATEREQUAL    shift and go to state 86
    LESSEQUAL       shift and go to state 87
    GREATERTHAN     shift and go to state 88
    LESSTHAN        shift and go to state 89
    ANDlOGICAL      shift and go to state 90
    ORLOGICAL       shift and go to state 91

    comparador                     shift and go to state 81

state 126

    (95) while -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (96) while -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    RPAREN          shift and go to state 161


state 127

    (13) var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR             reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ECHO            reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_DUMP        reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    PRINT_R         reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    VAR_EXPORT      reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    IF              reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    $end            reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    RCURLY          reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDIF           reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ELSEIF          reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)
    ENDWHILE        reduce using rule 13 (var_asignar -> VARIABLE EQUALS VARIABLE SEMICOLON .)


state 128

    (14) var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .

    VARIABLE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR             reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ECHO            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_DUMP        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    PRINT_R         reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    VAR_EXPORT      reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    IF              reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    WHILE           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    $end            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    RCURLY          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDIF           reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSE            reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ELSEIF          reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)
    ENDWHILE        reduce using rule 14 (var_asignar -> VARIABLE EQUALS elemento_numerico SEMICOLON .)


state 129

    (15) var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .

    VARIABLE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR             reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ECHO            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_DUMP        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    PRINT_R         reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    VAR_EXPORT      reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    IF              reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    WHILE           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    $end            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    RCURLY          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDIF           reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSE            reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ELSEIF          reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)
    ENDWHILE        reduce using rule 15 (var_asignar -> VARIABLE EQUALS elemento_string SEMICOLON .)


state 130

    (16) var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .

    VARIABLE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR             reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ECHO            reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT           reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_DUMP        reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    PRINT_R         reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    VAR_EXPORT      reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    IF              reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    WHILE           reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    $end            reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    RCURLY          reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDIF           reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSE            reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ELSEIF          reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)
    ENDWHILE        reduce using rule 16 (var_asignar -> VARIABLE EQUALS elemento_logico SEMICOLON .)


state 131

    (17) var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .

    VARIABLE        reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR             reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ECHO            reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT           reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_DUMP        reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    PRINT_R         reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    VAR_EXPORT      reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    IF              reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    WHILE           reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    $end            reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    RCURLY          reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDIF           reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSE            reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ELSEIF          reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)
    ENDWHILE        reduce using rule 17 (var_asignar -> VARIABLE EQUALS funciones_ingreso_datos SEMICOLON .)


state 132

    (97) map -> VARIABLE EQUALS NEW LPAREN . LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> VARIABLE EQUALS NEW LPAREN . LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON

    LBRACKET        shift and go to state 162


state 133

    (72) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (50) param -> . VARIABLE
    (51) param -> . elemento_string
    (52) param -> . elemento_numerico
    (53) param -> . elemento_logico
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 38
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    LPAREN          shift and go to state 46
    NOTLOGICAL      shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    param                          shift and go to state 163
    elemento_logico                shift and go to state 41
    elemento_string                shift and go to state 39
    elemento_numerico              shift and go to state 40
    elemento_logico_pri            shift and go to state 47

state 134

    (73) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (74) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 164
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    VARIABLE        shift and go to state 142

    elemento_string                shift and go to state 165

state 135

    (11) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    VARIABLE        reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 11 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 136

    (12) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    VARIABLE        reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 12 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 137

    (54) params -> param .
    (55) params -> param . COMMA params

    SEMICOLON       reduce using rule 54 (params -> param .)
    COMMA           shift and go to state 79


state 138

    (55) params -> param COMMA params .

    SEMICOLON       reduce using rule 55 (params -> param COMMA params .)


state 139

    (56) params_points -> param .
    (57) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 56 (params_points -> param .)
    POINT           shift and go to state 80


state 140

    (57) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 57 (params_points -> param POINT params_points .)


state 141

    (37) elemento_logico -> elemento_string comparador elemento_string .

    COMMA           reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 37 (elemento_logico -> elemento_string comparador elemento_string .)


state 142

    (30) elemento_string -> VARIABLE .

    COMMA           reduce using rule 30 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 30 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 30 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 30 (elemento_string -> VARIABLE .)
    ARROW           reduce using rule 30 (elemento_string -> VARIABLE .)
    RBRACKET        reduce using rule 30 (elemento_string -> VARIABLE .)


state 143

    (18) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    IDENTICAL       reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98

  ! PLUS            [ reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 18 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 92

state 144

    (36) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (18) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . DIVIDE
    (26) operador -> . EXPONENTIAL
    (27) operador -> . TIMES

    COMMA           reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 36 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    DIVIDE          shift and go to state 96
    EXPONENTIAL     shift and go to state 97
    TIMES           shift and go to state 98

    operador                       shift and go to state 92

state 145

    (21) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 21 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 146

    (34) elemento_logico -> LPAREN elemento_logico_pri RPAREN .

    COMMA           reduce using rule 34 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    POINT           reduce using rule 34 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    SEMICOLON       reduce using rule 34 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)
    RPAREN          reduce using rule 34 (elemento_logico -> LPAREN elemento_logico_pri RPAREN .)


state 147

    (32) elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .

    COMMA           reduce using rule 32 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    POINT           reduce using rule 32 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    SEMICOLON       reduce using rule 32 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)
    RPAREN          reduce using rule 32 (elemento_logico -> elemento_logico_pri comparador elemento_logico_pri .)


state 148

    (70) var_dump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 166


state 149

    (69) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 150

    (71) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 168


state 151

    (88) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 112


state 152

    (86) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 169


state 153

    (88) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 170
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 154

    (87) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 171


state 155

    (82) if_structures -> if_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 82 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 156

    (83) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 172


state 157

    (84) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 84 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 158

    (91) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 91 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 159

    (92) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones

    RPAREN          shift and go to state 173


state 160

    (85) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (90) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 174
    DOUBLEPOINT     shift and go to state 175


state 161

    (95) while -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (96) while -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 176
    DOUBLEPOINT     shift and go to state 177


state 162

    (97) map -> VARIABLE EQUALS NEW LPAREN LBRACKET . todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> VARIABLE EQUALS NEW LPAREN LBRACKET . llenar_vector RBRACKET RPAREN SEMICOLON
    (104) todos_clave_valor -> . clave_valor
    (105) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (112) llenar_vector -> . datos
    (113) llenar_vector -> . datos COMMA llenar_vector
    (98) clave_valor -> . elemento_string ARROW elemento_string
    (99) clave_valor -> . elemento_string ARROW NUMBER
    (100) clave_valor -> . NUMBER ARROW elemento_string
    (101) clave_valor -> . NUMBER ARROW NUMBER
    (102) clave_valor -> . NUMBER ARROW elemento_logico_pri
    (103) clave_valor -> . elemento_string ARROW elemento_logico_pri
    (107) datos -> . FLOAT
    (108) datos -> . NUMBER
    (109) datos -> . STRING
    (110) datos -> . STRINGCC
    (111) datos -> . elemento_logico_pri
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    NUMBER          shift and go to state 183
    FLOAT           shift and go to state 185
    STRING          shift and go to state 186
    STRINGCC        shift and go to state 187
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    todos_clave_valor              shift and go to state 178
    llenar_vector                  shift and go to state 179
    clave_valor                    shift and go to state 180
    datos                          shift and go to state 181
    elemento_string                shift and go to state 182
    elemento_logico_pri            shift and go to state 184

state 163

    (72) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 188


state 164

    (73) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 73 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 165

    (74) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 189


state 166

    (70) var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 70 (var_dump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 167

    (69) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 69 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 168

    (71) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 71 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 169

    (86) else -> ELSE LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 86 (else -> ELSE LCURLY expresiones RCURLY .)


state 170

    (88) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 190


state 171

    (87) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 191


state 172

    (83) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 83 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 173

    (92) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 192


state 174

    (85) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 193
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 175

    (90) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 194
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 176

    (95) while -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 195
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 177

    (96) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 196
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 178

    (97) map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 197


state 179

    (106) vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 198


state 180

    (104) todos_clave_valor -> clave_valor .
    (105) todos_clave_valor -> clave_valor . COMMA todos_clave_valor

    RBRACKET        reduce using rule 104 (todos_clave_valor -> clave_valor .)
    COMMA           shift and go to state 199


state 181

    (112) llenar_vector -> datos .
    (113) llenar_vector -> datos . COMMA llenar_vector

    RBRACKET        reduce using rule 112 (llenar_vector -> datos .)
    COMMA           shift and go to state 200


state 182

    (98) clave_valor -> elemento_string . ARROW elemento_string
    (99) clave_valor -> elemento_string . ARROW NUMBER
    (103) clave_valor -> elemento_string . ARROW elemento_logico_pri

    ARROW           shift and go to state 201


state 183

    (100) clave_valor -> NUMBER . ARROW elemento_string
    (101) clave_valor -> NUMBER . ARROW NUMBER
    (102) clave_valor -> NUMBER . ARROW elemento_logico_pri
    (108) datos -> NUMBER .

    ARROW           shift and go to state 202
    COMMA           reduce using rule 108 (datos -> NUMBER .)
    RBRACKET        reduce using rule 108 (datos -> NUMBER .)


state 184

    (111) datos -> elemento_logico_pri .

    COMMA           reduce using rule 111 (datos -> elemento_logico_pri .)
    RBRACKET        reduce using rule 111 (datos -> elemento_logico_pri .)


state 185

    (107) datos -> FLOAT .

    COMMA           reduce using rule 107 (datos -> FLOAT .)
    RBRACKET        reduce using rule 107 (datos -> FLOAT .)


state 186

    (109) datos -> STRING .
    (28) elemento_string -> STRING .

    COMMA           reduce using rule 109 (datos -> STRING .)
    RBRACKET        reduce using rule 109 (datos -> STRING .)
    ARROW           reduce using rule 28 (elemento_string -> STRING .)


state 187

    (110) datos -> STRINGCC .
    (29) elemento_string -> STRINGCC .

    COMMA           reduce using rule 110 (datos -> STRINGCC .)
    RBRACKET        reduce using rule 110 (datos -> STRINGCC .)
    ARROW           reduce using rule 29 (elemento_string -> STRINGCC .)


state 188

    (72) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (31) elemento_logico -> . elemento_logico_pri
    (32) elemento_logico -> . elemento_logico_pri comparador elemento_logico_pri
    (33) elemento_logico -> . NOTLOGICAL elemento_logico_pri
    (34) elemento_logico -> . LPAREN elemento_logico_pri RPAREN
    (35) elemento_logico -> . VARIABLE
    (36) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (37) elemento_logico -> . elemento_string comparador elemento_string
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE
    (18) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (19) elemento_numerico -> . FLOAT
    (20) elemento_numerico -> . NUMBER
    (21) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (22) elemento_numerico -> . VARIABLE
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 48
    LPAREN          shift and go to state 121
    VARIABLE        shift and go to state 123
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    FLOAT           shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43

    elemento_logico                shift and go to state 203
    elemento_logico_pri            shift and go to state 47
    elemento_numerico              shift and go to state 124
    elemento_string                shift and go to state 125

state 189

    (74) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 74 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 190

    (88) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 204


state 191

    (87) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 205
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 192

    (92) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 206
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 193

    (85) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 207


state 194

    (90) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 90 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 90 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 90 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 195

    (95) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 208


state 196

    (96) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 209


state 197

    (97) map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 210


state 198

    (106) vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 211


state 199

    (105) todos_clave_valor -> clave_valor COMMA . todos_clave_valor
    (104) todos_clave_valor -> . clave_valor
    (105) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (98) clave_valor -> . elemento_string ARROW elemento_string
    (99) clave_valor -> . elemento_string ARROW NUMBER
    (100) clave_valor -> . NUMBER ARROW elemento_string
    (101) clave_valor -> . NUMBER ARROW NUMBER
    (102) clave_valor -> . NUMBER ARROW elemento_logico_pri
    (103) clave_valor -> . elemento_string ARROW elemento_logico_pri
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 213
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    VARIABLE        shift and go to state 142

    clave_valor                    shift and go to state 180
    todos_clave_valor              shift and go to state 212
    elemento_string                shift and go to state 182

state 200

    (113) llenar_vector -> datos COMMA . llenar_vector
    (112) llenar_vector -> . datos
    (113) llenar_vector -> . datos COMMA llenar_vector
    (107) datos -> . FLOAT
    (108) datos -> . NUMBER
    (109) datos -> . STRING
    (110) datos -> . STRINGCC
    (111) datos -> . elemento_logico_pri
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    FLOAT           shift and go to state 185
    NUMBER          shift and go to state 215
    STRING          shift and go to state 216
    STRINGCC        shift and go to state 217
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    datos                          shift and go to state 181
    llenar_vector                  shift and go to state 214
    elemento_logico_pri            shift and go to state 184

state 201

    (98) clave_valor -> elemento_string ARROW . elemento_string
    (99) clave_valor -> elemento_string ARROW . NUMBER
    (103) clave_valor -> elemento_string ARROW . elemento_logico_pri
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    NUMBER          shift and go to state 219
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_string                shift and go to state 218
    elemento_logico_pri            shift and go to state 220

state 202

    (100) clave_valor -> NUMBER ARROW . elemento_string
    (101) clave_valor -> NUMBER ARROW . NUMBER
    (102) clave_valor -> NUMBER ARROW . elemento_logico_pri
    (28) elemento_string -> . STRING
    (29) elemento_string -> . STRINGCC
    (30) elemento_string -> . VARIABLE
    (38) elemento_logico_pri -> . TRUE
    (39) elemento_logico_pri -> . FALSE

    NUMBER          shift and go to state 221
    STRING          shift and go to state 42
    STRINGCC        shift and go to state 43
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50

    elemento_string                shift and go to state 222
    elemento_logico_pri            shift and go to state 223

state 203

    (72) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN

    RPAREN          shift and go to state 224


state 204

    (88) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . map
    (9) expresion -> . vector
    (13) var_asignar -> . VARIABLE EQUALS VARIABLE SEMICOLON
    (14) var_asignar -> . VARIABLE EQUALS elemento_numerico SEMICOLON
    (15) var_asignar -> . VARIABLE EQUALS elemento_string SEMICOLON
    (16) var_asignar -> . VARIABLE EQUALS elemento_logico SEMICOLON
    (17) var_asignar -> . VARIABLE EQUALS funciones_ingreso_datos SEMICOLON
    (10) var_declarar -> . VAR var_asignar
    (61) expresiones_de_salida -> . echo
    (62) expresiones_de_salida -> . print
    (63) expresiones_de_salida -> . var_dump
    (64) expresiones_de_salida -> . print_r
    (65) expresiones_de_salida -> . var_export
    (75) estructuras_de_control -> . if_structures
    (76) estructuras_de_control -> . estructuras_while
    (11) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (12) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (97) map -> . VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON
    (106) vector -> . VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON
    (66) echo -> . ECHO params SEMICOLON
    (67) echo -> . ECHO params_points SEMICOLON
    (68) print -> . PRINT param SEMICOLON
    (70) var_dump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (69) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (71) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (77) if_structures -> . if
    (78) if_structures -> . if else
    (79) if_structures -> . if else_if else
    (80) if_structures -> . if else_if
    (81) if_structures -> . if_r ENDIF SEMICOLON
    (82) if_structures -> . if_r else_r ENDIF SEMICOLON
    (83) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (84) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (94) estructuras_while -> . while
    (85) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (90) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (95) while -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (96) while -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    VARIABLE        shift and go to state 10
    VAR             shift and go to state 11
    ECHO            shift and go to state 19
    PRINT           shift and go to state 20
    VAR_DUMP        shift and go to state 21
    PRINT_R         shift and go to state 22
    VAR_EXPORT      shift and go to state 23
    IF              shift and go to state 27
    WHILE           shift and go to state 28

    expresiones                    shift and go to state 225
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    map                            shift and go to state 8
    vector                         shift and go to state 9
    echo                           shift and go to state 12
    print                          shift and go to state 13
    var_dump                       shift and go to state 14
    print_r                        shift and go to state 15
    var_export                     shift and go to state 16
    if_structures                  shift and go to state 17
    estructuras_while              shift and go to state 18
    if                             shift and go to state 24
    if_r                           shift and go to state 25
    while                          shift and go to state 26

state 205

    (87) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 226


state 206

    (92) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 92 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 92 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 92 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 207

    (85) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 85 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 208

    (95) while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 95 (while -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 209

    (96) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 227


state 210

    (97) map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 228


state 211

    (106) vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 229


state 212

    (105) todos_clave_valor -> clave_valor COMMA todos_clave_valor .

    RBRACKET        reduce using rule 105 (todos_clave_valor -> clave_valor COMMA todos_clave_valor .)


state 213

    (100) clave_valor -> NUMBER . ARROW elemento_string
    (101) clave_valor -> NUMBER . ARROW NUMBER
    (102) clave_valor -> NUMBER . ARROW elemento_logico_pri

    ARROW           shift and go to state 202


state 214

    (113) llenar_vector -> datos COMMA llenar_vector .

    RBRACKET        reduce using rule 113 (llenar_vector -> datos COMMA llenar_vector .)


state 215

    (108) datos -> NUMBER .

    COMMA           reduce using rule 108 (datos -> NUMBER .)
    RBRACKET        reduce using rule 108 (datos -> NUMBER .)


state 216

    (109) datos -> STRING .

    COMMA           reduce using rule 109 (datos -> STRING .)
    RBRACKET        reduce using rule 109 (datos -> STRING .)


state 217

    (110) datos -> STRINGCC .

    COMMA           reduce using rule 110 (datos -> STRINGCC .)
    RBRACKET        reduce using rule 110 (datos -> STRINGCC .)


state 218

    (98) clave_valor -> elemento_string ARROW elemento_string .

    COMMA           reduce using rule 98 (clave_valor -> elemento_string ARROW elemento_string .)
    RBRACKET        reduce using rule 98 (clave_valor -> elemento_string ARROW elemento_string .)


state 219

    (99) clave_valor -> elemento_string ARROW NUMBER .

    COMMA           reduce using rule 99 (clave_valor -> elemento_string ARROW NUMBER .)
    RBRACKET        reduce using rule 99 (clave_valor -> elemento_string ARROW NUMBER .)


state 220

    (103) clave_valor -> elemento_string ARROW elemento_logico_pri .

    COMMA           reduce using rule 103 (clave_valor -> elemento_string ARROW elemento_logico_pri .)
    RBRACKET        reduce using rule 103 (clave_valor -> elemento_string ARROW elemento_logico_pri .)


state 221

    (101) clave_valor -> NUMBER ARROW NUMBER .

    COMMA           reduce using rule 101 (clave_valor -> NUMBER ARROW NUMBER .)
    RBRACKET        reduce using rule 101 (clave_valor -> NUMBER ARROW NUMBER .)


state 222

    (100) clave_valor -> NUMBER ARROW elemento_string .

    COMMA           reduce using rule 100 (clave_valor -> NUMBER ARROW elemento_string .)
    RBRACKET        reduce using rule 100 (clave_valor -> NUMBER ARROW elemento_string .)


state 223

    (102) clave_valor -> NUMBER ARROW elemento_logico_pri .

    COMMA           reduce using rule 102 (clave_valor -> NUMBER ARROW elemento_logico_pri .)
    RBRACKET        reduce using rule 102 (clave_valor -> NUMBER ARROW elemento_logico_pri .)


state 224

    (72) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 72 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 225

    (88) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 230


state 226

    (87) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 87 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 227

    (96) while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    VARIABLE        reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 96 (while -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 228

    (97) map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 97 (map -> VARIABLE EQUALS NEW LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN SEMICOLON .)


state 229

    (106) vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 106 (vector -> VARIABLE EQUALS NEW LPAREN LBRACKET llenar_vector RBRACKET RPAREN SEMICOLON .)


state 230

    (88) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 88 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 24 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 24 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 56 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 56 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 66 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 66 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 66 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 109 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 109 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 143 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 143 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 37 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 37
WARNING: reduce/reduce conflict in state 38 resolved using rule (elemento_string -> VARIABLE)
WARNING: rejected rule (param -> VARIABLE) in state 38
WARNING: reduce/reduce conflict in state 38 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 38
WARNING: reduce/reduce conflict in state 38 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 38
WARNING: reduce/reduce conflict in state 66 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 66
WARNING: reduce/reduce conflict in state 123 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 123
WARNING: Rule (param -> VARIABLE) is never reduced
