Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ID

Grammar

Rule 0     S' -> expresiones
Rule 1     expresiones -> expresion
Rule 2     expresiones -> expresion expresiones
Rule 3     expresion -> var_asignar
Rule 4     expresion -> var_declarar
Rule 5     expresion -> expresiones_de_salida
Rule 6     expresion -> estructuras_de_control
Rule 7     expresion -> var_plusminus
Rule 8     expresion -> funciones_datos_estructurados
Rule 9     expresion -> funcion_declaracion
Rule 10    expresion -> return
Rule 11    expresion -> funcion_ejecucion
Rule 12    expresion -> foreach
Rule 13    param -> VARIABLE
Rule 14    param -> elemento_string
Rule 15    param -> elemento_numerico
Rule 16    param -> elemento_logico
Rule 17    param -> VARIABLE LBRACKET VARIABLE RBRACKET
Rule 18    params -> param
Rule 19    params -> param COMMA params
Rule 20    params_points -> param
Rule 21    params_points -> param POINT params_points
Rule 22    params_unitype -> only_string
Rule 23    params_unitype -> only_numerico
Rule 24    params_unitype -> only_logico
Rule 25    only_string -> elemento_string
Rule 26    only_string -> elemento_string COMMA only_string
Rule 27    only_numerico -> elemento_numerico
Rule 28    only_numerico -> elemento_numerico COMMA only_numerico
Rule 29    only_logico -> elemento_logico
Rule 30    only_logico -> elemento_logico COMMA only_logico
Rule 31    optional_params -> param
Rule 32    optional_params -> 
Rule 33    optional_params -> param COMMA optional_params
Rule 34    expresiones_de_salida -> echo
Rule 35    expresiones_de_salida -> print
Rule 36    expresiones_de_salida -> vardump
Rule 37    expresiones_de_salida -> print_r
Rule 38    expresiones_de_salida -> var_export
Rule 39    echo -> ECHO params SEMICOLON
Rule 40    echo -> ECHO params_points SEMICOLON
Rule 41    print -> PRINT param SEMICOLON
Rule 42    print_r -> PRINT_R LPAREN param RPAREN SEMICOLON
Rule 43    vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON
Rule 44    var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON
Rule 45    funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
Rule 46    funciones_ingreso_datos -> READLINE LPAREN RPAREN
Rule 47    funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN
Rule 48    estructuras_de_control -> if_structures
Rule 49    estructuras_de_control -> estructuras_while
Rule 50    if_structures -> if
Rule 51    if_structures -> if else
Rule 52    if_structures -> if else_if else
Rule 53    if_structures -> if else_if
Rule 54    if_structures -> if_r ENDIF SEMICOLON
Rule 55    if_structures -> if_r else_r ENDIF SEMICOLON
Rule 56    if_structures -> if_r elseif_r else_r ENDIF SEMICOLON
Rule 57    if_structures -> if_r elseif_r ENDIF SEMICOLON
Rule 58    if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 59    else -> ELSE LCURLY expresiones RCURLY
Rule 60    else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 61    else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 62    else_if -> else_if else_if
Rule 63    if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 64    else_r -> ELSE DOUBLEPOINT expresiones
Rule 65    elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
Rule 66    elseif_r -> elseif_r elseif_r
Rule 67    estructuras_while -> while_p
Rule 68    while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
Rule 69    while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
Rule 70    foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
Rule 71    foreach_content -> VARIABLE AS VARIABLE
Rule 72    foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE
Rule 73    funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo
Rule 74    funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 75    funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 76    funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
Rule 77    funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo
Rule 78    funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN
Rule 79    funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN
Rule 80    funciones_cuerpo -> LCURLY expresiones RCURLY
Rule 81    funciones_cuerpo -> LCURLY RCURLY
Rule 82    return -> RETURN var_asignar_contenido SEMICOLON
Rule 83    funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
Rule 84    funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
Rule 85    funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 86    funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON
Rule 87    funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo
Rule 88    funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo
Rule 89    variables_por_comma -> VARIABLE
Rule 90    variables_por_comma -> VARIABLE COMMA variables_por_comma
Rule 91    datos_estructurados -> map
Rule 92    datos_estructurados -> vector
Rule 93    datos_estructurados -> set
Rule 94    map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
Rule 95    map -> NEW MAP LPAREN RPAREN
Rule 96    clave_valor -> elemento_string ARROW param
Rule 97    clave_valor -> NUMBER ARROW param
Rule 98    todos_clave_valor -> clave_valor
Rule 99    todos_clave_valor -> clave_valor COMMA todos_clave_valor
Rule 100   vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
Rule 101   vector -> NEW VECTOR LPAREN RPAREN
Rule 102   datos -> FLOAT
Rule 103   datos -> NUMBER
Rule 104   datos -> STRING
Rule 105   datos -> STRINGCC
Rule 106   datos -> elemento_logico_pri
Rule 107   llenar -> datos
Rule 108   llenar -> datos COMMA llenar
Rule 109   set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN
Rule 110   set -> NEW SET LPAREN RPAREN
Rule 111   funciones_datos_estructurados -> funciones_map
Rule 112   funciones_datos_estructurados -> funciones_set
Rule 113   funciones_datos_estructurados -> funciones_vector
Rule 114   funciones_map -> key_map
Rule 115   funciones_map -> diff_map
Rule 116   key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
Rule 117   diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
Rule 118   funciones_vector -> find_vector
Rule 119   funciones_vector -> push_vector
Rule 120   find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
Rule 121   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
Rule 122   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
Rule 123   push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON
Rule 124   funciones_set -> union_set
Rule 125   funciones_set -> remove_set
Rule 126   union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
Rule 127   remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
Rule 128   remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
Rule 129   var_declarar -> VAR var_asignar
Rule 130   var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON
Rule 131   var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima
Rule 132   var_asignar_contenido -> VARIABLE
Rule 133   var_asignar_contenido -> elemento_numerico
Rule 134   var_asignar_contenido -> elemento_string
Rule 135   var_asignar_contenido -> elemento_logico
Rule 136   var_asignar_contenido -> datos_estructurados
Rule 137   var_asignar_contenido -> funciones_ingreso_datos
Rule 138   var_plusminus -> VARIABLE PLUS PLUS SEMICOLON
Rule 139   var_plusminus -> VARIABLE MINUS MINUS SEMICOLON
Rule 140   elemento_numerico -> elemento_numerico operador elemento_numerico
Rule 141   elemento_numerico -> FLOAT
Rule 142   elemento_numerico -> NUMBER
Rule 143   elemento_numerico -> LPAREN elemento_numerico RPAREN
Rule 144   elemento_numerico -> VARIABLE
Rule 145   operador -> PLUS
Rule 146   operador -> MINUS
Rule 147   operador -> DIVIDE
Rule 148   operador -> EXPONENTIAL
Rule 149   operador -> TIMES
Rule 150   elemento_string -> STRING
Rule 151   elemento_string -> STRINGCC
Rule 152   elemento_string -> VARIABLE
Rule 153   elemento_logico -> elemento_logico_pri
Rule 154   elemento_logico -> elemento_logico comparador elemento_logico
Rule 155   elemento_logico -> NOTLOGICAL elemento_logico
Rule 156   elemento_logico -> VARIABLE
Rule 157   elemento_logico -> elemento_numerico comparador elemento_numerico
Rule 158   elemento_logico -> elemento_string comparador elemento_string
Rule 159   elemento_logico_pri -> TRUE
Rule 160   elemento_logico_pri -> FALSE
Rule 161   comparador -> IDENTICAL
Rule 162   comparador -> NOTIDENTICAL
Rule 163   comparador -> EQUALSLOGICAL
Rule 164   comparador -> DIFFERENT
Rule 165   comparador -> GREATEREQUAL
Rule 166   comparador -> LESSEQUAL
Rule 167   comparador -> GREATERTHAN
Rule 168   comparador -> LESSTHAN
Rule 169   comparador -> ANDlOGICAL
Rule 170   comparador -> ORLOGICAL

Terminals, with rules where they appear

                     : 32
ANDlOGICAL           : 169
ARROW                : 72 96 97
AS                   : 71 72
COMMA                : 19 26 28 30 33 45 90 99 108
DIFF                 : 117
DIFFERENT            : 164
DIVIDE               : 147
DOUBLEPOINT          : 63 64 65 69
ECHO                 : 39 40
ELSE                 : 59 61 64
ELSEIF               : 60 65
ENDIF                : 54 55 56 57
ENDWHILE             : 69
EQUALS               : 74 75 130 131
EQUALSLOGICAL        : 163
EXPONENTIAL          : 148
FALSE                : 160
FIND                 : 120
FLOAT                : 102 141
FOREACH              : 70
FUNCTION             : 73 74 75 76 77 87 88
FUNCTION_NAME        : 78 79 83 84
GREATEREQUAL         : 165
GREATERTHAN          : 167
ID                   : 
IDENTICAL            : 161
IF                   : 58 61 63
KEYS                 : 116
LBRACKET             : 17 94 100 109 123 128
LCURLY               : 58 59 60 61 68 70 80 81
LESSEQUAL            : 166
LESSTHAN             : 168
LPAREN               : 42 43 44 45 46 47 58 60 61 63 65 68 69 70 74 75 76 77 78 79 83 84 85 86 87 88 94 95 100 101 109 110 116 116 117 117 120 120 121 122 123 126 126 127 128 143
MAP                  : 94 95
MINUS                : 139 139 146
NEW                  : 94 95 100 101 109 110
NOTIDENTICAL         : 162
NOTLOGICAL           : 155
NUMBER               : 97 103 142
ORLOGICAL            : 170
PLUS                 : 138 138 145
POINT                : 21
PRINT                : 41
PRINT_R              : 42
PUSH                 : 121 122 123
RBRACKET             : 17 94 100 109 123 128
RCURLY               : 58 59 60 61 68 70 80 81
READLINE             : 46 47
REMOVE               : 127 128
RETURN               : 82
RPAREN               : 42 43 44 45 46 47 58 60 61 63 65 68 69 70 74 75 76 77 78 79 83 84 85 86 87 88 94 95 100 101 109 110 116 116 117 117 120 120 121 122 123 126 126 127 128 143
SEMICOLON            : 39 40 41 42 43 44 54 55 56 57 69 82 83 84 85 86 116 117 120 121 122 123 126 127 128 130 138 139
SET                  : 109 110
SIMPLEARROW          : 116 117 120 121 122 123 126 127 128
STRING               : 104 150
STRINGCC             : 105 151
TIMES                : 149
TRUE                 : 159
UNION                : 126
VAR                  : 75 129
VARIABLE             : 13 17 17 71 71 72 72 72 74 75 85 86 89 90 116 117 117 120 121 122 123 126 126 127 128 130 131 132 138 139 144 152 156
VAR_DUMP             : 43 116 117 120 126
VAR_EXPORT           : 44 45
VECTOR               : 100 101
WHILE                : 68 69
error                : 

Nonterminals, with rules where they appear

clave_valor          : 98 99
comparador           : 154 157 158
datos                : 107 108
datos_estructurados  : 136
diff_map             : 115
echo                 : 34
elemento_logico      : 16 29 30 45 58 60 61 63 65 68 69 135 154 154 155
elemento_logico_pri  : 106 153
elemento_numerico    : 15 27 28 133 140 140 143 157 157
elemento_string      : 14 25 26 47 96 134 158 158
else                 : 51 52
else_if              : 52 53 62 62
else_r               : 55 56
elseif_r             : 56 57 66 66
estructuras_de_control : 6
estructuras_while    : 49
expresion            : 1 2
expresiones          : 2 58 59 60 61 63 64 65 68 69 70 80 0
expresiones_de_salida : 5
find_vector          : 118
foreach              : 12
foreach_content      : 70
funcion_cabecera_declaracion : 73
funcion_declaracion  : 9
funcion_declaracion_anonima : 131
funcion_ejecucion    : 11
funciones_cuerpo     : 73 74 75 76 77 83 84 87 88
funciones_datos_estructurados : 8
funciones_ingreso_datos : 137
funciones_map        : 111
funciones_set        : 112
funciones_vector     : 113
if                   : 50 51 52 53
if_r                 : 54 55 56 57
if_structures        : 48
key_map              : 114
llenar               : 108
map                  : 91
only_logico          : 24 30
only_numerico        : 23 28
only_string          : 22 26
operador             : 140
optional_params      : 33
param                : 18 19 20 21 31 33 41 42 43 44 45 96 97 120 121
params               : 19 39 83 86 87 100 109 122 123
params_points        : 21 40
params_unitype       : 127 128
print                : 35
print_r              : 37
push_vector          : 119
remove_set           : 125
return               : 10
set                  : 93
todos_clave_valor    : 94 99
union_set            : 124
var_asignar          : 3 129
var_asignar_contenido : 82 130
var_declarar         : 4
var_export           : 38
var_plusminus        : 7
vardump              : 36
variables_por_comma  : 74 75 76 78 90
vector               : 92
while_p              : 67

Parsing method: LALR

state 0

    (0) S' -> . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 1
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 1

    (0) S' -> expresiones .



state 2

    (1) expresiones -> expresion .
    (2) expresiones -> expresion . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    $end            reduce using rule 1 (expresiones -> expresion .)
    RCURLY          reduce using rule 1 (expresiones -> expresion .)
    ENDIF           reduce using rule 1 (expresiones -> expresion .)
    ELSE            reduce using rule 1 (expresiones -> expresion .)
    ELSEIF          reduce using rule 1 (expresiones -> expresion .)
    ENDWHILE        reduce using rule 1 (expresiones -> expresion .)
    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresion                      shift and go to state 2
    expresiones                    shift and go to state 45
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 3

    (3) expresion -> var_asignar .

    VARIABLE        reduce using rule 3 (expresion -> var_asignar .)
    VAR             reduce using rule 3 (expresion -> var_asignar .)
    FUNCTION        reduce using rule 3 (expresion -> var_asignar .)
    RETURN          reduce using rule 3 (expresion -> var_asignar .)
    FUNCTION_NAME   reduce using rule 3 (expresion -> var_asignar .)
    FOREACH         reduce using rule 3 (expresion -> var_asignar .)
    ECHO            reduce using rule 3 (expresion -> var_asignar .)
    PRINT           reduce using rule 3 (expresion -> var_asignar .)
    VAR_DUMP        reduce using rule 3 (expresion -> var_asignar .)
    PRINT_R         reduce using rule 3 (expresion -> var_asignar .)
    VAR_EXPORT      reduce using rule 3 (expresion -> var_asignar .)
    IF              reduce using rule 3 (expresion -> var_asignar .)
    WHILE           reduce using rule 3 (expresion -> var_asignar .)
    $end            reduce using rule 3 (expresion -> var_asignar .)
    RCURLY          reduce using rule 3 (expresion -> var_asignar .)
    ENDIF           reduce using rule 3 (expresion -> var_asignar .)
    ELSE            reduce using rule 3 (expresion -> var_asignar .)
    ELSEIF          reduce using rule 3 (expresion -> var_asignar .)
    ENDWHILE        reduce using rule 3 (expresion -> var_asignar .)


state 4

    (4) expresion -> var_declarar .

    VARIABLE        reduce using rule 4 (expresion -> var_declarar .)
    VAR             reduce using rule 4 (expresion -> var_declarar .)
    FUNCTION        reduce using rule 4 (expresion -> var_declarar .)
    RETURN          reduce using rule 4 (expresion -> var_declarar .)
    FUNCTION_NAME   reduce using rule 4 (expresion -> var_declarar .)
    FOREACH         reduce using rule 4 (expresion -> var_declarar .)
    ECHO            reduce using rule 4 (expresion -> var_declarar .)
    PRINT           reduce using rule 4 (expresion -> var_declarar .)
    VAR_DUMP        reduce using rule 4 (expresion -> var_declarar .)
    PRINT_R         reduce using rule 4 (expresion -> var_declarar .)
    VAR_EXPORT      reduce using rule 4 (expresion -> var_declarar .)
    IF              reduce using rule 4 (expresion -> var_declarar .)
    WHILE           reduce using rule 4 (expresion -> var_declarar .)
    $end            reduce using rule 4 (expresion -> var_declarar .)
    RCURLY          reduce using rule 4 (expresion -> var_declarar .)
    ENDIF           reduce using rule 4 (expresion -> var_declarar .)
    ELSE            reduce using rule 4 (expresion -> var_declarar .)
    ELSEIF          reduce using rule 4 (expresion -> var_declarar .)
    ENDWHILE        reduce using rule 4 (expresion -> var_declarar .)


state 5

    (5) expresion -> expresiones_de_salida .

    VARIABLE        reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR             reduce using rule 5 (expresion -> expresiones_de_salida .)
    FUNCTION        reduce using rule 5 (expresion -> expresiones_de_salida .)
    RETURN          reduce using rule 5 (expresion -> expresiones_de_salida .)
    FUNCTION_NAME   reduce using rule 5 (expresion -> expresiones_de_salida .)
    FOREACH         reduce using rule 5 (expresion -> expresiones_de_salida .)
    ECHO            reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT           reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_DUMP        reduce using rule 5 (expresion -> expresiones_de_salida .)
    PRINT_R         reduce using rule 5 (expresion -> expresiones_de_salida .)
    VAR_EXPORT      reduce using rule 5 (expresion -> expresiones_de_salida .)
    IF              reduce using rule 5 (expresion -> expresiones_de_salida .)
    WHILE           reduce using rule 5 (expresion -> expresiones_de_salida .)
    $end            reduce using rule 5 (expresion -> expresiones_de_salida .)
    RCURLY          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDIF           reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSE            reduce using rule 5 (expresion -> expresiones_de_salida .)
    ELSEIF          reduce using rule 5 (expresion -> expresiones_de_salida .)
    ENDWHILE        reduce using rule 5 (expresion -> expresiones_de_salida .)


state 6

    (6) expresion -> estructuras_de_control .

    VARIABLE        reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR             reduce using rule 6 (expresion -> estructuras_de_control .)
    FUNCTION        reduce using rule 6 (expresion -> estructuras_de_control .)
    RETURN          reduce using rule 6 (expresion -> estructuras_de_control .)
    FUNCTION_NAME   reduce using rule 6 (expresion -> estructuras_de_control .)
    FOREACH         reduce using rule 6 (expresion -> estructuras_de_control .)
    ECHO            reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT           reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_DUMP        reduce using rule 6 (expresion -> estructuras_de_control .)
    PRINT_R         reduce using rule 6 (expresion -> estructuras_de_control .)
    VAR_EXPORT      reduce using rule 6 (expresion -> estructuras_de_control .)
    IF              reduce using rule 6 (expresion -> estructuras_de_control .)
    WHILE           reduce using rule 6 (expresion -> estructuras_de_control .)
    $end            reduce using rule 6 (expresion -> estructuras_de_control .)
    RCURLY          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDIF           reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSE            reduce using rule 6 (expresion -> estructuras_de_control .)
    ELSEIF          reduce using rule 6 (expresion -> estructuras_de_control .)
    ENDWHILE        reduce using rule 6 (expresion -> estructuras_de_control .)


state 7

    (7) expresion -> var_plusminus .

    VARIABLE        reduce using rule 7 (expresion -> var_plusminus .)
    VAR             reduce using rule 7 (expresion -> var_plusminus .)
    FUNCTION        reduce using rule 7 (expresion -> var_plusminus .)
    RETURN          reduce using rule 7 (expresion -> var_plusminus .)
    FUNCTION_NAME   reduce using rule 7 (expresion -> var_plusminus .)
    FOREACH         reduce using rule 7 (expresion -> var_plusminus .)
    ECHO            reduce using rule 7 (expresion -> var_plusminus .)
    PRINT           reduce using rule 7 (expresion -> var_plusminus .)
    VAR_DUMP        reduce using rule 7 (expresion -> var_plusminus .)
    PRINT_R         reduce using rule 7 (expresion -> var_plusminus .)
    VAR_EXPORT      reduce using rule 7 (expresion -> var_plusminus .)
    IF              reduce using rule 7 (expresion -> var_plusminus .)
    WHILE           reduce using rule 7 (expresion -> var_plusminus .)
    $end            reduce using rule 7 (expresion -> var_plusminus .)
    RCURLY          reduce using rule 7 (expresion -> var_plusminus .)
    ENDIF           reduce using rule 7 (expresion -> var_plusminus .)
    ELSE            reduce using rule 7 (expresion -> var_plusminus .)
    ELSEIF          reduce using rule 7 (expresion -> var_plusminus .)
    ENDWHILE        reduce using rule 7 (expresion -> var_plusminus .)


state 8

    (8) expresion -> funciones_datos_estructurados .

    VARIABLE        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR             reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FUNCTION        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    RETURN          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FUNCTION_NAME   reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    FOREACH         reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ECHO            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    PRINT           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR_DUMP        reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    PRINT_R         reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    VAR_EXPORT      reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    IF              reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    WHILE           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    $end            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    RCURLY          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ENDIF           reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ELSE            reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ELSEIF          reduce using rule 8 (expresion -> funciones_datos_estructurados .)
    ENDWHILE        reduce using rule 8 (expresion -> funciones_datos_estructurados .)


state 9

    (9) expresion -> funcion_declaracion .

    VARIABLE        reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR             reduce using rule 9 (expresion -> funcion_declaracion .)
    FUNCTION        reduce using rule 9 (expresion -> funcion_declaracion .)
    RETURN          reduce using rule 9 (expresion -> funcion_declaracion .)
    FUNCTION_NAME   reduce using rule 9 (expresion -> funcion_declaracion .)
    FOREACH         reduce using rule 9 (expresion -> funcion_declaracion .)
    ECHO            reduce using rule 9 (expresion -> funcion_declaracion .)
    PRINT           reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR_DUMP        reduce using rule 9 (expresion -> funcion_declaracion .)
    PRINT_R         reduce using rule 9 (expresion -> funcion_declaracion .)
    VAR_EXPORT      reduce using rule 9 (expresion -> funcion_declaracion .)
    IF              reduce using rule 9 (expresion -> funcion_declaracion .)
    WHILE           reduce using rule 9 (expresion -> funcion_declaracion .)
    $end            reduce using rule 9 (expresion -> funcion_declaracion .)
    RCURLY          reduce using rule 9 (expresion -> funcion_declaracion .)
    ENDIF           reduce using rule 9 (expresion -> funcion_declaracion .)
    ELSE            reduce using rule 9 (expresion -> funcion_declaracion .)
    ELSEIF          reduce using rule 9 (expresion -> funcion_declaracion .)
    ENDWHILE        reduce using rule 9 (expresion -> funcion_declaracion .)


state 10

    (10) expresion -> return .

    VARIABLE        reduce using rule 10 (expresion -> return .)
    VAR             reduce using rule 10 (expresion -> return .)
    FUNCTION        reduce using rule 10 (expresion -> return .)
    RETURN          reduce using rule 10 (expresion -> return .)
    FUNCTION_NAME   reduce using rule 10 (expresion -> return .)
    FOREACH         reduce using rule 10 (expresion -> return .)
    ECHO            reduce using rule 10 (expresion -> return .)
    PRINT           reduce using rule 10 (expresion -> return .)
    VAR_DUMP        reduce using rule 10 (expresion -> return .)
    PRINT_R         reduce using rule 10 (expresion -> return .)
    VAR_EXPORT      reduce using rule 10 (expresion -> return .)
    IF              reduce using rule 10 (expresion -> return .)
    WHILE           reduce using rule 10 (expresion -> return .)
    $end            reduce using rule 10 (expresion -> return .)
    RCURLY          reduce using rule 10 (expresion -> return .)
    ENDIF           reduce using rule 10 (expresion -> return .)
    ELSE            reduce using rule 10 (expresion -> return .)
    ELSEIF          reduce using rule 10 (expresion -> return .)
    ENDWHILE        reduce using rule 10 (expresion -> return .)


state 11

    (11) expresion -> funcion_ejecucion .

    VARIABLE        reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR             reduce using rule 11 (expresion -> funcion_ejecucion .)
    FUNCTION        reduce using rule 11 (expresion -> funcion_ejecucion .)
    RETURN          reduce using rule 11 (expresion -> funcion_ejecucion .)
    FUNCTION_NAME   reduce using rule 11 (expresion -> funcion_ejecucion .)
    FOREACH         reduce using rule 11 (expresion -> funcion_ejecucion .)
    ECHO            reduce using rule 11 (expresion -> funcion_ejecucion .)
    PRINT           reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR_DUMP        reduce using rule 11 (expresion -> funcion_ejecucion .)
    PRINT_R         reduce using rule 11 (expresion -> funcion_ejecucion .)
    VAR_EXPORT      reduce using rule 11 (expresion -> funcion_ejecucion .)
    IF              reduce using rule 11 (expresion -> funcion_ejecucion .)
    WHILE           reduce using rule 11 (expresion -> funcion_ejecucion .)
    $end            reduce using rule 11 (expresion -> funcion_ejecucion .)
    RCURLY          reduce using rule 11 (expresion -> funcion_ejecucion .)
    ENDIF           reduce using rule 11 (expresion -> funcion_ejecucion .)
    ELSE            reduce using rule 11 (expresion -> funcion_ejecucion .)
    ELSEIF          reduce using rule 11 (expresion -> funcion_ejecucion .)
    ENDWHILE        reduce using rule 11 (expresion -> funcion_ejecucion .)


state 12

    (12) expresion -> foreach .

    VARIABLE        reduce using rule 12 (expresion -> foreach .)
    VAR             reduce using rule 12 (expresion -> foreach .)
    FUNCTION        reduce using rule 12 (expresion -> foreach .)
    RETURN          reduce using rule 12 (expresion -> foreach .)
    FUNCTION_NAME   reduce using rule 12 (expresion -> foreach .)
    FOREACH         reduce using rule 12 (expresion -> foreach .)
    ECHO            reduce using rule 12 (expresion -> foreach .)
    PRINT           reduce using rule 12 (expresion -> foreach .)
    VAR_DUMP        reduce using rule 12 (expresion -> foreach .)
    PRINT_R         reduce using rule 12 (expresion -> foreach .)
    VAR_EXPORT      reduce using rule 12 (expresion -> foreach .)
    IF              reduce using rule 12 (expresion -> foreach .)
    WHILE           reduce using rule 12 (expresion -> foreach .)
    $end            reduce using rule 12 (expresion -> foreach .)
    RCURLY          reduce using rule 12 (expresion -> foreach .)
    ENDIF           reduce using rule 12 (expresion -> foreach .)
    ELSE            reduce using rule 12 (expresion -> foreach .)
    ELSEIF          reduce using rule 12 (expresion -> foreach .)
    ENDWHILE        reduce using rule 12 (expresion -> foreach .)


state 13

    (130) var_asignar -> VARIABLE . EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> VARIABLE . EQUALS funcion_declaracion_anonima
    (138) var_plusminus -> VARIABLE . PLUS PLUS SEMICOLON
    (139) var_plusminus -> VARIABLE . MINUS MINUS SEMICOLON
    (74) funcion_declaracion -> VARIABLE . EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (85) funcion_ejecucion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> VARIABLE . LPAREN params RPAREN SEMICOLON
    (127) remove_set -> VARIABLE . SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> VARIABLE . SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (121) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> VARIABLE . SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    EQUALS          shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    LPAREN          shift and go to state 49
    SIMPLEARROW     shift and go to state 50


state 14

    (129) var_declarar -> VAR . var_asignar
    (75) funcion_declaracion -> VAR . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima

    VARIABLE        shift and go to state 52

    var_asignar                    shift and go to state 51

state 15

    (34) expresiones_de_salida -> echo .

    VARIABLE        reduce using rule 34 (expresiones_de_salida -> echo .)
    VAR             reduce using rule 34 (expresiones_de_salida -> echo .)
    FUNCTION        reduce using rule 34 (expresiones_de_salida -> echo .)
    RETURN          reduce using rule 34 (expresiones_de_salida -> echo .)
    FUNCTION_NAME   reduce using rule 34 (expresiones_de_salida -> echo .)
    FOREACH         reduce using rule 34 (expresiones_de_salida -> echo .)
    ECHO            reduce using rule 34 (expresiones_de_salida -> echo .)
    PRINT           reduce using rule 34 (expresiones_de_salida -> echo .)
    VAR_DUMP        reduce using rule 34 (expresiones_de_salida -> echo .)
    PRINT_R         reduce using rule 34 (expresiones_de_salida -> echo .)
    VAR_EXPORT      reduce using rule 34 (expresiones_de_salida -> echo .)
    IF              reduce using rule 34 (expresiones_de_salida -> echo .)
    WHILE           reduce using rule 34 (expresiones_de_salida -> echo .)
    $end            reduce using rule 34 (expresiones_de_salida -> echo .)
    RCURLY          reduce using rule 34 (expresiones_de_salida -> echo .)
    ENDIF           reduce using rule 34 (expresiones_de_salida -> echo .)
    ELSE            reduce using rule 34 (expresiones_de_salida -> echo .)
    ELSEIF          reduce using rule 34 (expresiones_de_salida -> echo .)
    ENDWHILE        reduce using rule 34 (expresiones_de_salida -> echo .)


state 16

    (35) expresiones_de_salida -> print .

    VARIABLE        reduce using rule 35 (expresiones_de_salida -> print .)
    VAR             reduce using rule 35 (expresiones_de_salida -> print .)
    FUNCTION        reduce using rule 35 (expresiones_de_salida -> print .)
    RETURN          reduce using rule 35 (expresiones_de_salida -> print .)
    FUNCTION_NAME   reduce using rule 35 (expresiones_de_salida -> print .)
    FOREACH         reduce using rule 35 (expresiones_de_salida -> print .)
    ECHO            reduce using rule 35 (expresiones_de_salida -> print .)
    PRINT           reduce using rule 35 (expresiones_de_salida -> print .)
    VAR_DUMP        reduce using rule 35 (expresiones_de_salida -> print .)
    PRINT_R         reduce using rule 35 (expresiones_de_salida -> print .)
    VAR_EXPORT      reduce using rule 35 (expresiones_de_salida -> print .)
    IF              reduce using rule 35 (expresiones_de_salida -> print .)
    WHILE           reduce using rule 35 (expresiones_de_salida -> print .)
    $end            reduce using rule 35 (expresiones_de_salida -> print .)
    RCURLY          reduce using rule 35 (expresiones_de_salida -> print .)
    ENDIF           reduce using rule 35 (expresiones_de_salida -> print .)
    ELSE            reduce using rule 35 (expresiones_de_salida -> print .)
    ELSEIF          reduce using rule 35 (expresiones_de_salida -> print .)
    ENDWHILE        reduce using rule 35 (expresiones_de_salida -> print .)


state 17

    (36) expresiones_de_salida -> vardump .

    VARIABLE        reduce using rule 36 (expresiones_de_salida -> vardump .)
    VAR             reduce using rule 36 (expresiones_de_salida -> vardump .)
    FUNCTION        reduce using rule 36 (expresiones_de_salida -> vardump .)
    RETURN          reduce using rule 36 (expresiones_de_salida -> vardump .)
    FUNCTION_NAME   reduce using rule 36 (expresiones_de_salida -> vardump .)
    FOREACH         reduce using rule 36 (expresiones_de_salida -> vardump .)
    ECHO            reduce using rule 36 (expresiones_de_salida -> vardump .)
    PRINT           reduce using rule 36 (expresiones_de_salida -> vardump .)
    VAR_DUMP        reduce using rule 36 (expresiones_de_salida -> vardump .)
    PRINT_R         reduce using rule 36 (expresiones_de_salida -> vardump .)
    VAR_EXPORT      reduce using rule 36 (expresiones_de_salida -> vardump .)
    IF              reduce using rule 36 (expresiones_de_salida -> vardump .)
    WHILE           reduce using rule 36 (expresiones_de_salida -> vardump .)
    $end            reduce using rule 36 (expresiones_de_salida -> vardump .)
    RCURLY          reduce using rule 36 (expresiones_de_salida -> vardump .)
    ENDIF           reduce using rule 36 (expresiones_de_salida -> vardump .)
    ELSE            reduce using rule 36 (expresiones_de_salida -> vardump .)
    ELSEIF          reduce using rule 36 (expresiones_de_salida -> vardump .)
    ENDWHILE        reduce using rule 36 (expresiones_de_salida -> vardump .)


state 18

    (37) expresiones_de_salida -> print_r .

    VARIABLE        reduce using rule 37 (expresiones_de_salida -> print_r .)
    VAR             reduce using rule 37 (expresiones_de_salida -> print_r .)
    FUNCTION        reduce using rule 37 (expresiones_de_salida -> print_r .)
    RETURN          reduce using rule 37 (expresiones_de_salida -> print_r .)
    FUNCTION_NAME   reduce using rule 37 (expresiones_de_salida -> print_r .)
    FOREACH         reduce using rule 37 (expresiones_de_salida -> print_r .)
    ECHO            reduce using rule 37 (expresiones_de_salida -> print_r .)
    PRINT           reduce using rule 37 (expresiones_de_salida -> print_r .)
    VAR_DUMP        reduce using rule 37 (expresiones_de_salida -> print_r .)
    PRINT_R         reduce using rule 37 (expresiones_de_salida -> print_r .)
    VAR_EXPORT      reduce using rule 37 (expresiones_de_salida -> print_r .)
    IF              reduce using rule 37 (expresiones_de_salida -> print_r .)
    WHILE           reduce using rule 37 (expresiones_de_salida -> print_r .)
    $end            reduce using rule 37 (expresiones_de_salida -> print_r .)
    RCURLY          reduce using rule 37 (expresiones_de_salida -> print_r .)
    ENDIF           reduce using rule 37 (expresiones_de_salida -> print_r .)
    ELSE            reduce using rule 37 (expresiones_de_salida -> print_r .)
    ELSEIF          reduce using rule 37 (expresiones_de_salida -> print_r .)
    ENDWHILE        reduce using rule 37 (expresiones_de_salida -> print_r .)


state 19

    (38) expresiones_de_salida -> var_export .

    VARIABLE        reduce using rule 38 (expresiones_de_salida -> var_export .)
    VAR             reduce using rule 38 (expresiones_de_salida -> var_export .)
    FUNCTION        reduce using rule 38 (expresiones_de_salida -> var_export .)
    RETURN          reduce using rule 38 (expresiones_de_salida -> var_export .)
    FUNCTION_NAME   reduce using rule 38 (expresiones_de_salida -> var_export .)
    FOREACH         reduce using rule 38 (expresiones_de_salida -> var_export .)
    ECHO            reduce using rule 38 (expresiones_de_salida -> var_export .)
    PRINT           reduce using rule 38 (expresiones_de_salida -> var_export .)
    VAR_DUMP        reduce using rule 38 (expresiones_de_salida -> var_export .)
    PRINT_R         reduce using rule 38 (expresiones_de_salida -> var_export .)
    VAR_EXPORT      reduce using rule 38 (expresiones_de_salida -> var_export .)
    IF              reduce using rule 38 (expresiones_de_salida -> var_export .)
    WHILE           reduce using rule 38 (expresiones_de_salida -> var_export .)
    $end            reduce using rule 38 (expresiones_de_salida -> var_export .)
    RCURLY          reduce using rule 38 (expresiones_de_salida -> var_export .)
    ENDIF           reduce using rule 38 (expresiones_de_salida -> var_export .)
    ELSE            reduce using rule 38 (expresiones_de_salida -> var_export .)
    ELSEIF          reduce using rule 38 (expresiones_de_salida -> var_export .)
    ENDWHILE        reduce using rule 38 (expresiones_de_salida -> var_export .)


state 20

    (48) estructuras_de_control -> if_structures .

    VARIABLE        reduce using rule 48 (estructuras_de_control -> if_structures .)
    VAR             reduce using rule 48 (estructuras_de_control -> if_structures .)
    FUNCTION        reduce using rule 48 (estructuras_de_control -> if_structures .)
    RETURN          reduce using rule 48 (estructuras_de_control -> if_structures .)
    FUNCTION_NAME   reduce using rule 48 (estructuras_de_control -> if_structures .)
    FOREACH         reduce using rule 48 (estructuras_de_control -> if_structures .)
    ECHO            reduce using rule 48 (estructuras_de_control -> if_structures .)
    PRINT           reduce using rule 48 (estructuras_de_control -> if_structures .)
    VAR_DUMP        reduce using rule 48 (estructuras_de_control -> if_structures .)
    PRINT_R         reduce using rule 48 (estructuras_de_control -> if_structures .)
    VAR_EXPORT      reduce using rule 48 (estructuras_de_control -> if_structures .)
    IF              reduce using rule 48 (estructuras_de_control -> if_structures .)
    WHILE           reduce using rule 48 (estructuras_de_control -> if_structures .)
    $end            reduce using rule 48 (estructuras_de_control -> if_structures .)
    RCURLY          reduce using rule 48 (estructuras_de_control -> if_structures .)
    ENDIF           reduce using rule 48 (estructuras_de_control -> if_structures .)
    ELSE            reduce using rule 48 (estructuras_de_control -> if_structures .)
    ELSEIF          reduce using rule 48 (estructuras_de_control -> if_structures .)
    ENDWHILE        reduce using rule 48 (estructuras_de_control -> if_structures .)


state 21

    (49) estructuras_de_control -> estructuras_while .

    VARIABLE        reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    VAR             reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    FUNCTION        reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    RETURN          reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    FUNCTION_NAME   reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    FOREACH         reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    ECHO            reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    PRINT           reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    VAR_DUMP        reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    PRINT_R         reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    VAR_EXPORT      reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    IF              reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    WHILE           reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    $end            reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    RCURLY          reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    ENDIF           reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    ELSE            reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    ELSEIF          reduce using rule 49 (estructuras_de_control -> estructuras_while .)
    ENDWHILE        reduce using rule 49 (estructuras_de_control -> estructuras_while .)


state 22

    (111) funciones_datos_estructurados -> funciones_map .

    VARIABLE        reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    VAR             reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    FUNCTION        reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    RETURN          reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    FUNCTION_NAME   reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    FOREACH         reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    ECHO            reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    PRINT           reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    VAR_DUMP        reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    PRINT_R         reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    VAR_EXPORT      reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    IF              reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    WHILE           reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    $end            reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    RCURLY          reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    ENDIF           reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    ELSE            reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    ELSEIF          reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)
    ENDWHILE        reduce using rule 111 (funciones_datos_estructurados -> funciones_map .)


state 23

    (112) funciones_datos_estructurados -> funciones_set .

    VARIABLE        reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    VAR             reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    FUNCTION        reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    RETURN          reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    FUNCTION_NAME   reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    FOREACH         reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    ECHO            reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    PRINT           reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    VAR_DUMP        reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    PRINT_R         reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    VAR_EXPORT      reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    IF              reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    WHILE           reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    $end            reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    RCURLY          reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    ENDIF           reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    ELSE            reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    ELSEIF          reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)
    ENDWHILE        reduce using rule 112 (funciones_datos_estructurados -> funciones_set .)


state 24

    (113) funciones_datos_estructurados -> funciones_vector .

    VARIABLE        reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    VAR             reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    FUNCTION        reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    RETURN          reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    FUNCTION_NAME   reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    FOREACH         reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    ECHO            reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    PRINT           reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    VAR_DUMP        reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    PRINT_R         reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    VAR_EXPORT      reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    IF              reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    WHILE           reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    $end            reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    RCURLY          reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    ENDIF           reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    ELSE            reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    ELSEIF          reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)
    ENDWHILE        reduce using rule 113 (funciones_datos_estructurados -> funciones_vector .)


state 25

    (73) funcion_declaracion -> FUNCTION . funcion_cabecera_declaracion funciones_cuerpo
    (76) funcion_declaracion -> FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> FUNCTION . LPAREN RPAREN funciones_cuerpo
    (78) funcion_cabecera_declaracion -> . FUNCTION_NAME LPAREN variables_por_comma RPAREN
    (79) funcion_cabecera_declaracion -> . FUNCTION_NAME LPAREN RPAREN

    LPAREN          shift and go to state 54
    FUNCTION_NAME   shift and go to state 55

    funcion_cabecera_declaracion   shift and go to state 53

state 26

    (82) return -> RETURN . var_asignar_contenido SEMICOLON
    (132) var_asignar_contenido -> . VARIABLE
    (133) var_asignar_contenido -> . elemento_numerico
    (134) var_asignar_contenido -> . elemento_string
    (135) var_asignar_contenido -> . elemento_logico
    (136) var_asignar_contenido -> . datos_estructurados
    (137) var_asignar_contenido -> . funciones_ingreso_datos
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (91) datos_estructurados -> . map
    (92) datos_estructurados -> . vector
    (93) datos_estructurados -> . set
    (45) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (46) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (47) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (94) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> . NEW MAP LPAREN RPAREN
    (100) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (101) vector -> . NEW VECTOR LPAREN RPAREN
    (109) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (110) set -> . NEW SET LPAREN RPAREN

    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 56
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 27

    (83) funcion_ejecucion -> FUNCTION_NAME . LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> FUNCTION_NAME . LPAREN RPAREN funciones_cuerpo SEMICOLON

    LPAREN          shift and go to state 78


state 28

    (70) foreach -> FOREACH . LPAREN foreach_content RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 79


state 29

    (39) echo -> ECHO . params SEMICOLON
    (40) echo -> ECHO . params_points SEMICOLON
    (18) params -> . param
    (19) params -> . param COMMA params
    (20) params_points -> . param
    (21) params_points -> . param POINT params_points
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 80
    params_points                  shift and go to state 81
    param                          shift and go to state 82
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 30

    (41) print -> PRINT . param SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 87
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 31

    (43) vardump -> VAR_DUMP . LPAREN param RPAREN SEMICOLON
    (116) key_map -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (120) find_vector -> VAR_DUMP . LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 32

    (42) print_r -> PRINT_R . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 33

    (44) var_export -> VAR_EXPORT . LPAREN param RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 34

    (50) if_structures -> if .
    (51) if_structures -> if . else
    (52) if_structures -> if . else_if else
    (53) if_structures -> if . else_if
    (59) else -> . ELSE LCURLY expresiones RCURLY
    (60) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (61) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (62) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 50 (if_structures -> if .)
    VAR             reduce using rule 50 (if_structures -> if .)
    FUNCTION        reduce using rule 50 (if_structures -> if .)
    RETURN          reduce using rule 50 (if_structures -> if .)
    FUNCTION_NAME   reduce using rule 50 (if_structures -> if .)
    FOREACH         reduce using rule 50 (if_structures -> if .)
    ECHO            reduce using rule 50 (if_structures -> if .)
    PRINT           reduce using rule 50 (if_structures -> if .)
    VAR_DUMP        reduce using rule 50 (if_structures -> if .)
    PRINT_R         reduce using rule 50 (if_structures -> if .)
    VAR_EXPORT      reduce using rule 50 (if_structures -> if .)
    IF              reduce using rule 50 (if_structures -> if .)
    WHILE           reduce using rule 50 (if_structures -> if .)
    $end            reduce using rule 50 (if_structures -> if .)
    RCURLY          reduce using rule 50 (if_structures -> if .)
    ENDIF           reduce using rule 50 (if_structures -> if .)
    ENDWHILE        reduce using rule 50 (if_structures -> if .)
    ELSE            shift and go to state 93
    ELSEIF          shift and go to state 94

  ! ELSE            [ reduce using rule 50 (if_structures -> if .) ]
  ! ELSEIF          [ reduce using rule 50 (if_structures -> if .) ]

    else                           shift and go to state 91
    else_if                        shift and go to state 92

state 35

    (54) if_structures -> if_r . ENDIF SEMICOLON
    (55) if_structures -> if_r . else_r ENDIF SEMICOLON
    (56) if_structures -> if_r . elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> if_r . elseif_r ENDIF SEMICOLON
    (64) else_r -> . ELSE DOUBLEPOINT expresiones
    (65) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (66) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 95
    ELSE            shift and go to state 98
    ELSEIF          shift and go to state 99

    else_r                         shift and go to state 96
    elseif_r                       shift and go to state 97

state 36

    (67) estructuras_while -> while_p .

    VARIABLE        reduce using rule 67 (estructuras_while -> while_p .)
    VAR             reduce using rule 67 (estructuras_while -> while_p .)
    FUNCTION        reduce using rule 67 (estructuras_while -> while_p .)
    RETURN          reduce using rule 67 (estructuras_while -> while_p .)
    FUNCTION_NAME   reduce using rule 67 (estructuras_while -> while_p .)
    FOREACH         reduce using rule 67 (estructuras_while -> while_p .)
    ECHO            reduce using rule 67 (estructuras_while -> while_p .)
    PRINT           reduce using rule 67 (estructuras_while -> while_p .)
    VAR_DUMP        reduce using rule 67 (estructuras_while -> while_p .)
    PRINT_R         reduce using rule 67 (estructuras_while -> while_p .)
    VAR_EXPORT      reduce using rule 67 (estructuras_while -> while_p .)
    IF              reduce using rule 67 (estructuras_while -> while_p .)
    WHILE           reduce using rule 67 (estructuras_while -> while_p .)
    $end            reduce using rule 67 (estructuras_while -> while_p .)
    RCURLY          reduce using rule 67 (estructuras_while -> while_p .)
    ENDIF           reduce using rule 67 (estructuras_while -> while_p .)
    ELSE            reduce using rule 67 (estructuras_while -> while_p .)
    ELSEIF          reduce using rule 67 (estructuras_while -> while_p .)
    ENDWHILE        reduce using rule 67 (estructuras_while -> while_p .)


state 37

    (114) funciones_map -> key_map .

    VARIABLE        reduce using rule 114 (funciones_map -> key_map .)
    VAR             reduce using rule 114 (funciones_map -> key_map .)
    FUNCTION        reduce using rule 114 (funciones_map -> key_map .)
    RETURN          reduce using rule 114 (funciones_map -> key_map .)
    FUNCTION_NAME   reduce using rule 114 (funciones_map -> key_map .)
    FOREACH         reduce using rule 114 (funciones_map -> key_map .)
    ECHO            reduce using rule 114 (funciones_map -> key_map .)
    PRINT           reduce using rule 114 (funciones_map -> key_map .)
    VAR_DUMP        reduce using rule 114 (funciones_map -> key_map .)
    PRINT_R         reduce using rule 114 (funciones_map -> key_map .)
    VAR_EXPORT      reduce using rule 114 (funciones_map -> key_map .)
    IF              reduce using rule 114 (funciones_map -> key_map .)
    WHILE           reduce using rule 114 (funciones_map -> key_map .)
    $end            reduce using rule 114 (funciones_map -> key_map .)
    RCURLY          reduce using rule 114 (funciones_map -> key_map .)
    ENDIF           reduce using rule 114 (funciones_map -> key_map .)
    ELSE            reduce using rule 114 (funciones_map -> key_map .)
    ELSEIF          reduce using rule 114 (funciones_map -> key_map .)
    ENDWHILE        reduce using rule 114 (funciones_map -> key_map .)


state 38

    (115) funciones_map -> diff_map .

    VARIABLE        reduce using rule 115 (funciones_map -> diff_map .)
    VAR             reduce using rule 115 (funciones_map -> diff_map .)
    FUNCTION        reduce using rule 115 (funciones_map -> diff_map .)
    RETURN          reduce using rule 115 (funciones_map -> diff_map .)
    FUNCTION_NAME   reduce using rule 115 (funciones_map -> diff_map .)
    FOREACH         reduce using rule 115 (funciones_map -> diff_map .)
    ECHO            reduce using rule 115 (funciones_map -> diff_map .)
    PRINT           reduce using rule 115 (funciones_map -> diff_map .)
    VAR_DUMP        reduce using rule 115 (funciones_map -> diff_map .)
    PRINT_R         reduce using rule 115 (funciones_map -> diff_map .)
    VAR_EXPORT      reduce using rule 115 (funciones_map -> diff_map .)
    IF              reduce using rule 115 (funciones_map -> diff_map .)
    WHILE           reduce using rule 115 (funciones_map -> diff_map .)
    $end            reduce using rule 115 (funciones_map -> diff_map .)
    RCURLY          reduce using rule 115 (funciones_map -> diff_map .)
    ENDIF           reduce using rule 115 (funciones_map -> diff_map .)
    ELSE            reduce using rule 115 (funciones_map -> diff_map .)
    ELSEIF          reduce using rule 115 (funciones_map -> diff_map .)
    ENDWHILE        reduce using rule 115 (funciones_map -> diff_map .)


state 39

    (124) funciones_set -> union_set .

    VARIABLE        reduce using rule 124 (funciones_set -> union_set .)
    VAR             reduce using rule 124 (funciones_set -> union_set .)
    FUNCTION        reduce using rule 124 (funciones_set -> union_set .)
    RETURN          reduce using rule 124 (funciones_set -> union_set .)
    FUNCTION_NAME   reduce using rule 124 (funciones_set -> union_set .)
    FOREACH         reduce using rule 124 (funciones_set -> union_set .)
    ECHO            reduce using rule 124 (funciones_set -> union_set .)
    PRINT           reduce using rule 124 (funciones_set -> union_set .)
    VAR_DUMP        reduce using rule 124 (funciones_set -> union_set .)
    PRINT_R         reduce using rule 124 (funciones_set -> union_set .)
    VAR_EXPORT      reduce using rule 124 (funciones_set -> union_set .)
    IF              reduce using rule 124 (funciones_set -> union_set .)
    WHILE           reduce using rule 124 (funciones_set -> union_set .)
    $end            reduce using rule 124 (funciones_set -> union_set .)
    RCURLY          reduce using rule 124 (funciones_set -> union_set .)
    ENDIF           reduce using rule 124 (funciones_set -> union_set .)
    ELSE            reduce using rule 124 (funciones_set -> union_set .)
    ELSEIF          reduce using rule 124 (funciones_set -> union_set .)
    ENDWHILE        reduce using rule 124 (funciones_set -> union_set .)


state 40

    (125) funciones_set -> remove_set .

    VARIABLE        reduce using rule 125 (funciones_set -> remove_set .)
    VAR             reduce using rule 125 (funciones_set -> remove_set .)
    FUNCTION        reduce using rule 125 (funciones_set -> remove_set .)
    RETURN          reduce using rule 125 (funciones_set -> remove_set .)
    FUNCTION_NAME   reduce using rule 125 (funciones_set -> remove_set .)
    FOREACH         reduce using rule 125 (funciones_set -> remove_set .)
    ECHO            reduce using rule 125 (funciones_set -> remove_set .)
    PRINT           reduce using rule 125 (funciones_set -> remove_set .)
    VAR_DUMP        reduce using rule 125 (funciones_set -> remove_set .)
    PRINT_R         reduce using rule 125 (funciones_set -> remove_set .)
    VAR_EXPORT      reduce using rule 125 (funciones_set -> remove_set .)
    IF              reduce using rule 125 (funciones_set -> remove_set .)
    WHILE           reduce using rule 125 (funciones_set -> remove_set .)
    $end            reduce using rule 125 (funciones_set -> remove_set .)
    RCURLY          reduce using rule 125 (funciones_set -> remove_set .)
    ENDIF           reduce using rule 125 (funciones_set -> remove_set .)
    ELSE            reduce using rule 125 (funciones_set -> remove_set .)
    ELSEIF          reduce using rule 125 (funciones_set -> remove_set .)
    ENDWHILE        reduce using rule 125 (funciones_set -> remove_set .)


state 41

    (118) funciones_vector -> find_vector .

    VARIABLE        reduce using rule 118 (funciones_vector -> find_vector .)
    VAR             reduce using rule 118 (funciones_vector -> find_vector .)
    FUNCTION        reduce using rule 118 (funciones_vector -> find_vector .)
    RETURN          reduce using rule 118 (funciones_vector -> find_vector .)
    FUNCTION_NAME   reduce using rule 118 (funciones_vector -> find_vector .)
    FOREACH         reduce using rule 118 (funciones_vector -> find_vector .)
    ECHO            reduce using rule 118 (funciones_vector -> find_vector .)
    PRINT           reduce using rule 118 (funciones_vector -> find_vector .)
    VAR_DUMP        reduce using rule 118 (funciones_vector -> find_vector .)
    PRINT_R         reduce using rule 118 (funciones_vector -> find_vector .)
    VAR_EXPORT      reduce using rule 118 (funciones_vector -> find_vector .)
    IF              reduce using rule 118 (funciones_vector -> find_vector .)
    WHILE           reduce using rule 118 (funciones_vector -> find_vector .)
    $end            reduce using rule 118 (funciones_vector -> find_vector .)
    RCURLY          reduce using rule 118 (funciones_vector -> find_vector .)
    ENDIF           reduce using rule 118 (funciones_vector -> find_vector .)
    ELSE            reduce using rule 118 (funciones_vector -> find_vector .)
    ELSEIF          reduce using rule 118 (funciones_vector -> find_vector .)
    ENDWHILE        reduce using rule 118 (funciones_vector -> find_vector .)


state 42

    (119) funciones_vector -> push_vector .

    VARIABLE        reduce using rule 119 (funciones_vector -> push_vector .)
    VAR             reduce using rule 119 (funciones_vector -> push_vector .)
    FUNCTION        reduce using rule 119 (funciones_vector -> push_vector .)
    RETURN          reduce using rule 119 (funciones_vector -> push_vector .)
    FUNCTION_NAME   reduce using rule 119 (funciones_vector -> push_vector .)
    FOREACH         reduce using rule 119 (funciones_vector -> push_vector .)
    ECHO            reduce using rule 119 (funciones_vector -> push_vector .)
    PRINT           reduce using rule 119 (funciones_vector -> push_vector .)
    VAR_DUMP        reduce using rule 119 (funciones_vector -> push_vector .)
    PRINT_R         reduce using rule 119 (funciones_vector -> push_vector .)
    VAR_EXPORT      reduce using rule 119 (funciones_vector -> push_vector .)
    IF              reduce using rule 119 (funciones_vector -> push_vector .)
    WHILE           reduce using rule 119 (funciones_vector -> push_vector .)
    $end            reduce using rule 119 (funciones_vector -> push_vector .)
    RCURLY          reduce using rule 119 (funciones_vector -> push_vector .)
    ENDIF           reduce using rule 119 (funciones_vector -> push_vector .)
    ELSE            reduce using rule 119 (funciones_vector -> push_vector .)
    ELSEIF          reduce using rule 119 (funciones_vector -> push_vector .)
    ENDWHILE        reduce using rule 119 (funciones_vector -> push_vector .)


state 43

    (58) if -> IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> IF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 100


state 44

    (68) while_p -> WHILE . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> WHILE . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LPAREN          shift and go to state 101


state 45

    (2) expresiones -> expresion expresiones .

    $end            reduce using rule 2 (expresiones -> expresion expresiones .)
    RCURLY          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDIF           reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSE            reduce using rule 2 (expresiones -> expresion expresiones .)
    ELSEIF          reduce using rule 2 (expresiones -> expresion expresiones .)
    ENDWHILE        reduce using rule 2 (expresiones -> expresion expresiones .)


state 46

    (130) var_asignar -> VARIABLE EQUALS . var_asignar_contenido SEMICOLON
    (131) var_asignar -> VARIABLE EQUALS . funcion_declaracion_anonima
    (74) funcion_declaracion -> VARIABLE EQUALS . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (132) var_asignar_contenido -> . VARIABLE
    (133) var_asignar_contenido -> . elemento_numerico
    (134) var_asignar_contenido -> . elemento_string
    (135) var_asignar_contenido -> . elemento_logico
    (136) var_asignar_contenido -> . datos_estructurados
    (137) var_asignar_contenido -> . funciones_ingreso_datos
    (87) funcion_declaracion_anonima -> . FUNCTION LPAREN params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (91) datos_estructurados -> . map
    (92) datos_estructurados -> . vector
    (93) datos_estructurados -> . set
    (45) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (46) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (47) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (94) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> . NEW MAP LPAREN RPAREN
    (100) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (101) vector -> . NEW VECTOR LPAREN RPAREN
    (109) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (110) set -> . NEW SET LPAREN RPAREN

    FUNCTION        shift and go to state 104
    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 102
    funcion_declaracion_anonima    shift and go to state 103
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 47

    (138) var_plusminus -> VARIABLE PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 105


state 48

    (139) var_plusminus -> VARIABLE MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 106


state 49

    (85) funcion_ejecucion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (86) funcion_ejecucion -> VARIABLE LPAREN . params RPAREN SEMICOLON
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 107
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 108
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 50

    (127) remove_set -> VARIABLE SIMPLEARROW . REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> VARIABLE SIMPLEARROW . REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (121) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> VARIABLE SIMPLEARROW . PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    REMOVE          shift and go to state 110
    PUSH            shift and go to state 111


state 51

    (129) var_declarar -> VAR var_asignar .

    VARIABLE        reduce using rule 129 (var_declarar -> VAR var_asignar .)
    VAR             reduce using rule 129 (var_declarar -> VAR var_asignar .)
    FUNCTION        reduce using rule 129 (var_declarar -> VAR var_asignar .)
    RETURN          reduce using rule 129 (var_declarar -> VAR var_asignar .)
    FUNCTION_NAME   reduce using rule 129 (var_declarar -> VAR var_asignar .)
    FOREACH         reduce using rule 129 (var_declarar -> VAR var_asignar .)
    ECHO            reduce using rule 129 (var_declarar -> VAR var_asignar .)
    PRINT           reduce using rule 129 (var_declarar -> VAR var_asignar .)
    VAR_DUMP        reduce using rule 129 (var_declarar -> VAR var_asignar .)
    PRINT_R         reduce using rule 129 (var_declarar -> VAR var_asignar .)
    VAR_EXPORT      reduce using rule 129 (var_declarar -> VAR var_asignar .)
    IF              reduce using rule 129 (var_declarar -> VAR var_asignar .)
    WHILE           reduce using rule 129 (var_declarar -> VAR var_asignar .)
    $end            reduce using rule 129 (var_declarar -> VAR var_asignar .)
    RCURLY          reduce using rule 129 (var_declarar -> VAR var_asignar .)
    ENDIF           reduce using rule 129 (var_declarar -> VAR var_asignar .)
    ELSE            reduce using rule 129 (var_declarar -> VAR var_asignar .)
    ELSEIF          reduce using rule 129 (var_declarar -> VAR var_asignar .)
    ENDWHILE        reduce using rule 129 (var_declarar -> VAR var_asignar .)


state 52

    (75) funcion_declaracion -> VAR VARIABLE . EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (130) var_asignar -> VARIABLE . EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> VARIABLE . EQUALS funcion_declaracion_anonima

    EQUALS          shift and go to state 112


state 53

    (73) funcion_declaracion -> FUNCTION funcion_cabecera_declaracion . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 113

state 54

    (76) funcion_declaracion -> FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (89) variables_por_comma -> . VARIABLE
    (90) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    RPAREN          shift and go to state 116
    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 115

state 55

    (78) funcion_cabecera_declaracion -> FUNCTION_NAME . LPAREN variables_por_comma RPAREN
    (79) funcion_cabecera_declaracion -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 118


state 56

    (82) return -> RETURN var_asignar_contenido . SEMICOLON

    SEMICOLON       shift and go to state 119


state 57

    (132) var_asignar_contenido -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (152) elemento_string -> VARIABLE .
    (156) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 132 (var_asignar_contenido -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 132 (var_asignar_contenido -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 132 (var_asignar_contenido -> VARIABLE .)
    SEMICOLON       reduce using rule 132 (var_asignar_contenido -> VARIABLE .)
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]


state 58

    (133) var_asignar_contenido -> elemento_numerico .
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (157) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 133 (var_asignar_contenido -> elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 59

    (134) var_asignar_contenido -> elemento_string .
    (158) elemento_logico -> elemento_string . comparador elemento_string
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 134 (var_asignar_contenido -> elemento_string .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 60

    (135) var_asignar_contenido -> elemento_logico .
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    SEMICOLON       reduce using rule 135 (var_asignar_contenido -> elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 61

    (136) var_asignar_contenido -> datos_estructurados .

    SEMICOLON       reduce using rule 136 (var_asignar_contenido -> datos_estructurados .)


state 62

    (137) var_asignar_contenido -> funciones_ingreso_datos .

    SEMICOLON       reduce using rule 137 (var_asignar_contenido -> funciones_ingreso_datos .)


state 63

    (141) elemento_numerico -> FLOAT .

    PLUS            reduce using rule 141 (elemento_numerico -> FLOAT .)
    MINUS           reduce using rule 141 (elemento_numerico -> FLOAT .)
    DIVIDE          reduce using rule 141 (elemento_numerico -> FLOAT .)
    EXPONENTIAL     reduce using rule 141 (elemento_numerico -> FLOAT .)
    TIMES           reduce using rule 141 (elemento_numerico -> FLOAT .)
    IDENTICAL       reduce using rule 141 (elemento_numerico -> FLOAT .)
    NOTIDENTICAL    reduce using rule 141 (elemento_numerico -> FLOAT .)
    EQUALSLOGICAL   reduce using rule 141 (elemento_numerico -> FLOAT .)
    DIFFERENT       reduce using rule 141 (elemento_numerico -> FLOAT .)
    GREATEREQUAL    reduce using rule 141 (elemento_numerico -> FLOAT .)
    LESSEQUAL       reduce using rule 141 (elemento_numerico -> FLOAT .)
    GREATERTHAN     reduce using rule 141 (elemento_numerico -> FLOAT .)
    LESSTHAN        reduce using rule 141 (elemento_numerico -> FLOAT .)
    ANDlOGICAL      reduce using rule 141 (elemento_numerico -> FLOAT .)
    ORLOGICAL       reduce using rule 141 (elemento_numerico -> FLOAT .)
    SEMICOLON       reduce using rule 141 (elemento_numerico -> FLOAT .)
    COMMA           reduce using rule 141 (elemento_numerico -> FLOAT .)
    POINT           reduce using rule 141 (elemento_numerico -> FLOAT .)
    RPAREN          reduce using rule 141 (elemento_numerico -> FLOAT .)
    RBRACKET        reduce using rule 141 (elemento_numerico -> FLOAT .)


state 64

    (142) elemento_numerico -> NUMBER .

    PLUS            reduce using rule 142 (elemento_numerico -> NUMBER .)
    MINUS           reduce using rule 142 (elemento_numerico -> NUMBER .)
    DIVIDE          reduce using rule 142 (elemento_numerico -> NUMBER .)
    EXPONENTIAL     reduce using rule 142 (elemento_numerico -> NUMBER .)
    TIMES           reduce using rule 142 (elemento_numerico -> NUMBER .)
    IDENTICAL       reduce using rule 142 (elemento_numerico -> NUMBER .)
    NOTIDENTICAL    reduce using rule 142 (elemento_numerico -> NUMBER .)
    EQUALSLOGICAL   reduce using rule 142 (elemento_numerico -> NUMBER .)
    DIFFERENT       reduce using rule 142 (elemento_numerico -> NUMBER .)
    GREATEREQUAL    reduce using rule 142 (elemento_numerico -> NUMBER .)
    LESSEQUAL       reduce using rule 142 (elemento_numerico -> NUMBER .)
    GREATERTHAN     reduce using rule 142 (elemento_numerico -> NUMBER .)
    LESSTHAN        reduce using rule 142 (elemento_numerico -> NUMBER .)
    ANDlOGICAL      reduce using rule 142 (elemento_numerico -> NUMBER .)
    ORLOGICAL       reduce using rule 142 (elemento_numerico -> NUMBER .)
    SEMICOLON       reduce using rule 142 (elemento_numerico -> NUMBER .)
    COMMA           reduce using rule 142 (elemento_numerico -> NUMBER .)
    POINT           reduce using rule 142 (elemento_numerico -> NUMBER .)
    RPAREN          reduce using rule 142 (elemento_numerico -> NUMBER .)
    RBRACKET        reduce using rule 142 (elemento_numerico -> NUMBER .)


state 65

    (143) elemento_numerico -> LPAREN . elemento_numerico RPAREN
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 139

state 66

    (150) elemento_string -> STRING .

    IDENTICAL       reduce using rule 150 (elemento_string -> STRING .)
    NOTIDENTICAL    reduce using rule 150 (elemento_string -> STRING .)
    EQUALSLOGICAL   reduce using rule 150 (elemento_string -> STRING .)
    DIFFERENT       reduce using rule 150 (elemento_string -> STRING .)
    GREATEREQUAL    reduce using rule 150 (elemento_string -> STRING .)
    LESSEQUAL       reduce using rule 150 (elemento_string -> STRING .)
    GREATERTHAN     reduce using rule 150 (elemento_string -> STRING .)
    LESSTHAN        reduce using rule 150 (elemento_string -> STRING .)
    ANDlOGICAL      reduce using rule 150 (elemento_string -> STRING .)
    ORLOGICAL       reduce using rule 150 (elemento_string -> STRING .)
    SEMICOLON       reduce using rule 150 (elemento_string -> STRING .)
    COMMA           reduce using rule 150 (elemento_string -> STRING .)
    POINT           reduce using rule 150 (elemento_string -> STRING .)
    RPAREN          reduce using rule 150 (elemento_string -> STRING .)
    RBRACKET        reduce using rule 150 (elemento_string -> STRING .)
    ARROW           reduce using rule 150 (elemento_string -> STRING .)


state 67

    (151) elemento_string -> STRINGCC .

    IDENTICAL       reduce using rule 151 (elemento_string -> STRINGCC .)
    NOTIDENTICAL    reduce using rule 151 (elemento_string -> STRINGCC .)
    EQUALSLOGICAL   reduce using rule 151 (elemento_string -> STRINGCC .)
    DIFFERENT       reduce using rule 151 (elemento_string -> STRINGCC .)
    GREATEREQUAL    reduce using rule 151 (elemento_string -> STRINGCC .)
    LESSEQUAL       reduce using rule 151 (elemento_string -> STRINGCC .)
    GREATERTHAN     reduce using rule 151 (elemento_string -> STRINGCC .)
    LESSTHAN        reduce using rule 151 (elemento_string -> STRINGCC .)
    ANDlOGICAL      reduce using rule 151 (elemento_string -> STRINGCC .)
    ORLOGICAL       reduce using rule 151 (elemento_string -> STRINGCC .)
    SEMICOLON       reduce using rule 151 (elemento_string -> STRINGCC .)
    COMMA           reduce using rule 151 (elemento_string -> STRINGCC .)
    POINT           reduce using rule 151 (elemento_string -> STRINGCC .)
    RPAREN          reduce using rule 151 (elemento_string -> STRINGCC .)
    RBRACKET        reduce using rule 151 (elemento_string -> STRINGCC .)
    ARROW           reduce using rule 151 (elemento_string -> STRINGCC .)


state 68

    (153) elemento_logico -> elemento_logico_pri .

    IDENTICAL       reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    NOTIDENTICAL    reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    EQUALSLOGICAL   reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    DIFFERENT       reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    GREATEREQUAL    reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    LESSEQUAL       reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    GREATERTHAN     reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    LESSTHAN        reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    ANDlOGICAL      reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    ORLOGICAL       reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    SEMICOLON       reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    COMMA           reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    POINT           reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    RPAREN          reduce using rule 153 (elemento_logico -> elemento_logico_pri .)
    RBRACKET        reduce using rule 153 (elemento_logico -> elemento_logico_pri .)


state 69

    (155) elemento_logico -> NOTLOGICAL . elemento_logico
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 141
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 70

    (91) datos_estructurados -> map .

    SEMICOLON       reduce using rule 91 (datos_estructurados -> map .)


state 71

    (92) datos_estructurados -> vector .

    SEMICOLON       reduce using rule 92 (datos_estructurados -> vector .)


state 72

    (93) datos_estructurados -> set .

    SEMICOLON       reduce using rule 93 (datos_estructurados -> set .)


state 73

    (45) funciones_ingreso_datos -> VAR_EXPORT . LPAREN param COMMA elemento_logico RPAREN

    LPAREN          shift and go to state 145


state 74

    (46) funciones_ingreso_datos -> READLINE . LPAREN RPAREN
    (47) funciones_ingreso_datos -> READLINE . LPAREN elemento_string RPAREN

    LPAREN          shift and go to state 146


state 75

    (159) elemento_logico_pri -> TRUE .

    IDENTICAL       reduce using rule 159 (elemento_logico_pri -> TRUE .)
    NOTIDENTICAL    reduce using rule 159 (elemento_logico_pri -> TRUE .)
    EQUALSLOGICAL   reduce using rule 159 (elemento_logico_pri -> TRUE .)
    DIFFERENT       reduce using rule 159 (elemento_logico_pri -> TRUE .)
    GREATEREQUAL    reduce using rule 159 (elemento_logico_pri -> TRUE .)
    LESSEQUAL       reduce using rule 159 (elemento_logico_pri -> TRUE .)
    GREATERTHAN     reduce using rule 159 (elemento_logico_pri -> TRUE .)
    LESSTHAN        reduce using rule 159 (elemento_logico_pri -> TRUE .)
    ANDlOGICAL      reduce using rule 159 (elemento_logico_pri -> TRUE .)
    ORLOGICAL       reduce using rule 159 (elemento_logico_pri -> TRUE .)
    SEMICOLON       reduce using rule 159 (elemento_logico_pri -> TRUE .)
    COMMA           reduce using rule 159 (elemento_logico_pri -> TRUE .)
    POINT           reduce using rule 159 (elemento_logico_pri -> TRUE .)
    RPAREN          reduce using rule 159 (elemento_logico_pri -> TRUE .)
    RBRACKET        reduce using rule 159 (elemento_logico_pri -> TRUE .)


state 76

    (160) elemento_logico_pri -> FALSE .

    IDENTICAL       reduce using rule 160 (elemento_logico_pri -> FALSE .)
    NOTIDENTICAL    reduce using rule 160 (elemento_logico_pri -> FALSE .)
    EQUALSLOGICAL   reduce using rule 160 (elemento_logico_pri -> FALSE .)
    DIFFERENT       reduce using rule 160 (elemento_logico_pri -> FALSE .)
    GREATEREQUAL    reduce using rule 160 (elemento_logico_pri -> FALSE .)
    LESSEQUAL       reduce using rule 160 (elemento_logico_pri -> FALSE .)
    GREATERTHAN     reduce using rule 160 (elemento_logico_pri -> FALSE .)
    LESSTHAN        reduce using rule 160 (elemento_logico_pri -> FALSE .)
    ANDlOGICAL      reduce using rule 160 (elemento_logico_pri -> FALSE .)
    ORLOGICAL       reduce using rule 160 (elemento_logico_pri -> FALSE .)
    SEMICOLON       reduce using rule 160 (elemento_logico_pri -> FALSE .)
    COMMA           reduce using rule 160 (elemento_logico_pri -> FALSE .)
    POINT           reduce using rule 160 (elemento_logico_pri -> FALSE .)
    RPAREN          reduce using rule 160 (elemento_logico_pri -> FALSE .)
    RBRACKET        reduce using rule 160 (elemento_logico_pri -> FALSE .)


state 77

    (94) map -> NEW . MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> NEW . MAP LPAREN RPAREN
    (100) vector -> NEW . VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (101) vector -> NEW . VECTOR LPAREN RPAREN
    (109) set -> NEW . SET LPAREN LBRACKET params RBRACKET RPAREN
    (110) set -> NEW . SET LPAREN RPAREN

    MAP             shift and go to state 147
    VECTOR          shift and go to state 148
    SET             shift and go to state 149


state 78

    (83) funcion_ejecucion -> FUNCTION_NAME LPAREN . params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> FUNCTION_NAME LPAREN . RPAREN funciones_cuerpo SEMICOLON
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 151
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 150
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 79

    (70) foreach -> FOREACH LPAREN . foreach_content RPAREN LCURLY expresiones RCURLY
    (71) foreach_content -> . VARIABLE AS VARIABLE
    (72) foreach_content -> . VARIABLE AS VARIABLE ARROW VARIABLE

    VARIABLE        shift and go to state 153

    foreach_content                shift and go to state 152

state 80

    (39) echo -> ECHO params . SEMICOLON

    SEMICOLON       shift and go to state 154


state 81

    (40) echo -> ECHO params_points . SEMICOLON

    SEMICOLON       shift and go to state 155


state 82

    (18) params -> param .
    (19) params -> param . COMMA params
    (20) params_points -> param .
    (21) params_points -> param . POINT params_points

  ! reduce/reduce conflict for SEMICOLON resolved using rule 18 (params -> param .)
    SEMICOLON       reduce using rule 18 (params -> param .)
    COMMA           shift and go to state 156
    POINT           shift and go to state 157

  ! SEMICOLON       [ reduce using rule 20 (params_points -> param .) ]


state 83

    (13) param -> VARIABLE .
    (17) param -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (152) elemento_string -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (156) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for POINT resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (param -> VARIABLE .)
    COMMA           reduce using rule 13 (param -> VARIABLE .)
    POINT           reduce using rule 13 (param -> VARIABLE .)
    SEMICOLON       reduce using rule 13 (param -> VARIABLE .)
    RPAREN          reduce using rule 13 (param -> VARIABLE .)
    RBRACKET        reduce using rule 13 (param -> VARIABLE .)
    LBRACKET        shift and go to state 158
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! POINT           [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! POINT           [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]


state 84

    (14) param -> elemento_string .
    (158) elemento_logico -> elemento_string . comparador elemento_string
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    COMMA           reduce using rule 14 (param -> elemento_string .)
    POINT           reduce using rule 14 (param -> elemento_string .)
    SEMICOLON       reduce using rule 14 (param -> elemento_string .)
    RPAREN          reduce using rule 14 (param -> elemento_string .)
    RBRACKET        reduce using rule 14 (param -> elemento_string .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 85

    (15) param -> elemento_numerico .
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (157) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    COMMA           reduce using rule 15 (param -> elemento_numerico .)
    POINT           reduce using rule 15 (param -> elemento_numerico .)
    SEMICOLON       reduce using rule 15 (param -> elemento_numerico .)
    RPAREN          reduce using rule 15 (param -> elemento_numerico .)
    RBRACKET        reduce using rule 15 (param -> elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 86

    (16) param -> elemento_logico .
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    COMMA           reduce using rule 16 (param -> elemento_logico .)
    POINT           reduce using rule 16 (param -> elemento_logico .)
    SEMICOLON       reduce using rule 16 (param -> elemento_logico .)
    RPAREN          reduce using rule 16 (param -> elemento_logico .)
    RBRACKET        reduce using rule 16 (param -> elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 87

    (41) print -> PRINT param . SEMICOLON

    SEMICOLON       shift and go to state 159


state 88

    (43) vardump -> VAR_DUMP LPAREN . param RPAREN SEMICOLON
    (116) key_map -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (120) find_vector -> VAR_DUMP LPAREN . VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 161
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 160
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 89

    (42) print_r -> PRINT_R LPAREN . param RPAREN SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 162
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 90

    (44) var_export -> VAR_EXPORT LPAREN . param RPAREN SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 163
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 91

    (51) if_structures -> if else .

    VARIABLE        reduce using rule 51 (if_structures -> if else .)
    VAR             reduce using rule 51 (if_structures -> if else .)
    FUNCTION        reduce using rule 51 (if_structures -> if else .)
    RETURN          reduce using rule 51 (if_structures -> if else .)
    FUNCTION_NAME   reduce using rule 51 (if_structures -> if else .)
    FOREACH         reduce using rule 51 (if_structures -> if else .)
    ECHO            reduce using rule 51 (if_structures -> if else .)
    PRINT           reduce using rule 51 (if_structures -> if else .)
    VAR_DUMP        reduce using rule 51 (if_structures -> if else .)
    PRINT_R         reduce using rule 51 (if_structures -> if else .)
    VAR_EXPORT      reduce using rule 51 (if_structures -> if else .)
    IF              reduce using rule 51 (if_structures -> if else .)
    WHILE           reduce using rule 51 (if_structures -> if else .)
    $end            reduce using rule 51 (if_structures -> if else .)
    RCURLY          reduce using rule 51 (if_structures -> if else .)
    ENDIF           reduce using rule 51 (if_structures -> if else .)
    ELSE            reduce using rule 51 (if_structures -> if else .)
    ELSEIF          reduce using rule 51 (if_structures -> if else .)
    ENDWHILE        reduce using rule 51 (if_structures -> if else .)


state 92

    (52) if_structures -> if else_if . else
    (53) if_structures -> if else_if .
    (62) else_if -> else_if . else_if
    (59) else -> . ELSE LCURLY expresiones RCURLY
    (60) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (61) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (62) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 53 (if_structures -> if else_if .)
    VAR             reduce using rule 53 (if_structures -> if else_if .)
    FUNCTION        reduce using rule 53 (if_structures -> if else_if .)
    RETURN          reduce using rule 53 (if_structures -> if else_if .)
    FUNCTION_NAME   reduce using rule 53 (if_structures -> if else_if .)
    FOREACH         reduce using rule 53 (if_structures -> if else_if .)
    ECHO            reduce using rule 53 (if_structures -> if else_if .)
    PRINT           reduce using rule 53 (if_structures -> if else_if .)
    VAR_DUMP        reduce using rule 53 (if_structures -> if else_if .)
    PRINT_R         reduce using rule 53 (if_structures -> if else_if .)
    VAR_EXPORT      reduce using rule 53 (if_structures -> if else_if .)
    IF              reduce using rule 53 (if_structures -> if else_if .)
    WHILE           reduce using rule 53 (if_structures -> if else_if .)
    $end            reduce using rule 53 (if_structures -> if else_if .)
    RCURLY          reduce using rule 53 (if_structures -> if else_if .)
    ENDIF           reduce using rule 53 (if_structures -> if else_if .)
    ENDWHILE        reduce using rule 53 (if_structures -> if else_if .)
    ELSE            shift and go to state 93
    ELSEIF          shift and go to state 94

  ! ELSE            [ reduce using rule 53 (if_structures -> if else_if .) ]
  ! ELSEIF          [ reduce using rule 53 (if_structures -> if else_if .) ]

    else_if                        shift and go to state 164
    else                           shift and go to state 165

state 93

    (59) else -> ELSE . LCURLY expresiones RCURLY
    (61) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LCURLY          shift and go to state 166
    IF              shift and go to state 167


state 94

    (60) else_if -> ELSEIF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 168


state 95

    (54) if_structures -> if_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 169


state 96

    (55) if_structures -> if_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 170


state 97

    (56) if_structures -> if_r elseif_r . else_r ENDIF SEMICOLON
    (57) if_structures -> if_r elseif_r . ENDIF SEMICOLON
    (66) elseif_r -> elseif_r . elseif_r
    (64) else_r -> . ELSE DOUBLEPOINT expresiones
    (65) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (66) elseif_r -> . elseif_r elseif_r

    ENDIF           shift and go to state 173
    ELSE            shift and go to state 98
    ELSEIF          shift and go to state 99

    elseif_r                       shift and go to state 171
    else_r                         shift and go to state 172

state 98

    (64) else_r -> ELSE . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 174


state 99

    (65) elseif_r -> ELSEIF . LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones

    LPAREN          shift and go to state 175


state 100

    (58) if -> IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> IF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 176
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 101

    (68) while_p -> WHILE LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> WHILE LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 177
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 102

    (130) var_asignar -> VARIABLE EQUALS var_asignar_contenido . SEMICOLON

    SEMICOLON       shift and go to state 178


state 103

    (131) var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .

    VARIABLE        reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR             reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FUNCTION        reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    RETURN          reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FUNCTION_NAME   reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    FOREACH         reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ECHO            reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    PRINT           reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR_DUMP        reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    PRINT_R         reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    VAR_EXPORT      reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    IF              reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    WHILE           reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    $end            reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    RCURLY          reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ENDIF           reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ELSE            reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ELSEIF          reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)
    ENDWHILE        reduce using rule 131 (var_asignar -> VARIABLE EQUALS funcion_declaracion_anonima .)


state 104

    (74) funcion_declaracion -> VARIABLE EQUALS FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (87) funcion_declaracion_anonima -> FUNCTION . LPAREN params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> FUNCTION . LPAREN RPAREN funciones_cuerpo

    LPAREN          shift and go to state 179


state 105

    (138) var_plusminus -> VARIABLE PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 180


state 106

    (139) var_plusminus -> VARIABLE MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 181


state 107

    (85) funcion_ejecucion -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 108

    (86) funcion_ejecucion -> VARIABLE LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 183


state 109

    (18) params -> param .
    (19) params -> param . COMMA params

    RPAREN          reduce using rule 18 (params -> param .)
    SEMICOLON       reduce using rule 18 (params -> param .)
    RBRACKET        reduce using rule 18 (params -> param .)
    COMMA           shift and go to state 156


state 110

    (127) remove_set -> VARIABLE SIMPLEARROW REMOVE . LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE . LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 184


state 111

    (121) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN param RPAREN SEMICOLON
    (122) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN params RPAREN SEMICOLON
    (123) push_vector -> VARIABLE SIMPLEARROW PUSH . LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    LPAREN          shift and go to state 185


state 112

    (75) funcion_declaracion -> VAR VARIABLE EQUALS . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (130) var_asignar -> VARIABLE EQUALS . var_asignar_contenido SEMICOLON
    (131) var_asignar -> VARIABLE EQUALS . funcion_declaracion_anonima
    (132) var_asignar_contenido -> . VARIABLE
    (133) var_asignar_contenido -> . elemento_numerico
    (134) var_asignar_contenido -> . elemento_string
    (135) var_asignar_contenido -> . elemento_logico
    (136) var_asignar_contenido -> . datos_estructurados
    (137) var_asignar_contenido -> . funciones_ingreso_datos
    (87) funcion_declaracion_anonima -> . FUNCTION LPAREN params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (91) datos_estructurados -> . map
    (92) datos_estructurados -> . vector
    (93) datos_estructurados -> . set
    (45) funciones_ingreso_datos -> . VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN
    (46) funciones_ingreso_datos -> . READLINE LPAREN RPAREN
    (47) funciones_ingreso_datos -> . READLINE LPAREN elemento_string RPAREN
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (94) map -> . NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> . NEW MAP LPAREN RPAREN
    (100) vector -> . NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN
    (101) vector -> . NEW VECTOR LPAREN RPAREN
    (109) set -> . NEW SET LPAREN LBRACKET params RBRACKET RPAREN
    (110) set -> . NEW SET LPAREN RPAREN

    FUNCTION        shift and go to state 186
    VARIABLE        shift and go to state 57
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    NOTLOGICAL      shift and go to state 69
    VAR_EXPORT      shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    NEW             shift and go to state 77

    var_asignar_contenido          shift and go to state 102
    funcion_declaracion_anonima    shift and go to state 103
    elemento_numerico              shift and go to state 58
    elemento_string                shift and go to state 59
    elemento_logico                shift and go to state 60
    datos_estructurados            shift and go to state 61
    funciones_ingreso_datos        shift and go to state 62
    elemento_logico_pri            shift and go to state 68
    map                            shift and go to state 70
    vector                         shift and go to state 71
    set                            shift and go to state 72

state 113

    (73) funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .

    VARIABLE        reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR             reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FUNCTION        reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    RETURN          reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    FOREACH         reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ECHO            reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    PRINT           reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR_DUMP        reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    PRINT_R         reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    IF              reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    WHILE           reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    $end            reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    RCURLY          reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ENDIF           reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ELSE            reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ELSEIF          reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)
    ENDWHILE        reduce using rule 73 (funcion_declaracion -> FUNCTION funcion_cabecera_declaracion funciones_cuerpo .)


state 114

    (80) funciones_cuerpo -> LCURLY . expresiones RCURLY
    (81) funciones_cuerpo -> LCURLY . RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    RCURLY          shift and go to state 188
    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 187
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 115

    (76) funcion_declaracion -> FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 189


state 116

    (77) funcion_declaracion -> FUNCTION LPAREN RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 190

state 117

    (89) variables_por_comma -> VARIABLE .
    (90) variables_por_comma -> VARIABLE . COMMA variables_por_comma

    RPAREN          reduce using rule 89 (variables_por_comma -> VARIABLE .)
    COMMA           shift and go to state 191


state 118

    (78) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN . variables_por_comma RPAREN
    (79) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN . RPAREN
    (89) variables_por_comma -> . VARIABLE
    (90) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    RPAREN          shift and go to state 193
    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 192

state 119

    (82) return -> RETURN var_asignar_contenido SEMICOLON .

    VARIABLE        reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR             reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FUNCTION        reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    RETURN          reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FUNCTION_NAME   reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    FOREACH         reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ECHO            reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    PRINT           reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR_DUMP        reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    PRINT_R         reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    VAR_EXPORT      reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    IF              reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    WHILE           reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    $end            reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    RCURLY          reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ENDIF           reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ELSE            reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ELSEIF          reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)
    ENDWHILE        reduce using rule 82 (return -> RETURN var_asignar_contenido SEMICOLON .)


state 120

    (140) elemento_numerico -> elemento_numerico operador . elemento_numerico
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 194

state 121

    (157) elemento_logico -> elemento_numerico comparador . elemento_numerico
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 195

state 122

    (145) operador -> PLUS .

    FLOAT           reduce using rule 145 (operador -> PLUS .)
    NUMBER          reduce using rule 145 (operador -> PLUS .)
    LPAREN          reduce using rule 145 (operador -> PLUS .)
    VARIABLE        reduce using rule 145 (operador -> PLUS .)


state 123

    (146) operador -> MINUS .

    FLOAT           reduce using rule 146 (operador -> MINUS .)
    NUMBER          reduce using rule 146 (operador -> MINUS .)
    LPAREN          reduce using rule 146 (operador -> MINUS .)
    VARIABLE        reduce using rule 146 (operador -> MINUS .)


state 124

    (147) operador -> DIVIDE .

    FLOAT           reduce using rule 147 (operador -> DIVIDE .)
    NUMBER          reduce using rule 147 (operador -> DIVIDE .)
    LPAREN          reduce using rule 147 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 147 (operador -> DIVIDE .)


state 125

    (148) operador -> EXPONENTIAL .

    FLOAT           reduce using rule 148 (operador -> EXPONENTIAL .)
    NUMBER          reduce using rule 148 (operador -> EXPONENTIAL .)
    LPAREN          reduce using rule 148 (operador -> EXPONENTIAL .)
    VARIABLE        reduce using rule 148 (operador -> EXPONENTIAL .)


state 126

    (149) operador -> TIMES .

    FLOAT           reduce using rule 149 (operador -> TIMES .)
    NUMBER          reduce using rule 149 (operador -> TIMES .)
    LPAREN          reduce using rule 149 (operador -> TIMES .)
    VARIABLE        reduce using rule 149 (operador -> TIMES .)


state 127

    (161) comparador -> IDENTICAL .

    FLOAT           reduce using rule 161 (comparador -> IDENTICAL .)
    NUMBER          reduce using rule 161 (comparador -> IDENTICAL .)
    LPAREN          reduce using rule 161 (comparador -> IDENTICAL .)
    VARIABLE        reduce using rule 161 (comparador -> IDENTICAL .)
    STRING          reduce using rule 161 (comparador -> IDENTICAL .)
    STRINGCC        reduce using rule 161 (comparador -> IDENTICAL .)
    NOTLOGICAL      reduce using rule 161 (comparador -> IDENTICAL .)
    TRUE            reduce using rule 161 (comparador -> IDENTICAL .)
    FALSE           reduce using rule 161 (comparador -> IDENTICAL .)


state 128

    (162) comparador -> NOTIDENTICAL .

    FLOAT           reduce using rule 162 (comparador -> NOTIDENTICAL .)
    NUMBER          reduce using rule 162 (comparador -> NOTIDENTICAL .)
    LPAREN          reduce using rule 162 (comparador -> NOTIDENTICAL .)
    VARIABLE        reduce using rule 162 (comparador -> NOTIDENTICAL .)
    STRING          reduce using rule 162 (comparador -> NOTIDENTICAL .)
    STRINGCC        reduce using rule 162 (comparador -> NOTIDENTICAL .)
    NOTLOGICAL      reduce using rule 162 (comparador -> NOTIDENTICAL .)
    TRUE            reduce using rule 162 (comparador -> NOTIDENTICAL .)
    FALSE           reduce using rule 162 (comparador -> NOTIDENTICAL .)


state 129

    (163) comparador -> EQUALSLOGICAL .

    FLOAT           reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    NUMBER          reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    LPAREN          reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    VARIABLE        reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    STRING          reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    STRINGCC        reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    NOTLOGICAL      reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    TRUE            reduce using rule 163 (comparador -> EQUALSLOGICAL .)
    FALSE           reduce using rule 163 (comparador -> EQUALSLOGICAL .)


state 130

    (164) comparador -> DIFFERENT .

    FLOAT           reduce using rule 164 (comparador -> DIFFERENT .)
    NUMBER          reduce using rule 164 (comparador -> DIFFERENT .)
    LPAREN          reduce using rule 164 (comparador -> DIFFERENT .)
    VARIABLE        reduce using rule 164 (comparador -> DIFFERENT .)
    STRING          reduce using rule 164 (comparador -> DIFFERENT .)
    STRINGCC        reduce using rule 164 (comparador -> DIFFERENT .)
    NOTLOGICAL      reduce using rule 164 (comparador -> DIFFERENT .)
    TRUE            reduce using rule 164 (comparador -> DIFFERENT .)
    FALSE           reduce using rule 164 (comparador -> DIFFERENT .)


state 131

    (165) comparador -> GREATEREQUAL .

    FLOAT           reduce using rule 165 (comparador -> GREATEREQUAL .)
    NUMBER          reduce using rule 165 (comparador -> GREATEREQUAL .)
    LPAREN          reduce using rule 165 (comparador -> GREATEREQUAL .)
    VARIABLE        reduce using rule 165 (comparador -> GREATEREQUAL .)
    STRING          reduce using rule 165 (comparador -> GREATEREQUAL .)
    STRINGCC        reduce using rule 165 (comparador -> GREATEREQUAL .)
    NOTLOGICAL      reduce using rule 165 (comparador -> GREATEREQUAL .)
    TRUE            reduce using rule 165 (comparador -> GREATEREQUAL .)
    FALSE           reduce using rule 165 (comparador -> GREATEREQUAL .)


state 132

    (166) comparador -> LESSEQUAL .

    FLOAT           reduce using rule 166 (comparador -> LESSEQUAL .)
    NUMBER          reduce using rule 166 (comparador -> LESSEQUAL .)
    LPAREN          reduce using rule 166 (comparador -> LESSEQUAL .)
    VARIABLE        reduce using rule 166 (comparador -> LESSEQUAL .)
    STRING          reduce using rule 166 (comparador -> LESSEQUAL .)
    STRINGCC        reduce using rule 166 (comparador -> LESSEQUAL .)
    NOTLOGICAL      reduce using rule 166 (comparador -> LESSEQUAL .)
    TRUE            reduce using rule 166 (comparador -> LESSEQUAL .)
    FALSE           reduce using rule 166 (comparador -> LESSEQUAL .)


state 133

    (167) comparador -> GREATERTHAN .

    FLOAT           reduce using rule 167 (comparador -> GREATERTHAN .)
    NUMBER          reduce using rule 167 (comparador -> GREATERTHAN .)
    LPAREN          reduce using rule 167 (comparador -> GREATERTHAN .)
    VARIABLE        reduce using rule 167 (comparador -> GREATERTHAN .)
    STRING          reduce using rule 167 (comparador -> GREATERTHAN .)
    STRINGCC        reduce using rule 167 (comparador -> GREATERTHAN .)
    NOTLOGICAL      reduce using rule 167 (comparador -> GREATERTHAN .)
    TRUE            reduce using rule 167 (comparador -> GREATERTHAN .)
    FALSE           reduce using rule 167 (comparador -> GREATERTHAN .)


state 134

    (168) comparador -> LESSTHAN .

    FLOAT           reduce using rule 168 (comparador -> LESSTHAN .)
    NUMBER          reduce using rule 168 (comparador -> LESSTHAN .)
    LPAREN          reduce using rule 168 (comparador -> LESSTHAN .)
    VARIABLE        reduce using rule 168 (comparador -> LESSTHAN .)
    STRING          reduce using rule 168 (comparador -> LESSTHAN .)
    STRINGCC        reduce using rule 168 (comparador -> LESSTHAN .)
    NOTLOGICAL      reduce using rule 168 (comparador -> LESSTHAN .)
    TRUE            reduce using rule 168 (comparador -> LESSTHAN .)
    FALSE           reduce using rule 168 (comparador -> LESSTHAN .)


state 135

    (169) comparador -> ANDlOGICAL .

    FLOAT           reduce using rule 169 (comparador -> ANDlOGICAL .)
    NUMBER          reduce using rule 169 (comparador -> ANDlOGICAL .)
    LPAREN          reduce using rule 169 (comparador -> ANDlOGICAL .)
    VARIABLE        reduce using rule 169 (comparador -> ANDlOGICAL .)
    STRING          reduce using rule 169 (comparador -> ANDlOGICAL .)
    STRINGCC        reduce using rule 169 (comparador -> ANDlOGICAL .)
    NOTLOGICAL      reduce using rule 169 (comparador -> ANDlOGICAL .)
    TRUE            reduce using rule 169 (comparador -> ANDlOGICAL .)
    FALSE           reduce using rule 169 (comparador -> ANDlOGICAL .)


state 136

    (170) comparador -> ORLOGICAL .

    FLOAT           reduce using rule 170 (comparador -> ORLOGICAL .)
    NUMBER          reduce using rule 170 (comparador -> ORLOGICAL .)
    LPAREN          reduce using rule 170 (comparador -> ORLOGICAL .)
    VARIABLE        reduce using rule 170 (comparador -> ORLOGICAL .)
    STRING          reduce using rule 170 (comparador -> ORLOGICAL .)
    STRINGCC        reduce using rule 170 (comparador -> ORLOGICAL .)
    NOTLOGICAL      reduce using rule 170 (comparador -> ORLOGICAL .)
    TRUE            reduce using rule 170 (comparador -> ORLOGICAL .)
    FALSE           reduce using rule 170 (comparador -> ORLOGICAL .)


state 137

    (158) elemento_logico -> elemento_string comparador . elemento_string
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 197

    elemento_string                shift and go to state 196

state 138

    (154) elemento_logico -> elemento_logico comparador . elemento_logico
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 198
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 139

    (143) elemento_numerico -> LPAREN elemento_numerico . RPAREN
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES

    RPAREN          shift and go to state 199
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 140

    (144) elemento_numerico -> VARIABLE .

    RPAREN          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    POINT           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    RBRACKET        reduce using rule 144 (elemento_numerico -> VARIABLE .)


state 141

    (155) elemento_logico -> NOTLOGICAL elemento_logico .
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    SEMICOLON       reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .)
    COMMA           reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .)
    POINT           reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RPAREN          reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .)
    RBRACKET        reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

  ! IDENTICAL       [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 155 (elemento_logico -> NOTLOGICAL elemento_logico .) ]

    comparador                     shift and go to state 138

state 142

    (156) elemento_logico -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (152) elemento_string -> VARIABLE .

  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
    SEMICOLON       reduce using rule 156 (elemento_logico -> VARIABLE .)
    COMMA           reduce using rule 156 (elemento_logico -> VARIABLE .)
    POINT           reduce using rule 156 (elemento_logico -> VARIABLE .)
    RPAREN          reduce using rule 156 (elemento_logico -> VARIABLE .)
    RBRACKET        reduce using rule 156 (elemento_logico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]


state 143

    (157) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES

    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    comparador                     shift and go to state 121
    operador                       shift and go to state 120

state 144

    (158) elemento_logico -> elemento_string . comparador elemento_string
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 145

    (45) funciones_ingreso_datos -> VAR_EXPORT LPAREN . param COMMA elemento_logico RPAREN
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 200
    elemento_logico                shift and go to state 86
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico_pri            shift and go to state 68

state 146

    (46) funciones_ingreso_datos -> READLINE LPAREN . RPAREN
    (47) funciones_ingreso_datos -> READLINE LPAREN . elemento_string RPAREN
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    RPAREN          shift and go to state 201
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 197

    elemento_string                shift and go to state 202

state 147

    (94) map -> NEW MAP . LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> NEW MAP . LPAREN RPAREN

    LPAREN          shift and go to state 203


state 148

    (100) vector -> NEW VECTOR . LPAREN LBRACKET params RBRACKET RPAREN
    (101) vector -> NEW VECTOR . LPAREN RPAREN

    LPAREN          shift and go to state 204


state 149

    (109) set -> NEW SET . LPAREN LBRACKET params RBRACKET RPAREN
    (110) set -> NEW SET . LPAREN RPAREN

    LPAREN          shift and go to state 205


state 150

    (83) funcion_ejecucion -> FUNCTION_NAME LPAREN params . RPAREN funciones_cuerpo SEMICOLON

    RPAREN          shift and go to state 206


state 151

    (84) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN . funciones_cuerpo SEMICOLON
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 207

state 152

    (70) foreach -> FOREACH LPAREN foreach_content . RPAREN LCURLY expresiones RCURLY

    RPAREN          shift and go to state 208


state 153

    (71) foreach_content -> VARIABLE . AS VARIABLE
    (72) foreach_content -> VARIABLE . AS VARIABLE ARROW VARIABLE

    AS              shift and go to state 209


state 154

    (39) echo -> ECHO params SEMICOLON .

    VARIABLE        reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    VAR             reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    FUNCTION        reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    RETURN          reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    FUNCTION_NAME   reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    FOREACH         reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    ECHO            reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    PRINT           reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    VAR_DUMP        reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    PRINT_R         reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    VAR_EXPORT      reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    IF              reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    WHILE           reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    $end            reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    RCURLY          reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    ENDIF           reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    ELSE            reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    ELSEIF          reduce using rule 39 (echo -> ECHO params SEMICOLON .)
    ENDWHILE        reduce using rule 39 (echo -> ECHO params SEMICOLON .)


state 155

    (40) echo -> ECHO params_points SEMICOLON .

    VARIABLE        reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    VAR             reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    FUNCTION        reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    RETURN          reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    FUNCTION_NAME   reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    FOREACH         reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    ECHO            reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    PRINT           reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    VAR_DUMP        reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    PRINT_R         reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    VAR_EXPORT      reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    IF              reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    WHILE           reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    $end            reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    RCURLY          reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    ENDIF           reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    ELSE            reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    ELSEIF          reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)
    ENDWHILE        reduce using rule 40 (echo -> ECHO params_points SEMICOLON .)


state 156

    (19) params -> param COMMA . params
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 109
    params                         shift and go to state 210
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 157

    (21) params_points -> param POINT . params_points
    (20) params_points -> . param
    (21) params_points -> . param POINT params_points
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 211
    params_points                  shift and go to state 212
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 158

    (17) param -> VARIABLE LBRACKET . VARIABLE RBRACKET

    VARIABLE        shift and go to state 213


state 159

    (41) print -> PRINT param SEMICOLON .

    VARIABLE        reduce using rule 41 (print -> PRINT param SEMICOLON .)
    VAR             reduce using rule 41 (print -> PRINT param SEMICOLON .)
    FUNCTION        reduce using rule 41 (print -> PRINT param SEMICOLON .)
    RETURN          reduce using rule 41 (print -> PRINT param SEMICOLON .)
    FUNCTION_NAME   reduce using rule 41 (print -> PRINT param SEMICOLON .)
    FOREACH         reduce using rule 41 (print -> PRINT param SEMICOLON .)
    ECHO            reduce using rule 41 (print -> PRINT param SEMICOLON .)
    PRINT           reduce using rule 41 (print -> PRINT param SEMICOLON .)
    VAR_DUMP        reduce using rule 41 (print -> PRINT param SEMICOLON .)
    PRINT_R         reduce using rule 41 (print -> PRINT param SEMICOLON .)
    VAR_EXPORT      reduce using rule 41 (print -> PRINT param SEMICOLON .)
    IF              reduce using rule 41 (print -> PRINT param SEMICOLON .)
    WHILE           reduce using rule 41 (print -> PRINT param SEMICOLON .)
    $end            reduce using rule 41 (print -> PRINT param SEMICOLON .)
    RCURLY          reduce using rule 41 (print -> PRINT param SEMICOLON .)
    ENDIF           reduce using rule 41 (print -> PRINT param SEMICOLON .)
    ELSE            reduce using rule 41 (print -> PRINT param SEMICOLON .)
    ELSEIF          reduce using rule 41 (print -> PRINT param SEMICOLON .)
    ENDWHILE        reduce using rule 41 (print -> PRINT param SEMICOLON .)


state 160

    (43) vardump -> VAR_DUMP LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 214


state 161

    (116) key_map -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (120) find_vector -> VAR_DUMP LPAREN VARIABLE . SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (13) param -> VARIABLE .
    (17) param -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (152) elemento_string -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (156) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
    SIMPLEARROW     shift and go to state 215
    RPAREN          reduce using rule 13 (param -> VARIABLE .)
    LBRACKET        shift and go to state 158
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]


state 162

    (42) print_r -> PRINT_R LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 216


state 163

    (44) var_export -> VAR_EXPORT LPAREN param . RPAREN SEMICOLON

    RPAREN          shift and go to state 217


state 164

    (62) else_if -> else_if else_if .
    (62) else_if -> else_if . else_if
    (60) else_if -> . ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (61) else_if -> . ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (62) else_if -> . else_if else_if

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    VARIABLE        reduce using rule 62 (else_if -> else_if else_if .)
    VAR             reduce using rule 62 (else_if -> else_if else_if .)
    FUNCTION        reduce using rule 62 (else_if -> else_if else_if .)
    RETURN          reduce using rule 62 (else_if -> else_if else_if .)
    FUNCTION_NAME   reduce using rule 62 (else_if -> else_if else_if .)
    FOREACH         reduce using rule 62 (else_if -> else_if else_if .)
    ECHO            reduce using rule 62 (else_if -> else_if else_if .)
    PRINT           reduce using rule 62 (else_if -> else_if else_if .)
    VAR_DUMP        reduce using rule 62 (else_if -> else_if else_if .)
    PRINT_R         reduce using rule 62 (else_if -> else_if else_if .)
    VAR_EXPORT      reduce using rule 62 (else_if -> else_if else_if .)
    IF              reduce using rule 62 (else_if -> else_if else_if .)
    WHILE           reduce using rule 62 (else_if -> else_if else_if .)
    $end            reduce using rule 62 (else_if -> else_if else_if .)
    RCURLY          reduce using rule 62 (else_if -> else_if else_if .)
    ENDIF           reduce using rule 62 (else_if -> else_if else_if .)
    ENDWHILE        reduce using rule 62 (else_if -> else_if else_if .)
    ELSEIF          shift and go to state 94
    ELSE            shift and go to state 218

  ! ELSE            [ reduce using rule 62 (else_if -> else_if else_if .) ]
  ! ELSEIF          [ reduce using rule 62 (else_if -> else_if else_if .) ]

    else_if                        shift and go to state 164

state 165

    (52) if_structures -> if else_if else .

    VARIABLE        reduce using rule 52 (if_structures -> if else_if else .)
    VAR             reduce using rule 52 (if_structures -> if else_if else .)
    FUNCTION        reduce using rule 52 (if_structures -> if else_if else .)
    RETURN          reduce using rule 52 (if_structures -> if else_if else .)
    FUNCTION_NAME   reduce using rule 52 (if_structures -> if else_if else .)
    FOREACH         reduce using rule 52 (if_structures -> if else_if else .)
    ECHO            reduce using rule 52 (if_structures -> if else_if else .)
    PRINT           reduce using rule 52 (if_structures -> if else_if else .)
    VAR_DUMP        reduce using rule 52 (if_structures -> if else_if else .)
    PRINT_R         reduce using rule 52 (if_structures -> if else_if else .)
    VAR_EXPORT      reduce using rule 52 (if_structures -> if else_if else .)
    IF              reduce using rule 52 (if_structures -> if else_if else .)
    WHILE           reduce using rule 52 (if_structures -> if else_if else .)
    $end            reduce using rule 52 (if_structures -> if else_if else .)
    RCURLY          reduce using rule 52 (if_structures -> if else_if else .)
    ENDIF           reduce using rule 52 (if_structures -> if else_if else .)
    ELSE            reduce using rule 52 (if_structures -> if else_if else .)
    ELSEIF          reduce using rule 52 (if_structures -> if else_if else .)
    ENDWHILE        reduce using rule 52 (if_structures -> if else_if else .)


state 166

    (59) else -> ELSE LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 219
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 167

    (61) else_if -> ELSE IF . LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    LPAREN          shift and go to state 220


state 168

    (60) else_if -> ELSEIF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 221
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 169

    (54) if_structures -> if_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR             reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    IF              reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    $end            reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 54 (if_structures -> if_r ENDIF SEMICOLON .)


state 170

    (55) if_structures -> if_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 222


state 171

    (66) elseif_r -> elseif_r elseif_r .
    (66) elseif_r -> elseif_r . elseif_r
    (65) elseif_r -> . ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (66) elseif_r -> . elseif_r elseif_r

  ! shift/reduce conflict for ELSEIF resolved as shift
    ENDIF           reduce using rule 66 (elseif_r -> elseif_r elseif_r .)
    ELSE            reduce using rule 66 (elseif_r -> elseif_r elseif_r .)
    ELSEIF          shift and go to state 99

  ! ELSEIF          [ reduce using rule 66 (elseif_r -> elseif_r elseif_r .) ]

    elseif_r                       shift and go to state 171

state 172

    (56) if_structures -> if_r elseif_r else_r . ENDIF SEMICOLON

    ENDIF           shift and go to state 223


state 173

    (57) if_structures -> if_r elseif_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 224


state 174

    (64) else_r -> ELSE DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 225
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 175

    (65) elseif_r -> ELSEIF LPAREN . elemento_logico RPAREN DOUBLEPOINT expresiones
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 226
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 176

    (58) if -> IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (63) if_r -> IF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 227
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 177

    (68) while_p -> WHILE LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (69) while_p -> WHILE LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 228
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 178

    (130) var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .

    VARIABLE        reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR             reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FUNCTION        reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    RETURN          reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FUNCTION_NAME   reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    FOREACH         reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ECHO            reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    PRINT           reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR_DUMP        reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    PRINT_R         reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    VAR_EXPORT      reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    IF              reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    WHILE           reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    $end            reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    RCURLY          reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ENDIF           reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ELSE            reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ELSEIF          reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)
    ENDWHILE        reduce using rule 130 (var_asignar -> VARIABLE EQUALS var_asignar_contenido SEMICOLON .)


state 179

    (74) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (87) funcion_declaracion_anonima -> FUNCTION LPAREN . params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (89) variables_por_comma -> . VARIABLE
    (90) variables_por_comma -> . VARIABLE COMMA variables_por_comma
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 231
    VARIABLE        shift and go to state 229
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    variables_por_comma            shift and go to state 230
    params                         shift and go to state 232
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 180

    (138) var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .

    VARIABLE        reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FUNCTION        reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RETURN          reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FUNCTION_NAME   reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    FOREACH         reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT           reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_DUMP        reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    PRINT_R         reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    IF              reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    $end            reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    RCURLY          reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDIF           reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ELSEIF          reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)
    ENDWHILE        reduce using rule 138 (var_plusminus -> VARIABLE PLUS PLUS SEMICOLON .)


state 181

    (139) var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .

    VARIABLE        reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR             reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FUNCTION        reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RETURN          reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FUNCTION_NAME   reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    FOREACH         reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT           reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_DUMP        reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    PRINT_R         reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    VAR_EXPORT      reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    IF              reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    $end            reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    RCURLY          reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDIF           reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ELSEIF          reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)
    ENDWHILE        reduce using rule 139 (var_plusminus -> VARIABLE MINUS MINUS SEMICOLON .)


state 182

    (85) funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 85 (funcion_ejecucion -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 183

    (86) funcion_ejecucion -> VARIABLE LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 233


state 184

    (127) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN . params_unitype RPAREN SEMICOLON
    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN . LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (22) params_unitype -> . only_string
    (23) params_unitype -> . only_numerico
    (24) params_unitype -> . only_logico
    (25) only_string -> . elemento_string
    (26) only_string -> . elemento_string COMMA only_string
    (27) only_numerico -> . elemento_numerico
    (28) only_numerico -> . elemento_numerico COMMA only_numerico
    (29) only_logico -> . elemento_logico
    (30) only_logico -> . elemento_logico COMMA only_logico
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    LBRACKET        shift and go to state 236
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 234
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params_unitype                 shift and go to state 235
    only_string                    shift and go to state 237
    only_numerico                  shift and go to state 238
    only_logico                    shift and go to state 239
    elemento_string                shift and go to state 240
    elemento_numerico              shift and go to state 241
    elemento_logico                shift and go to state 242
    elemento_logico_pri            shift and go to state 68

state 185

    (121) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . param RPAREN SEMICOLON
    (122) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . params RPAREN SEMICOLON
    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN . LBRACKET params RBRACKET RPAREN SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (18) params -> . param
    (19) params -> . param COMMA params
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    LBRACKET        shift and go to state 245
    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 243
    params                         shift and go to state 244
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 186

    (75) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION . LPAREN variables_por_comma RPAREN funciones_cuerpo
    (87) funcion_declaracion_anonima -> FUNCTION . LPAREN params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> FUNCTION . LPAREN RPAREN funciones_cuerpo

    LPAREN          shift and go to state 246


state 187

    (80) funciones_cuerpo -> LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 247


state 188

    (81) funciones_cuerpo -> LCURLY RCURLY .

    VARIABLE        reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR             reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    FUNCTION        reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    RETURN          reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    FUNCTION_NAME   reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    FOREACH         reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    ECHO            reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    PRINT           reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR_DUMP        reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    PRINT_R         reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    VAR_EXPORT      reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    IF              reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    WHILE           reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    $end            reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    RCURLY          reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    ENDIF           reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    ELSE            reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    ELSEIF          reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    ENDWHILE        reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)
    SEMICOLON       reduce using rule 81 (funciones_cuerpo -> LCURLY RCURLY .)


state 189

    (76) funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 248

state 190

    (77) funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR             reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    IF              reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    $end            reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 77 (funcion_declaracion -> FUNCTION LPAREN RPAREN funciones_cuerpo .)


state 191

    (90) variables_por_comma -> VARIABLE COMMA . variables_por_comma
    (89) variables_por_comma -> . VARIABLE
    (90) variables_por_comma -> . VARIABLE COMMA variables_por_comma

    VARIABLE        shift and go to state 117

    variables_por_comma            shift and go to state 249

state 192

    (78) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma . RPAREN

    RPAREN          shift and go to state 250


state 193

    (79) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN .

    LCURLY          reduce using rule 79 (funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN RPAREN .)


state 194

    (140) elemento_numerico -> elemento_numerico operador elemento_numerico .
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENTIAL resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    IDENTICAL       reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    DIFFERENT       reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATEREQUAL    reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSEQUAL       reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    GREATERTHAN     reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    LESSTHAN        reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ANDlOGICAL      reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    ORLOGICAL       reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    SEMICOLON       reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    COMMA           reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    POINT           reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RPAREN          reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    RBRACKET        reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

  ! PLUS            [ reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! MINUS           [ reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! DIVIDE          [ reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! EXPONENTIAL     [ reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]
  ! TIMES           [ reduce using rule 140 (elemento_numerico -> elemento_numerico operador elemento_numerico .) ]

    operador                       shift and go to state 120

state 195

    (157) elemento_logico -> elemento_numerico comparador elemento_numerico .
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES

    IDENTICAL       reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    NOTIDENTICAL    reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    EQUALSLOGICAL   reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    DIFFERENT       reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATEREQUAL    reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSEQUAL       reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    GREATERTHAN     reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    LESSTHAN        reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ANDlOGICAL      reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    ORLOGICAL       reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    SEMICOLON       reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    COMMA           reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    POINT           reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RPAREN          reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    RBRACKET        reduce using rule 157 (elemento_logico -> elemento_numerico comparador elemento_numerico .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 196

    (158) elemento_logico -> elemento_string comparador elemento_string .

    IDENTICAL       reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    NOTIDENTICAL    reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    EQUALSLOGICAL   reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    DIFFERENT       reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATEREQUAL    reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSEQUAL       reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    GREATERTHAN     reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    LESSTHAN        reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    ANDlOGICAL      reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    ORLOGICAL       reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    SEMICOLON       reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    COMMA           reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    POINT           reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    RPAREN          reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)
    RBRACKET        reduce using rule 158 (elemento_logico -> elemento_string comparador elemento_string .)


state 197

    (152) elemento_string -> VARIABLE .

    IDENTICAL       reduce using rule 152 (elemento_string -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 152 (elemento_string -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 152 (elemento_string -> VARIABLE .)
    DIFFERENT       reduce using rule 152 (elemento_string -> VARIABLE .)
    GREATEREQUAL    reduce using rule 152 (elemento_string -> VARIABLE .)
    LESSEQUAL       reduce using rule 152 (elemento_string -> VARIABLE .)
    GREATERTHAN     reduce using rule 152 (elemento_string -> VARIABLE .)
    LESSTHAN        reduce using rule 152 (elemento_string -> VARIABLE .)
    ANDlOGICAL      reduce using rule 152 (elemento_string -> VARIABLE .)
    ORLOGICAL       reduce using rule 152 (elemento_string -> VARIABLE .)
    SEMICOLON       reduce using rule 152 (elemento_string -> VARIABLE .)
    COMMA           reduce using rule 152 (elemento_string -> VARIABLE .)
    POINT           reduce using rule 152 (elemento_string -> VARIABLE .)
    RPAREN          reduce using rule 152 (elemento_string -> VARIABLE .)
    RBRACKET        reduce using rule 152 (elemento_string -> VARIABLE .)
    ARROW           reduce using rule 152 (elemento_string -> VARIABLE .)


state 198

    (154) elemento_logico -> elemento_logico comparador elemento_logico .
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for NOTIDENTICAL resolved as shift
  ! shift/reduce conflict for EQUALSLOGICAL resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for ANDlOGICAL resolved as shift
  ! shift/reduce conflict for ORLOGICAL resolved as shift
    SEMICOLON       reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .)
    COMMA           reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .)
    POINT           reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RPAREN          reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .)
    RBRACKET        reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .)
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

  ! IDENTICAL       [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! NOTIDENTICAL    [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! EQUALSLOGICAL   [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! DIFFERENT       [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATEREQUAL    [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSEQUAL       [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! GREATERTHAN     [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! LESSTHAN        [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ANDlOGICAL      [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]
  ! ORLOGICAL       [ reduce using rule 154 (elemento_logico -> elemento_logico comparador elemento_logico .) ]

    comparador                     shift and go to state 138

state 199

    (143) elemento_numerico -> LPAREN elemento_numerico RPAREN .

    PLUS            reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    MINUS           reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIVIDE          reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EXPONENTIAL     reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    TIMES           reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    IDENTICAL       reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    NOTIDENTICAL    reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    EQUALSLOGICAL   reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    DIFFERENT       reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATEREQUAL    reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSEQUAL       reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    GREATERTHAN     reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    LESSTHAN        reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ANDlOGICAL      reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    ORLOGICAL       reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    SEMICOLON       reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    COMMA           reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    POINT           reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RPAREN          reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)
    RBRACKET        reduce using rule 143 (elemento_numerico -> LPAREN elemento_numerico RPAREN .)


state 200

    (45) funciones_ingreso_datos -> VAR_EXPORT LPAREN param . COMMA elemento_logico RPAREN

    COMMA           shift and go to state 251


state 201

    (46) funciones_ingreso_datos -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 46 (funciones_ingreso_datos -> READLINE LPAREN RPAREN .)


state 202

    (47) funciones_ingreso_datos -> READLINE LPAREN elemento_string . RPAREN

    RPAREN          shift and go to state 252


state 203

    (94) map -> NEW MAP LPAREN . LBRACKET todos_clave_valor RBRACKET RPAREN
    (95) map -> NEW MAP LPAREN . RPAREN

    LBRACKET        shift and go to state 253
    RPAREN          shift and go to state 254


state 204

    (100) vector -> NEW VECTOR LPAREN . LBRACKET params RBRACKET RPAREN
    (101) vector -> NEW VECTOR LPAREN . RPAREN

    LBRACKET        shift and go to state 255
    RPAREN          shift and go to state 256


state 205

    (109) set -> NEW SET LPAREN . LBRACKET params RBRACKET RPAREN
    (110) set -> NEW SET LPAREN . RPAREN

    LBRACKET        shift and go to state 257
    RPAREN          shift and go to state 258


state 206

    (83) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN . funciones_cuerpo SEMICOLON
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 259

state 207

    (84) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo . SEMICOLON

    SEMICOLON       shift and go to state 260


state 208

    (70) foreach -> FOREACH LPAREN foreach_content RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 261


state 209

    (71) foreach_content -> VARIABLE AS . VARIABLE
    (72) foreach_content -> VARIABLE AS . VARIABLE ARROW VARIABLE

    VARIABLE        shift and go to state 262


state 210

    (19) params -> param COMMA params .

    SEMICOLON       reduce using rule 19 (params -> param COMMA params .)
    RPAREN          reduce using rule 19 (params -> param COMMA params .)
    RBRACKET        reduce using rule 19 (params -> param COMMA params .)


state 211

    (20) params_points -> param .
    (21) params_points -> param . POINT params_points

    SEMICOLON       reduce using rule 20 (params_points -> param .)
    POINT           shift and go to state 157


state 212

    (21) params_points -> param POINT params_points .

    SEMICOLON       reduce using rule 21 (params_points -> param POINT params_points .)


state 213

    (17) param -> VARIABLE LBRACKET VARIABLE . RBRACKET

    RBRACKET        shift and go to state 263


state 214

    (43) vardump -> VAR_DUMP LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 264


state 215

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW . FIND LPAREN param RPAREN RPAREN SEMICOLON

    KEYS            shift and go to state 265
    DIFF            shift and go to state 266
    UNION           shift and go to state 267
    FIND            shift and go to state 268


state 216

    (42) print_r -> PRINT_R LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 269


state 217

    (44) var_export -> VAR_EXPORT LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 270


state 218

    (61) else_if -> ELSE . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY

    IF              shift and go to state 167


state 219

    (59) else -> ELSE LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 271


state 220

    (61) else_if -> ELSE IF LPAREN . elemento_logico RPAREN LCURLY expresiones RCURLY
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 272
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 221

    (60) else_if -> ELSEIF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 273
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 222

    (55) if_structures -> if_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 55 (if_structures -> if_r else_r ENDIF SEMICOLON .)


state 223

    (56) if_structures -> if_r elseif_r else_r ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 274


state 224

    (57) if_structures -> if_r elseif_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR             reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    IF              reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    $end            reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 57 (if_structures -> if_r elseif_r ENDIF SEMICOLON .)


state 225

    (64) else_r -> ELSE DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 64 (else_r -> ELSE DOUBLEPOINT expresiones .)


state 226

    (65) elseif_r -> ELSEIF LPAREN elemento_logico . RPAREN DOUBLEPOINT expresiones
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 275
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 227

    (58) if -> IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (63) if_r -> IF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    LCURLY          shift and go to state 276
    DOUBLEPOINT     shift and go to state 277


state 228

    (68) while_p -> WHILE LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY
    (69) while_p -> WHILE LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones ENDWHILE SEMICOLON

    LCURLY          shift and go to state 278
    DOUBLEPOINT     shift and go to state 279


state 229

    (89) variables_por_comma -> VARIABLE .
    (90) variables_por_comma -> VARIABLE . COMMA variables_por_comma
    (13) param -> VARIABLE .
    (17) param -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (152) elemento_string -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (156) elemento_logico -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 13 (param -> VARIABLE .)
    COMMA           shift and go to state 191
    RPAREN          reduce using rule 13 (param -> VARIABLE .)
    LBRACKET        shift and go to state 158
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! RPAREN          [ reduce using rule 89 (variables_por_comma -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 13 (param -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 144 (elemento_numerico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]


state 230

    (74) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 280


state 231

    (88) funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 281

state 232

    (87) funcion_declaracion_anonima -> FUNCTION LPAREN params . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 282


state 233

    (86) funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .

    VARIABLE        reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    FOREACH         reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ECHO            reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    PRINT           reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    WHILE           reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    RCURLY          reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ENDIF           reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 86 (funcion_ejecucion -> VARIABLE LPAREN params RPAREN SEMICOLON .)


state 234

    (152) elemento_string -> VARIABLE .
    (144) elemento_numerico -> VARIABLE .
    (156) elemento_logico -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for NOTIDENTICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for EQUALSLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for LESSTHAN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ANDlOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for ORLOGICAL resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 144 (elemento_numerico -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 144 (elemento_numerico -> VARIABLE .)
    COMMA           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    PLUS            reduce using rule 144 (elemento_numerico -> VARIABLE .)
    MINUS           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIVIDE          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EXPONENTIAL     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    TIMES           reduce using rule 144 (elemento_numerico -> VARIABLE .)
    IDENTICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    NOTIDENTICAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    EQUALSLOGICAL   reduce using rule 144 (elemento_numerico -> VARIABLE .)
    DIFFERENT       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATEREQUAL    reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSEQUAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    GREATERTHAN     reduce using rule 144 (elemento_numerico -> VARIABLE .)
    LESSTHAN        reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ANDlOGICAL      reduce using rule 144 (elemento_numerico -> VARIABLE .)
    ORLOGICAL       reduce using rule 144 (elemento_numerico -> VARIABLE .)
    RPAREN          reduce using rule 144 (elemento_numerico -> VARIABLE .)
    RBRACKET        reduce using rule 144 (elemento_numerico -> VARIABLE .)

  ! COMMA           [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 152 (elemento_string -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! IDENTICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! NOTIDENTICAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! EQUALSLOGICAL   [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! DIFFERENT       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATEREQUAL    [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSEQUAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! GREATERTHAN     [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! LESSTHAN        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ANDlOGICAL      [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! ORLOGICAL       [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 156 (elemento_logico -> VARIABLE .) ]


state 235

    (127) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype . RPAREN SEMICOLON

    RPAREN          shift and go to state 283


state 236

    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET . params_unitype RBRACKET RPAREN SEMICOLON
    (22) params_unitype -> . only_string
    (23) params_unitype -> . only_numerico
    (24) params_unitype -> . only_logico
    (25) only_string -> . elemento_string
    (26) only_string -> . elemento_string COMMA only_string
    (27) only_numerico -> . elemento_numerico
    (28) only_numerico -> . elemento_numerico COMMA only_numerico
    (29) only_logico -> . elemento_logico
    (30) only_logico -> . elemento_logico COMMA only_logico
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 234
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params_unitype                 shift and go to state 284
    only_string                    shift and go to state 237
    only_numerico                  shift and go to state 238
    only_logico                    shift and go to state 239
    elemento_string                shift and go to state 240
    elemento_numerico              shift and go to state 241
    elemento_logico                shift and go to state 242
    elemento_logico_pri            shift and go to state 68

state 237

    (22) params_unitype -> only_string .

    RPAREN          reduce using rule 22 (params_unitype -> only_string .)
    RBRACKET        reduce using rule 22 (params_unitype -> only_string .)


state 238

    (23) params_unitype -> only_numerico .

    RPAREN          reduce using rule 23 (params_unitype -> only_numerico .)
    RBRACKET        reduce using rule 23 (params_unitype -> only_numerico .)


state 239

    (24) params_unitype -> only_logico .

    RPAREN          reduce using rule 24 (params_unitype -> only_logico .)
    RBRACKET        reduce using rule 24 (params_unitype -> only_logico .)


state 240

    (25) only_string -> elemento_string .
    (26) only_string -> elemento_string . COMMA only_string
    (158) elemento_logico -> elemento_string . comparador elemento_string
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 25 (only_string -> elemento_string .)
    RBRACKET        reduce using rule 25 (only_string -> elemento_string .)
    COMMA           shift and go to state 285
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 137

state 241

    (27) only_numerico -> elemento_numerico .
    (28) only_numerico -> elemento_numerico . COMMA only_numerico
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (157) elemento_logico -> elemento_numerico . comparador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 27 (only_numerico -> elemento_numerico .)
    RBRACKET        reduce using rule 27 (only_numerico -> elemento_numerico .)
    COMMA           shift and go to state 286
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    operador                       shift and go to state 120
    comparador                     shift and go to state 121

state 242

    (29) only_logico -> elemento_logico .
    (30) only_logico -> elemento_logico . COMMA only_logico
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          reduce using rule 29 (only_logico -> elemento_logico .)
    RBRACKET        reduce using rule 29 (only_logico -> elemento_logico .)
    COMMA           shift and go to state 287
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 243

    (121) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param . RPAREN SEMICOLON
    (18) params -> param .
    (19) params -> param . COMMA params

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 288
    COMMA           shift and go to state 156

  ! RPAREN          [ reduce using rule 18 (params -> param .) ]


state 244

    (122) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 289


state 245

    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET . params RBRACKET RPAREN SEMICOLON
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 290
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 246

    (75) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN . variables_por_comma RPAREN funciones_cuerpo
    (87) funcion_declaracion_anonima -> FUNCTION LPAREN . params RPAREN funciones_cuerpo
    (88) funcion_declaracion_anonima -> FUNCTION LPAREN . RPAREN funciones_cuerpo
    (89) variables_por_comma -> . VARIABLE
    (90) variables_por_comma -> . VARIABLE COMMA variables_por_comma
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    RPAREN          shift and go to state 231
    VARIABLE        shift and go to state 229
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    variables_por_comma            shift and go to state 291
    params                         shift and go to state 232
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 247

    (80) funciones_cuerpo -> LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR             reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    IF              reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    $end            reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)
    SEMICOLON       reduce using rule 80 (funciones_cuerpo -> LCURLY expresiones RCURLY .)


state 248

    (76) funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 76 (funcion_declaracion -> FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 249

    (90) variables_por_comma -> VARIABLE COMMA variables_por_comma .

    RPAREN          reduce using rule 90 (variables_por_comma -> VARIABLE COMMA variables_por_comma .)


state 250

    (78) funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN .

    LCURLY          reduce using rule 78 (funcion_cabecera_declaracion -> FUNCTION_NAME LPAREN variables_por_comma RPAREN .)


state 251

    (45) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA . elemento_logico RPAREN
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 292
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 252

    (47) funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .

    SEMICOLON       reduce using rule 47 (funciones_ingreso_datos -> READLINE LPAREN elemento_string RPAREN .)


state 253

    (94) map -> NEW MAP LPAREN LBRACKET . todos_clave_valor RBRACKET RPAREN
    (98) todos_clave_valor -> . clave_valor
    (99) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (96) clave_valor -> . elemento_string ARROW param
    (97) clave_valor -> . NUMBER ARROW param
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 296
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 197

    todos_clave_valor              shift and go to state 293
    clave_valor                    shift and go to state 294
    elemento_string                shift and go to state 295

state 254

    (95) map -> NEW MAP LPAREN RPAREN .

    SEMICOLON       reduce using rule 95 (map -> NEW MAP LPAREN RPAREN .)


state 255

    (100) vector -> NEW VECTOR LPAREN LBRACKET . params RBRACKET RPAREN
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 297
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 256

    (101) vector -> NEW VECTOR LPAREN RPAREN .

    SEMICOLON       reduce using rule 101 (vector -> NEW VECTOR LPAREN RPAREN .)


state 257

    (109) set -> NEW SET LPAREN LBRACKET . params RBRACKET RPAREN
    (18) params -> . param
    (19) params -> . param COMMA params
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    params                         shift and go to state 298
    param                          shift and go to state 109
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 258

    (110) set -> NEW SET LPAREN RPAREN .

    SEMICOLON       reduce using rule 110 (set -> NEW SET LPAREN RPAREN .)


state 259

    (83) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo . SEMICOLON

    SEMICOLON       shift and go to state 299


state 260

    (84) funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .

    VARIABLE        reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR             reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION        reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    RETURN          reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION_NAME   reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    FOREACH         reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ECHO            reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    PRINT           reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR_DUMP        reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    PRINT_R         reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    VAR_EXPORT      reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    IF              reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    WHILE           reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    $end            reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    RCURLY          reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ENDIF           reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ELSE            reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ELSEIF          reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)
    ENDWHILE        reduce using rule 84 (funcion_ejecucion -> FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON .)


state 261

    (70) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 300
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 262

    (71) foreach_content -> VARIABLE AS VARIABLE .
    (72) foreach_content -> VARIABLE AS VARIABLE . ARROW VARIABLE

    RPAREN          reduce using rule 71 (foreach_content -> VARIABLE AS VARIABLE .)
    ARROW           shift and go to state 301


state 263

    (17) param -> VARIABLE LBRACKET VARIABLE RBRACKET .

    COMMA           reduce using rule 17 (param -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    POINT           reduce using rule 17 (param -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    SEMICOLON       reduce using rule 17 (param -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RPAREN          reduce using rule 17 (param -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RBRACKET        reduce using rule 17 (param -> VARIABLE LBRACKET VARIABLE RBRACKET .)


state 264

    (43) vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 43 (vardump -> VAR_DUMP LPAREN param RPAREN SEMICOLON .)


state 265

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS . LPAREN RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 302


state 266

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF . LPAREN VARIABLE RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 303


state 267

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION . LPAREN VARIABLE RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 304


state 268

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND . LPAREN param RPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 305


state 269

    (42) print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 42 (print_r -> PRINT_R LPAREN param RPAREN SEMICOLON .)


state 270

    (44) var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 44 (var_export -> VAR_EXPORT LPAREN param RPAREN SEMICOLON .)


state 271

    (59) else -> ELSE LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR             reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    IF              reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    $end            reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 59 (else -> ELSE LCURLY expresiones RCURLY .)


state 272

    (61) else_if -> ELSE IF LPAREN elemento_logico . RPAREN LCURLY expresiones RCURLY
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 306
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 273

    (60) else_if -> ELSEIF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 307


state 274

    (56) if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .

    VARIABLE        reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR             reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RETURN          reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FUNCTION_NAME   reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    FOREACH         reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ECHO            reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT           reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_DUMP        reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    PRINT_R         reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    VAR_EXPORT      reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    IF              reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    WHILE           reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    $end            reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    RCURLY          reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDIF           reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSE            reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 56 (if_structures -> if_r elseif_r else_r ENDIF SEMICOLON .)


state 275

    (65) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN . DOUBLEPOINT expresiones

    DOUBLEPOINT     shift and go to state 308


state 276

    (58) if -> IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 309
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 277

    (63) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 310
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 278

    (68) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 311
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 279

    (69) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones ENDWHILE SEMICOLON
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 312
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 280

    (74) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 313

state 281

    (88) funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR             reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    IF              reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    $end            reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 88 (funcion_declaracion_anonima -> FUNCTION LPAREN RPAREN funciones_cuerpo .)


state 282

    (87) funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 314

state 283

    (127) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 315


state 284

    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 316


state 285

    (26) only_string -> elemento_string COMMA . only_string
    (25) only_string -> . elemento_string
    (26) only_string -> . elemento_string COMMA only_string
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 197

    elemento_string                shift and go to state 317
    only_string                    shift and go to state 318

state 286

    (28) only_numerico -> elemento_numerico COMMA . only_numerico
    (27) only_numerico -> . elemento_numerico
    (28) only_numerico -> . elemento_numerico COMMA only_numerico
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE

    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    VARIABLE        shift and go to state 140

    elemento_numerico              shift and go to state 319
    only_numerico                  shift and go to state 320

state 287

    (30) only_logico -> elemento_logico COMMA . only_logico
    (29) only_logico -> . elemento_logico
    (30) only_logico -> . elemento_logico COMMA only_logico
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NOTLOGICAL      shift and go to state 69
    VARIABLE        shift and go to state 142
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67

    elemento_logico                shift and go to state 242
    only_logico                    shift and go to state 321
    elemento_logico_pri            shift and go to state 68
    elemento_numerico              shift and go to state 143
    elemento_string                shift and go to state 144

state 288

    (121) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 322


state 289

    (122) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 323


state 290

    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params . RBRACKET RPAREN SEMICOLON

    RBRACKET        shift and go to state 324


state 291

    (75) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma . RPAREN funciones_cuerpo

    RPAREN          shift and go to state 325


state 292

    (45) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico . RPAREN
    (154) elemento_logico -> elemento_logico . comparador elemento_logico
    (161) comparador -> . IDENTICAL
    (162) comparador -> . NOTIDENTICAL
    (163) comparador -> . EQUALSLOGICAL
    (164) comparador -> . DIFFERENT
    (165) comparador -> . GREATEREQUAL
    (166) comparador -> . LESSEQUAL
    (167) comparador -> . GREATERTHAN
    (168) comparador -> . LESSTHAN
    (169) comparador -> . ANDlOGICAL
    (170) comparador -> . ORLOGICAL

    RPAREN          shift and go to state 326
    IDENTICAL       shift and go to state 127
    NOTIDENTICAL    shift and go to state 128
    EQUALSLOGICAL   shift and go to state 129
    DIFFERENT       shift and go to state 130
    GREATEREQUAL    shift and go to state 131
    LESSEQUAL       shift and go to state 132
    GREATERTHAN     shift and go to state 133
    LESSTHAN        shift and go to state 134
    ANDlOGICAL      shift and go to state 135
    ORLOGICAL       shift and go to state 136

    comparador                     shift and go to state 138

state 293

    (94) map -> NEW MAP LPAREN LBRACKET todos_clave_valor . RBRACKET RPAREN

    RBRACKET        shift and go to state 327


state 294

    (98) todos_clave_valor -> clave_valor .
    (99) todos_clave_valor -> clave_valor . COMMA todos_clave_valor

    RBRACKET        reduce using rule 98 (todos_clave_valor -> clave_valor .)
    COMMA           shift and go to state 328


state 295

    (96) clave_valor -> elemento_string . ARROW param

    ARROW           shift and go to state 329


state 296

    (97) clave_valor -> NUMBER . ARROW param

    ARROW           shift and go to state 330


state 297

    (100) vector -> NEW VECTOR LPAREN LBRACKET params . RBRACKET RPAREN

    RBRACKET        shift and go to state 331


state 298

    (109) set -> NEW SET LPAREN LBRACKET params . RBRACKET RPAREN

    RBRACKET        shift and go to state 332


state 299

    (83) funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .

    VARIABLE        reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR             reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION        reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    RETURN          reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FUNCTION_NAME   reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    FOREACH         reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ECHO            reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    PRINT           reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR_DUMP        reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    PRINT_R         reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    VAR_EXPORT      reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    IF              reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    WHILE           reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    $end            reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    RCURLY          reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ENDIF           reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ELSE            reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ELSEIF          reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)
    ENDWHILE        reduce using rule 83 (funcion_ejecucion -> FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON .)


state 300

    (70) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 333


state 301

    (72) foreach_content -> VARIABLE AS VARIABLE ARROW . VARIABLE

    VARIABLE        shift and go to state 334


state 302

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 335


state 303

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN . VARIABLE RPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 336


state 304

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN . VARIABLE RPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 337


state 305

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN . param RPAREN RPAREN SEMICOLON
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 338
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 306

    (61) else_if -> ELSE IF LPAREN elemento_logico RPAREN . LCURLY expresiones RCURLY

    LCURLY          shift and go to state 339


state 307

    (60) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 340
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 308

    (65) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT . expresiones
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 341
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 309

    (58) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 342


state 310

    (63) if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 63 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 63 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 63 (if_r -> IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 311

    (68) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 343


state 312

    (69) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones . ENDWHILE SEMICOLON

    ENDWHILE        shift and go to state 344


state 313

    (74) funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 74 (funcion_declaracion -> VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 314

    (87) funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR             reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    IF              reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    $end            reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 87 (funcion_declaracion_anonima -> FUNCTION LPAREN params RPAREN funciones_cuerpo .)


state 315

    (127) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .

    VARIABLE        reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR             reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    FOREACH         reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ECHO            reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    IF              reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    $end            reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    RCURLY          reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ENDIF           reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ELSE            reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 127 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON .)


state 316

    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 345


state 317

    (25) only_string -> elemento_string .
    (26) only_string -> elemento_string . COMMA only_string

    RPAREN          reduce using rule 25 (only_string -> elemento_string .)
    RBRACKET        reduce using rule 25 (only_string -> elemento_string .)
    COMMA           shift and go to state 285


state 318

    (26) only_string -> elemento_string COMMA only_string .

    RPAREN          reduce using rule 26 (only_string -> elemento_string COMMA only_string .)
    RBRACKET        reduce using rule 26 (only_string -> elemento_string COMMA only_string .)


state 319

    (27) only_numerico -> elemento_numerico .
    (28) only_numerico -> elemento_numerico . COMMA only_numerico
    (140) elemento_numerico -> elemento_numerico . operador elemento_numerico
    (145) operador -> . PLUS
    (146) operador -> . MINUS
    (147) operador -> . DIVIDE
    (148) operador -> . EXPONENTIAL
    (149) operador -> . TIMES

    RPAREN          reduce using rule 27 (only_numerico -> elemento_numerico .)
    RBRACKET        reduce using rule 27 (only_numerico -> elemento_numerico .)
    COMMA           shift and go to state 286
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    DIVIDE          shift and go to state 124
    EXPONENTIAL     shift and go to state 125
    TIMES           shift and go to state 126

    operador                       shift and go to state 120

state 320

    (28) only_numerico -> elemento_numerico COMMA only_numerico .

    RPAREN          reduce using rule 28 (only_numerico -> elemento_numerico COMMA only_numerico .)
    RBRACKET        reduce using rule 28 (only_numerico -> elemento_numerico COMMA only_numerico .)


state 321

    (30) only_logico -> elemento_logico COMMA only_logico .

    RPAREN          reduce using rule 30 (only_logico -> elemento_logico COMMA only_logico .)
    RBRACKET        reduce using rule 30 (only_logico -> elemento_logico COMMA only_logico .)


state 322

    (121) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .

    VARIABLE        reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR             reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    RETURN          reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    FOREACH         reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ECHO            reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    PRINT           reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    IF              reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    WHILE           reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    $end            reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    RCURLY          reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ENDIF           reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ELSE            reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 121 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON .)


state 323

    (122) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .

    VARIABLE        reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    FOREACH         reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ECHO            reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    PRINT           reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    WHILE           reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    RCURLY          reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ENDIF           reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 122 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON .)


state 324

    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET . RPAREN SEMICOLON

    RPAREN          shift and go to state 346


state 325

    (75) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN . funciones_cuerpo
    (80) funciones_cuerpo -> . LCURLY expresiones RCURLY
    (81) funciones_cuerpo -> . LCURLY RCURLY

    LCURLY          shift and go to state 114

    funciones_cuerpo               shift and go to state 347

state 326

    (45) funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .

    SEMICOLON       reduce using rule 45 (funciones_ingreso_datos -> VAR_EXPORT LPAREN param COMMA elemento_logico RPAREN .)


state 327

    (94) map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET . RPAREN

    RPAREN          shift and go to state 348


state 328

    (99) todos_clave_valor -> clave_valor COMMA . todos_clave_valor
    (98) todos_clave_valor -> . clave_valor
    (99) todos_clave_valor -> . clave_valor COMMA todos_clave_valor
    (96) clave_valor -> . elemento_string ARROW param
    (97) clave_valor -> . NUMBER ARROW param
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE

    NUMBER          shift and go to state 296
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    VARIABLE        shift and go to state 197

    clave_valor                    shift and go to state 294
    todos_clave_valor              shift and go to state 349
    elemento_string                shift and go to state 295

state 329

    (96) clave_valor -> elemento_string ARROW . param
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    elemento_string                shift and go to state 84
    param                          shift and go to state 350
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 330

    (97) clave_valor -> NUMBER ARROW . param
    (13) param -> . VARIABLE
    (14) param -> . elemento_string
    (15) param -> . elemento_numerico
    (16) param -> . elemento_logico
    (17) param -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (150) elemento_string -> . STRING
    (151) elemento_string -> . STRINGCC
    (152) elemento_string -> . VARIABLE
    (140) elemento_numerico -> . elemento_numerico operador elemento_numerico
    (141) elemento_numerico -> . FLOAT
    (142) elemento_numerico -> . NUMBER
    (143) elemento_numerico -> . LPAREN elemento_numerico RPAREN
    (144) elemento_numerico -> . VARIABLE
    (153) elemento_logico -> . elemento_logico_pri
    (154) elemento_logico -> . elemento_logico comparador elemento_logico
    (155) elemento_logico -> . NOTLOGICAL elemento_logico
    (156) elemento_logico -> . VARIABLE
    (157) elemento_logico -> . elemento_numerico comparador elemento_numerico
    (158) elemento_logico -> . elemento_string comparador elemento_string
    (159) elemento_logico_pri -> . TRUE
    (160) elemento_logico_pri -> . FALSE

    VARIABLE        shift and go to state 83
    STRING          shift and go to state 66
    STRINGCC        shift and go to state 67
    FLOAT           shift and go to state 63
    NUMBER          shift and go to state 64
    LPAREN          shift and go to state 65
    NOTLOGICAL      shift and go to state 69
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    param                          shift and go to state 351
    elemento_string                shift and go to state 84
    elemento_numerico              shift and go to state 85
    elemento_logico                shift and go to state 86
    elemento_logico_pri            shift and go to state 68

state 331

    (100) vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET . RPAREN

    RPAREN          shift and go to state 352


state 332

    (109) set -> NEW SET LPAREN LBRACKET params RBRACKET . RPAREN

    RPAREN          shift and go to state 353


state 333

    (70) foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 70 (foreach -> FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY .)


state 334

    (72) foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE .

    RPAREN          reduce using rule 72 (foreach_content -> VARIABLE AS VARIABLE ARROW VARIABLE .)


state 335

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 354


state 336

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 355


state 337

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 356


state 338

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param . RPAREN RPAREN SEMICOLON

    RPAREN          shift and go to state 357


state 339

    (61) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY . expresiones RCURLY
    (1) expresiones -> . expresion
    (2) expresiones -> . expresion expresiones
    (3) expresion -> . var_asignar
    (4) expresion -> . var_declarar
    (5) expresion -> . expresiones_de_salida
    (6) expresion -> . estructuras_de_control
    (7) expresion -> . var_plusminus
    (8) expresion -> . funciones_datos_estructurados
    (9) expresion -> . funcion_declaracion
    (10) expresion -> . return
    (11) expresion -> . funcion_ejecucion
    (12) expresion -> . foreach
    (130) var_asignar -> . VARIABLE EQUALS var_asignar_contenido SEMICOLON
    (131) var_asignar -> . VARIABLE EQUALS funcion_declaracion_anonima
    (129) var_declarar -> . VAR var_asignar
    (34) expresiones_de_salida -> . echo
    (35) expresiones_de_salida -> . print
    (36) expresiones_de_salida -> . vardump
    (37) expresiones_de_salida -> . print_r
    (38) expresiones_de_salida -> . var_export
    (48) estructuras_de_control -> . if_structures
    (49) estructuras_de_control -> . estructuras_while
    (138) var_plusminus -> . VARIABLE PLUS PLUS SEMICOLON
    (139) var_plusminus -> . VARIABLE MINUS MINUS SEMICOLON
    (111) funciones_datos_estructurados -> . funciones_map
    (112) funciones_datos_estructurados -> . funciones_set
    (113) funciones_datos_estructurados -> . funciones_vector
    (73) funcion_declaracion -> . FUNCTION funcion_cabecera_declaracion funciones_cuerpo
    (74) funcion_declaracion -> . VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (75) funcion_declaracion -> . VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (76) funcion_declaracion -> . FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo
    (77) funcion_declaracion -> . FUNCTION LPAREN RPAREN funciones_cuerpo
    (82) return -> . RETURN var_asignar_contenido SEMICOLON
    (83) funcion_ejecucion -> . FUNCTION_NAME LPAREN params RPAREN funciones_cuerpo SEMICOLON
    (84) funcion_ejecucion -> . FUNCTION_NAME LPAREN RPAREN funciones_cuerpo SEMICOLON
    (85) funcion_ejecucion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (86) funcion_ejecucion -> . VARIABLE LPAREN params RPAREN SEMICOLON
    (70) foreach -> . FOREACH LPAREN foreach_content RPAREN LCURLY expresiones RCURLY
    (39) echo -> . ECHO params SEMICOLON
    (40) echo -> . ECHO params_points SEMICOLON
    (41) print -> . PRINT param SEMICOLON
    (43) vardump -> . VAR_DUMP LPAREN param RPAREN SEMICOLON
    (42) print_r -> . PRINT_R LPAREN param RPAREN SEMICOLON
    (44) var_export -> . VAR_EXPORT LPAREN param RPAREN SEMICOLON
    (50) if_structures -> . if
    (51) if_structures -> . if else
    (52) if_structures -> . if else_if else
    (53) if_structures -> . if else_if
    (54) if_structures -> . if_r ENDIF SEMICOLON
    (55) if_structures -> . if_r else_r ENDIF SEMICOLON
    (56) if_structures -> . if_r elseif_r else_r ENDIF SEMICOLON
    (57) if_structures -> . if_r elseif_r ENDIF SEMICOLON
    (67) estructuras_while -> . while_p
    (114) funciones_map -> . key_map
    (115) funciones_map -> . diff_map
    (124) funciones_set -> . union_set
    (125) funciones_set -> . remove_set
    (118) funciones_vector -> . find_vector
    (119) funciones_vector -> . push_vector
    (58) if -> . IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (63) if_r -> . IF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones
    (68) while_p -> . WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY
    (69) while_p -> . WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON
    (116) key_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON
    (117) diff_map -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (126) union_set -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON
    (127) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN params_unitype RPAREN SEMICOLON
    (128) remove_set -> . VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON
    (120) find_vector -> . VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON
    (121) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN param RPAREN SEMICOLON
    (122) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN params RPAREN SEMICOLON
    (123) push_vector -> . VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON

    VARIABLE        shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 25
    RETURN          shift and go to state 26
    FUNCTION_NAME   shift and go to state 27
    FOREACH         shift and go to state 28
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    VAR_DUMP        shift and go to state 31
    PRINT_R         shift and go to state 32
    VAR_EXPORT      shift and go to state 33
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    expresiones                    shift and go to state 358
    expresion                      shift and go to state 2
    var_asignar                    shift and go to state 3
    var_declarar                   shift and go to state 4
    expresiones_de_salida          shift and go to state 5
    estructuras_de_control         shift and go to state 6
    var_plusminus                  shift and go to state 7
    funciones_datos_estructurados  shift and go to state 8
    funcion_declaracion            shift and go to state 9
    return                         shift and go to state 10
    funcion_ejecucion              shift and go to state 11
    foreach                        shift and go to state 12
    echo                           shift and go to state 15
    print                          shift and go to state 16
    vardump                        shift and go to state 17
    print_r                        shift and go to state 18
    var_export                     shift and go to state 19
    if_structures                  shift and go to state 20
    estructuras_while              shift and go to state 21
    funciones_map                  shift and go to state 22
    funciones_set                  shift and go to state 23
    funciones_vector               shift and go to state 24
    if                             shift and go to state 34
    if_r                           shift and go to state 35
    while_p                        shift and go to state 36
    key_map                        shift and go to state 37
    diff_map                       shift and go to state 38
    union_set                      shift and go to state 39
    remove_set                     shift and go to state 40
    find_vector                    shift and go to state 41
    push_vector                    shift and go to state 42

state 340

    (60) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 359


state 341

    (65) elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .

    ENDIF           reduce using rule 65 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSE            reduce using rule 65 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)
    ELSEIF          reduce using rule 65 (elseif_r -> ELSEIF LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones .)


state 342

    (58) if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 58 (if -> IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 343

    (68) while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    VARIABLE        reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSE            reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 68 (while_p -> WHILE LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 344

    (69) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 360


state 345

    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 361


state 346

    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 362


state 347

    (75) funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .

    VARIABLE        reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR             reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION        reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RETURN          reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FUNCTION_NAME   reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    FOREACH         reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ECHO            reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT           reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_DUMP        reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    PRINT_R         reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    VAR_EXPORT      reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    IF              reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    WHILE           reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    $end            reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    RCURLY          reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDIF           reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSE            reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ELSEIF          reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)
    ENDWHILE        reduce using rule 75 (funcion_declaracion -> VAR VARIABLE EQUALS FUNCTION LPAREN variables_por_comma RPAREN funciones_cuerpo .)


state 348

    (94) map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN .

    SEMICOLON       reduce using rule 94 (map -> NEW MAP LPAREN LBRACKET todos_clave_valor RBRACKET RPAREN .)


state 349

    (99) todos_clave_valor -> clave_valor COMMA todos_clave_valor .

    RBRACKET        reduce using rule 99 (todos_clave_valor -> clave_valor COMMA todos_clave_valor .)


state 350

    (96) clave_valor -> elemento_string ARROW param .

    COMMA           reduce using rule 96 (clave_valor -> elemento_string ARROW param .)
    RBRACKET        reduce using rule 96 (clave_valor -> elemento_string ARROW param .)


state 351

    (97) clave_valor -> NUMBER ARROW param .

    COMMA           reduce using rule 97 (clave_valor -> NUMBER ARROW param .)
    RBRACKET        reduce using rule 97 (clave_valor -> NUMBER ARROW param .)


state 352

    (100) vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN .

    SEMICOLON       reduce using rule 100 (vector -> NEW VECTOR LPAREN LBRACKET params RBRACKET RPAREN .)


state 353

    (109) set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN .

    SEMICOLON       reduce using rule 109 (set -> NEW SET LPAREN LBRACKET params RBRACKET RPAREN .)


state 354

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 363


state 355

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 364


state 356

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 365


state 357

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 366


state 358

    (61) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones . RCURLY

    RCURLY          shift and go to state 367


state 359

    (60) else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 60 (else_if -> ELSEIF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 360

    (69) while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .

    VARIABLE        reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR             reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FUNCTION        reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RETURN          reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FUNCTION_NAME   reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    FOREACH         reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_DUMP        reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    PRINT_R         reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    VAR_EXPORT      reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    IF              reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    $end            reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    RCURLY          reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 69 (while_p -> WHILE LPAREN elemento_logico RPAREN DOUBLEPOINT expresiones ENDWHILE SEMICOLON .)


state 361

    (128) remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    RETURN          reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    FOREACH         reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 128 (remove_set -> VARIABLE SIMPLEARROW REMOVE LPAREN LBRACKET params_unitype RBRACKET RPAREN SEMICOLON .)


state 362

    (123) push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .

    VARIABLE        reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR             reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    RETURN          reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    FOREACH         reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ECHO            reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    PRINT           reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    IF              reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    WHILE           reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    $end            reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    RCURLY          reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ENDIF           reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ELSE            reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 123 (push_vector -> VARIABLE SIMPLEARROW PUSH LPAREN LBRACKET params RBRACKET RPAREN SEMICOLON .)


state 363

    (116) key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 116 (key_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW KEYS LPAREN RPAREN RPAREN SEMICOLON .)


state 364

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 368


state 365

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 369


state 366

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 370


state 367

    (61) else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .

    ELSE            reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ELSEIF          reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VARIABLE        reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR             reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION        reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RETURN          reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FUNCTION_NAME   reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    FOREACH         reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ECHO            reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT           reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_DUMP        reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    PRINT_R         reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    VAR_EXPORT      reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    IF              reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    WHILE           reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    $end            reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    RCURLY          reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDIF           reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)
    ENDWHILE        reduce using rule 61 (else_if -> ELSE IF LPAREN elemento_logico RPAREN LCURLY expresiones RCURLY .)


state 368

    (117) diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 117 (diff_map -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW DIFF LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)


state 369

    (126) union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 126 (union_set -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW UNION LPAREN VARIABLE RPAREN RPAREN SEMICOLON .)


state 370

    (120) find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR_DUMP        reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    PRINT_R         reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    VAR_EXPORT      reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ENDIF           reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)
    ENDWHILE        reduce using rule 120 (find_vector -> VAR_DUMP LPAREN VARIABLE SIMPLEARROW FIND LPAREN param RPAREN RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 92 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 141 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 141 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 164 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 164 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 194 resolved as shift
WARNING: shift/reduce conflict for EXPONENTIAL in state 194 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 194 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for NOTIDENTICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for EQUALSLOGICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 198 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 198 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 198 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 198 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 198 resolved as shift
WARNING: shift/reduce conflict for ANDlOGICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for ORLOGICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 243 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_numerico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (var_asignar_contenido -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 57
WARNING: reduce/reduce conflict in state 82 resolved using rule (params -> param)
WARNING: rejected rule (params_points -> param) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_numerico -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 83
WARNING: reduce/reduce conflict in state 142 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 142
WARNING: reduce/reduce conflict in state 142 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 142
WARNING: reduce/reduce conflict in state 161 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_numerico -> VARIABLE) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 161
WARNING: reduce/reduce conflict in state 229 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (variables_por_comma -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 229 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 229 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 229 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_numerico -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 229 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 229 resolved using rule (param -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 229
WARNING: reduce/reduce conflict in state 234 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_string -> VARIABLE) in state 234
WARNING: reduce/reduce conflict in state 234 resolved using rule (elemento_numerico -> VARIABLE)
WARNING: rejected rule (elemento_logico -> VARIABLE) in state 234
