
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDlOGICAL ARROW AS BREAK CASE CATCH CLASS COMMA DIFFERENT DIVIDE DO DOUBLEPOINT ECHO ELSE ELSEIF ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EQUALSLOGICAL EXPONENTIAL EXTENDS FINAL FLOAT FOR FOREACH FUNCTION GLOBAL GREATEREQUAL GREATERTHAN ID IDENTICAL IF IMPLEMENTS INTERFACE LBRACKET LCURLY LESSEQUAL LESSTHAN LPAREN MINUS NEW NOTIDENTICAL NOTLOGICAL NUMBER OR ORLOGICAL PHPEND PHPSTART PLUS PRINT PRIVATE PROTECTED PUBLIC RBRACKET RCURLY RETURN RPAREN SEMICOLON STATIC STRING STRINGCC SWITCH THROW TIMES VAR VARIABLE WHILE XOR\n    expresiones : elemento_numerico\n    \n    elemento_numerico : elemento_numerico operador elemento_numerico\n                        | FLOAT\n                        | NUMBER\n                        | LPAREN elemento_numerico RPAREN\n                        | VARIABLE\n    \n    operador : PLUS\n                | MINUS\n                | DIVIDE\n                | EXPONENTIAL\n                | TIMES\n    '
    
_lr_action_items = {'FLOAT':([0,5,7,8,9,10,11,12,],[3,3,3,-7,-8,-9,-10,-11,]),'NUMBER':([0,5,7,8,9,10,11,12,],[4,4,4,-7,-8,-9,-10,-11,]),'LPAREN':([0,5,7,8,9,10,11,12,],[5,5,5,-7,-8,-9,-10,-11,]),'VARIABLE':([0,5,7,8,9,10,11,12,],[6,6,6,-7,-8,-9,-10,-11,]),'$end':([1,2,3,4,6,14,15,],[0,-1,-3,-4,-6,-2,-5,]),'PLUS':([2,3,4,6,13,14,15,],[8,-3,-4,-6,8,8,-5,]),'MINUS':([2,3,4,6,13,14,15,],[9,-3,-4,-6,9,9,-5,]),'DIVIDE':([2,3,4,6,13,14,15,],[10,-3,-4,-6,10,10,-5,]),'EXPONENTIAL':([2,3,4,6,13,14,15,],[11,-3,-4,-6,11,11,-5,]),'TIMES':([2,3,4,6,13,14,15,],[12,-3,-4,-6,12,12,-5,]),'RPAREN':([3,4,6,13,14,15,],[-3,-4,-6,15,-2,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresiones':([0,],[1,]),'elemento_numerico':([0,5,7,],[2,13,14,]),'operador':([2,13,14,],[7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresiones","S'",1,None,None,None),
  ('expresiones -> elemento_numerico','expresiones',1,'p_expresiones','sintaxis.py',6),
  ('elemento_numerico -> elemento_numerico operador elemento_numerico','elemento_numerico',3,'p_elemento_numerico','sintaxis.py',26),
  ('elemento_numerico -> FLOAT','elemento_numerico',1,'p_elemento_numerico','sintaxis.py',27),
  ('elemento_numerico -> NUMBER','elemento_numerico',1,'p_elemento_numerico','sintaxis.py',28),
  ('elemento_numerico -> LPAREN elemento_numerico RPAREN','elemento_numerico',3,'p_elemento_numerico','sintaxis.py',29),
  ('elemento_numerico -> VARIABLE','elemento_numerico',1,'p_elemento_numerico','sintaxis.py',30),
  ('operador -> PLUS','operador',1,'p_operador','sintaxis.py',35),
  ('operador -> MINUS','operador',1,'p_operador','sintaxis.py',36),
  ('operador -> DIVIDE','operador',1,'p_operador','sintaxis.py',37),
  ('operador -> EXPONENTIAL','operador',1,'p_operador','sintaxis.py',38),
  ('operador -> TIMES','operador',1,'p_operador','sintaxis.py',39),
]
